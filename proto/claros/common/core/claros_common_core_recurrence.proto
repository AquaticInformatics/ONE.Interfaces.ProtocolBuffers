syntax = "proto3";
package claros.common.core;

import "claros_common_core_recurrence_type.proto";
import "claros_common_core_clarosdatetime.proto";
import "claros_common_core_dayofweek.proto";
 
enum DayType {
    DAY_UNKNOWN = 0;
    DAY_SUNDAY = 1;
    DAY_MONDAY = 2;
    DAY_TUESDAY = 3;
    DAY_WEDNESDAY = 4;
    DAY_THURSDAY = 5;
    DAY_FRIDAY = 6;
    DAY_SATURDAY = 7;
} 

enum MonthType {
    MONTH_UNKNOWN = 0;
    MONTH_JANUARY = 1;
    MONTH_FEBRUARY = 2;
    MONTH_MARCH = 3;
    MONTH_APRIL = 4;
    MONTH_MAY = 5;
    MONTH_JUNE = 6;
    MONTH_JULY = 7;
    MONTH_AUGUST = 8;
    MONTH_SEPTEMBER = 9;
    MONTH_OCTOBER = 10;
    MONTH_NOVEMBER = 11;
    MONTH_DECEMBER = 12;
}

enum OrdinalType {
    ORDINAL_UNKNOWN = 0;
    ORDINAL_FIRST = 1;
    ORDINAL_SECOND = 2;
    ORDINAL_THIRD = 3;
    ORDINAL_FOURTH = 4;
    ORDINAL_LAST = 5;
}


message DayOfWeekInterval {
    OrdinalType ordinalType = 1;
    DayType dayType = 2;
    uint32 weekInterval = 3;
}

message MonthOfYearInterval {
    OrdinalType ordinalType = 1;
    DayType dayType = 2;
    MonthType monthType = 3;
}

message MonthDay {
    uint32 dayNumber = 1;
    uint32 monthInterval = 2;
}

message YearMonth {
    MonthType monthType = 1;
    uint32 dayOfMonth = 2; 
}

message Daily {
    oneof dailyPattern {
        uint32 interval = 1;
        bool everyWeekday = 2;
    }
}

message Weekly {
    uint32 interval = 1;
    repeated DayOfWeek daysOfWeek = 2;
}

message Monthly {
    oneof monthlyPattern {
        MonthDay monthDay = 1;
        DayOfWeekInterval dayOfWeekInterval = 2;
    }
}

message Yearly {
    uint32 interval = 1;
    oneof yearlyPattern {
        YearMonth yearMonth = 2;
        MonthOfYearInterval monthOfYearInterval = 3;
    }
}

message RecurrencePattern {
    oneof pattern {
        Daily daily = 1;
        Weekly weekly = 2;
        Monthly monthly = 3;
        Yearly yearly = 4;
    }
}

message RangeOfRecurrence {
    ClarosDateTime recurranceSartDate = 1;
    oneof recurranceEnd {
        bool noEnd = 2;
        uint32 occurances = 3;
        ClarosDateTime endDate = 4;        
    }
}

message Recurrance {
    ClarosDateTime startDate = 1;
    ClarosDateTime endDate = 2;
    RecurrencePattern recurrencePattern = 3;
    RangeOfRecurrence rangeOfRecurrence = 4;
}