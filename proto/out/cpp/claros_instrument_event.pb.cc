// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_event.proto

#include "claros_instrument_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fcalibration_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Calibration_claros_5finstrument_5fcalibration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fevent_5fmetadata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EventMetaData_claros_5finstrument_5fevent_5fmetadata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fprognosys_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PrognosysData_claros_5finstrument_5fprognosys_2eproto;
namespace claros {
namespace instrument {
class InstrumentEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentEvent> _instance;
} _InstrumentEvent_default_instance_;
}  // namespace instrument
}  // namespace claros
static void InitDefaultsInstrumentEvent_claros_5finstrument_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_InstrumentEvent_default_instance_;
    new (ptr) ::claros::instrument::InstrumentEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::InstrumentEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsInstrumentEvent_claros_5finstrument_5fevent_2eproto}, {
      &scc_info_Calibration_claros_5finstrument_5fcalibration_2eproto.base,
      &scc_info_EventMetaData_claros_5finstrument_5fevent_5fmetadata_2eproto.base,
      &scc_info_PrognosysData_claros_5finstrument_5fprognosys_2eproto.base,
      &scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base,}};

void InitDefaults_claros_5finstrument_5fevent_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5finstrument_5fevent_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5finstrument_5fevent_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5finstrument_5fevent_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5finstrument_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, calibrations_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, errors_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, info_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, limits_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, reminders_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, warnings_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, prognosys_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentEvent, eventdatetime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::instrument::InstrumentEvent)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_InstrumentEvent_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5finstrument_5fevent_2eproto = {
  {}, AddDescriptors_claros_5finstrument_5fevent_2eproto, "claros_instrument_event.proto", schemas,
  file_default_instances, TableStruct_claros_5finstrument_5fevent_2eproto::offsets,
  file_level_metadata_claros_5finstrument_5fevent_2eproto, 1, file_level_enum_descriptors_claros_5finstrument_5fevent_2eproto, file_level_service_descriptors_claros_5finstrument_5fevent_2eproto,
};

const char descriptor_table_protodef_claros_5finstrument_5fevent_2eproto[] =
  "\n\035claros_instrument_event.proto\022\021claros."
  "instrument\032\034claros_common_datetime.proto"
  "\032&claros_instrument_event_metadata.proto"
  "\032#claros_instrument_calibration.proto\032!c"
  "laros_instrument_prognosys.proto\"\251\003\n\017Ins"
  "trumentEvent\0224\n\014calibrations\030\001 \003(\0132\036.cla"
  "ros.instrument.Calibration\0220\n\006errors\030\002 \003"
  "(\0132 .claros.instrument.EventMetaData\022.\n\004"
  "info\030\003 \003(\0132 .claros.instrument.EventMeta"
  "Data\0220\n\006limits\030\004 \003(\0132 .claros.instrument"
  ".EventMetaData\0223\n\treminders\030\005 \003(\0132 .clar"
  "os.instrument.EventMetaData\0222\n\010warnings\030"
  "\006 \003(\0132 .claros.instrument.EventMetaData\022"
  "3\n\tprognosys\030\007 \003(\0132 .claros.instrument.P"
  "rognosysData\022.\n\reventDateTime\030\010 \001(\0132\027.cl"
  "aros.common.DateTimeb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5finstrument_5fevent_2eproto = {
  false, InitDefaults_claros_5finstrument_5fevent_2eproto, 
  descriptor_table_protodef_claros_5finstrument_5fevent_2eproto,
  "claros_instrument_event.proto", &assign_descriptors_table_claros_5finstrument_5fevent_2eproto, 628,
};

void AddDescriptors_claros_5finstrument_5fevent_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_claros_5fcommon_5fdatetime_2eproto,
    ::AddDescriptors_claros_5finstrument_5fevent_5fmetadata_2eproto,
    ::AddDescriptors_claros_5finstrument_5fcalibration_2eproto,
    ::AddDescriptors_claros_5finstrument_5fprognosys_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5finstrument_5fevent_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5finstrument_5fevent_2eproto = []() { AddDescriptors_claros_5finstrument_5fevent_2eproto(); return true; }();
namespace claros {
namespace instrument {

// ===================================================================

void InstrumentEvent::InitAsDefaultInstance() {
  ::claros::instrument::_InstrumentEvent_default_instance_._instance.get_mutable()->eventdatetime_ = const_cast< ::claros::common::DateTime*>(
      ::claros::common::DateTime::internal_default_instance());
}
class InstrumentEvent::HasBitSetters {
 public:
  static const ::claros::common::DateTime& eventdatetime(const InstrumentEvent* msg);
};

const ::claros::common::DateTime&
InstrumentEvent::HasBitSetters::eventdatetime(const InstrumentEvent* msg) {
  return *msg->eventdatetime_;
}
void InstrumentEvent::clear_calibrations() {
  calibrations_.Clear();
}
void InstrumentEvent::clear_errors() {
  errors_.Clear();
}
void InstrumentEvent::clear_info() {
  info_.Clear();
}
void InstrumentEvent::clear_limits() {
  limits_.Clear();
}
void InstrumentEvent::clear_reminders() {
  reminders_.Clear();
}
void InstrumentEvent::clear_warnings() {
  warnings_.Clear();
}
void InstrumentEvent::clear_prognosys() {
  prognosys_.Clear();
}
void InstrumentEvent::clear_eventdatetime() {
  if (GetArenaNoVirtual() == nullptr && eventdatetime_ != nullptr) {
    delete eventdatetime_;
  }
  eventdatetime_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentEvent::kCalibrationsFieldNumber;
const int InstrumentEvent::kErrorsFieldNumber;
const int InstrumentEvent::kInfoFieldNumber;
const int InstrumentEvent::kLimitsFieldNumber;
const int InstrumentEvent::kRemindersFieldNumber;
const int InstrumentEvent::kWarningsFieldNumber;
const int InstrumentEvent::kPrognosysFieldNumber;
const int InstrumentEvent::kEventDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentEvent::InstrumentEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.InstrumentEvent)
}
InstrumentEvent::InstrumentEvent(const InstrumentEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      calibrations_(from.calibrations_),
      errors_(from.errors_),
      info_(from.info_),
      limits_(from.limits_),
      reminders_(from.reminders_),
      warnings_(from.warnings_),
      prognosys_(from.prognosys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_eventdatetime()) {
    eventdatetime_ = new ::claros::common::DateTime(*from.eventdatetime_);
  } else {
    eventdatetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:claros.instrument.InstrumentEvent)
}

void InstrumentEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto.base);
  eventdatetime_ = nullptr;
}

InstrumentEvent::~InstrumentEvent() {
  // @@protoc_insertion_point(destructor:claros.instrument.InstrumentEvent)
  SharedDtor();
}

void InstrumentEvent::SharedDtor() {
  if (this != internal_default_instance()) delete eventdatetime_;
}

void InstrumentEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentEvent& InstrumentEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto.base);
  return *internal_default_instance();
}


void InstrumentEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.InstrumentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calibrations_.Clear();
  errors_.Clear();
  info_.Clear();
  limits_.Clear();
  reminders_.Clear();
  warnings_.Clear();
  prognosys_.Clear();
  if (GetArenaNoVirtual() == nullptr && eventdatetime_ != nullptr) {
    delete eventdatetime_;
  }
  eventdatetime_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstrumentEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .claros.instrument.Calibration calibrations = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::Calibration::_InternalParse;
          object = msg->add_calibrations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.EventMetaData errors = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::EventMetaData::_InternalParse;
          object = msg->add_errors();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.EventMetaData info = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::EventMetaData::_InternalParse;
          object = msg->add_info();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.EventMetaData limits = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::EventMetaData::_InternalParse;
          object = msg->add_limits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.EventMetaData reminders = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::EventMetaData::_InternalParse;
          object = msg->add_reminders();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.EventMetaData warnings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::EventMetaData::_InternalParse;
          object = msg->add_warnings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .claros.instrument.PrognosysData prognosys = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::PrognosysData::_InternalParse;
          object = msg->add_prognosys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .claros.common.DateTime eventDateTime = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::DateTime::_InternalParse;
        object = msg->mutable_eventdatetime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.InstrumentEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .claros.instrument.Calibration calibrations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_calibrations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.EventMetaData errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.EventMetaData info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.EventMetaData limits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.EventMetaData reminders = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_reminders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.EventMetaData warnings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_warnings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.PrognosysData prognosys = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prognosys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.DateTime eventDateTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eventdatetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.InstrumentEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.InstrumentEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.InstrumentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .claros.instrument.Calibration calibrations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibrations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->calibrations(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.EventMetaData errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->errors(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.EventMetaData info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->info(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.EventMetaData limits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->limits(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.EventMetaData reminders = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reminders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->reminders(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.EventMetaData warnings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warnings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->warnings(static_cast<int>(i)),
      output);
  }

  // repeated .claros.instrument.PrognosysData prognosys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prognosys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->prognosys(static_cast<int>(i)),
      output);
  }

  // .claros.common.DateTime eventDateTime = 8;
  if (this->has_eventdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::eventdatetime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.InstrumentEvent)
}

::google::protobuf::uint8* InstrumentEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.InstrumentEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .claros.instrument.Calibration calibrations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calibrations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->calibrations(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.EventMetaData errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->errors(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.EventMetaData info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->info(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.EventMetaData limits = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->limits(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.EventMetaData reminders = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reminders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->reminders(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.EventMetaData warnings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->warnings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->warnings(static_cast<int>(i)), target);
  }

  // repeated .claros.instrument.PrognosysData prognosys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prognosys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->prognosys(static_cast<int>(i)), target);
  }

  // .claros.common.DateTime eventDateTime = 8;
  if (this->has_eventdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::eventdatetime(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.InstrumentEvent)
  return target;
}

size_t InstrumentEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.InstrumentEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.instrument.Calibration calibrations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->calibrations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->calibrations(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.EventMetaData errors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.EventMetaData info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->info(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.EventMetaData limits = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.EventMetaData reminders = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->reminders_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->reminders(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.EventMetaData warnings = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->warnings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->warnings(static_cast<int>(i)));
    }
  }

  // repeated .claros.instrument.PrognosysData prognosys = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->prognosys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prognosys(static_cast<int>(i)));
    }
  }

  // .claros.common.DateTime eventDateTime = 8;
  if (this->has_eventdatetime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *eventdatetime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.InstrumentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentEvent* source =
      ::google::protobuf::DynamicCastToGenerated<InstrumentEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.InstrumentEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.InstrumentEvent)
    MergeFrom(*source);
  }
}

void InstrumentEvent::MergeFrom(const InstrumentEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.InstrumentEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calibrations_.MergeFrom(from.calibrations_);
  errors_.MergeFrom(from.errors_);
  info_.MergeFrom(from.info_);
  limits_.MergeFrom(from.limits_);
  reminders_.MergeFrom(from.reminders_);
  warnings_.MergeFrom(from.warnings_);
  prognosys_.MergeFrom(from.prognosys_);
  if (from.has_eventdatetime()) {
    mutable_eventdatetime()->::claros::common::DateTime::MergeFrom(from.eventdatetime());
  }
}

void InstrumentEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.InstrumentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentEvent::CopyFrom(const InstrumentEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.InstrumentEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentEvent::IsInitialized() const {
  return true;
}

void InstrumentEvent::Swap(InstrumentEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentEvent::InternalSwap(InstrumentEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&calibrations_)->InternalSwap(CastToBase(&other->calibrations_));
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  CastToBase(&info_)->InternalSwap(CastToBase(&other->info_));
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
  CastToBase(&reminders_)->InternalSwap(CastToBase(&other->reminders_));
  CastToBase(&warnings_)->InternalSwap(CastToBase(&other->warnings_));
  CastToBase(&prognosys_)->InternalSwap(CastToBase(&other->prognosys_));
  swap(eventdatetime_, other->eventdatetime_);
}

::google::protobuf::Metadata InstrumentEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fevent_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fevent_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::instrument::InstrumentEvent* Arena::CreateMaybeMessage< ::claros::instrument::InstrumentEvent >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::InstrumentEvent >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
