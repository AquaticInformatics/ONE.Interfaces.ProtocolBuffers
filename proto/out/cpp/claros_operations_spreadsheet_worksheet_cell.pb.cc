// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_cell.proto

#include "claros_operations_spreadsheet_worksheet_cell.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fnote_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Note_claros_5fcommon_5fcore_5fnote_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto;
namespace claros {
namespace operations {
namespace spreadsheet {
class CellDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cell> _instance;
} _Cell_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
static void InitDefaultsCell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::operations::spreadsheet::_Cell_default_instance_;
    new (ptr) ::claros::operations::spreadsheet::Cell();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::operations::spreadsheet::Cell::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto}, {
      &scc_info_Note_claros_5fcommon_5fcore_5fnote_2eproto.base,
      &scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto.base,}};

void InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::Cell, columnid_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::Cell, notes_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::Cell, celldata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::operations::spreadsheet::Cell)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::operations::spreadsheet::_Cell_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto = {
  {}, AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, "claros_operations_spreadsheet_worksheet_cell.proto", schemas,
  file_default_instances, TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto::offsets,
  file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, 1, file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto,
};

const char descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto[] =
  "\n2claros_operations_spreadsheet_workshee"
  "t_cell.proto\022\035claros.operations.spreadsh"
  "eet\032\035claros_common_core_note.proto\0326clar"
  "os_operations_spreadsheet_worksheet_cell"
  "data.proto\"|\n\004Cell\022\020\n\010columnId\030\001 \001(\r\022\'\n\005"
  "notes\030\002 \003(\0132\030.claros.common.core.Note\0229\n"
  "\010cellData\030\003 \003(\0132\'.claros.operations.spre"
  "adsheet.CellDatab\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto = {
  false, InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, 
  descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto,
  "claros_operations_spreadsheet_worksheet_cell.proto", &assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, 304,
};

void AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5fnote_2eproto,
    ::AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto = []() { AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto(); return true; }();
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

void Cell::InitAsDefaultInstance() {
}
class Cell::HasBitSetters {
 public:
};

void Cell::clear_notes() {
  notes_.Clear();
}
void Cell::clear_celldata() {
  celldata_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cell::kColumnIdFieldNumber;
const int Cell::kNotesFieldNumber;
const int Cell::kCellDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cell::Cell()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.operations.spreadsheet.Cell)
}
Cell::Cell(const Cell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notes_(from.notes_),
      celldata_(from.celldata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  columnid_ = from.columnid_;
  // @@protoc_insertion_point(copy_constructor:claros.operations.spreadsheet.Cell)
}

void Cell::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto.base);
  columnid_ = 0u;
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:claros.operations.spreadsheet.Cell)
  SharedDtor();
}

void Cell::SharedDtor() {
}

void Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cell& Cell::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto.base);
  return *internal_default_instance();
}


void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.operations.spreadsheet.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_.Clear();
  celldata_.Clear();
  columnid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cell::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Cell*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 columnId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_columnid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .claros.common.core.Note notes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::common::core::Note::_InternalParse;
          object = msg->add_notes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .claros.operations.spreadsheet.CellData cellData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::operations::spreadsheet::CellData::_InternalParse;
          object = msg->add_celldata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.operations.spreadsheet.Cell)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 columnId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &columnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.common.core.Note notes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.operations.spreadsheet.CellData cellData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_celldata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.operations.spreadsheet.Cell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.operations.spreadsheet.Cell)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.operations.spreadsheet.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 columnId = 1;
  if (this->columnid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->columnid(), output);
  }

  // repeated .claros.common.core.Note notes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->notes(static_cast<int>(i)),
      output);
  }

  // repeated .claros.operations.spreadsheet.CellData cellData = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celldata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->celldata(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.operations.spreadsheet.Cell)
}

::google::protobuf::uint8* Cell::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.operations.spreadsheet.Cell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 columnId = 1;
  if (this->columnid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->columnid(), target);
  }

  // repeated .claros.common.core.Note notes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->notes(static_cast<int>(i)), target);
  }

  // repeated .claros.operations.spreadsheet.CellData cellData = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celldata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->celldata(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.operations.spreadsheet.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.operations.spreadsheet.Cell)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.common.core.Note notes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->notes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notes(static_cast<int>(i)));
    }
  }

  // repeated .claros.operations.spreadsheet.CellData cellData = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->celldata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->celldata(static_cast<int>(i)));
    }
  }

  // uint32 columnId = 1;
  if (this->columnid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->columnid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.operations.spreadsheet.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Cell* source =
      ::google::protobuf::DynamicCastToGenerated<Cell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.operations.spreadsheet.Cell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.operations.spreadsheet.Cell)
    MergeFrom(*source);
  }
}

void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.operations.spreadsheet.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_.MergeFrom(from.notes_);
  celldata_.MergeFrom(from.celldata_);
  if (from.columnid() != 0) {
    set_columnid(from.columnid());
  }
}

void Cell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.operations.spreadsheet.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.operations.spreadsheet.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::Swap(Cell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cell::InternalSwap(Cell* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notes_)->InternalSwap(CastToBase(&other->notes_));
  CastToBase(&celldata_)->InternalSwap(CastToBase(&other->celldata_));
  swap(columnid_, other->columnid_);
}

::google::protobuf::Metadata Cell::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto);
  return ::file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::operations::spreadsheet::Cell* Arena::CreateMaybeMessage< ::claros::operations::spreadsheet::Cell >(Arena* arena) {
  return Arena::CreateInternal< ::claros::operations::spreadsheet::Cell >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
