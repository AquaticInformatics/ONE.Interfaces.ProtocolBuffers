// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formfield_data.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_5fdata_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_operations_spreadsheet_worksheet_cell.pb.h"
#include "claros_instrument_data.pb.h"
#include "claros_common_core_auditevent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformfield_5fdata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fform_5fformfield_5fdata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto();
namespace claros {
namespace common {
namespace form {
class FormFieldData;
class FormFieldDataDefaultTypeInternal;
extern FormFieldDataDefaultTypeInternal _FormFieldData_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::form::FormFieldData* Arena::CreateMaybeMessage<::claros::common::form::FormFieldData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace form {

// ===================================================================

class FormFieldData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.form.FormFieldData) */ {
 public:
  FormFieldData();
  virtual ~FormFieldData();

  FormFieldData(const FormFieldData& from);

  inline FormFieldData& operator=(const FormFieldData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormFieldData(FormFieldData&& from) noexcept
    : FormFieldData() {
    *this = ::std::move(from);
  }

  inline FormFieldData& operator=(FormFieldData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FormFieldData& default_instance();

  enum FieldDataBindingCase {
    kCell = 1,
    FIELDDATABINDING_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormFieldData* internal_default_instance() {
    return reinterpret_cast<const FormFieldData*>(
               &_FormFieldData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FormFieldData* other);
  friend void swap(FormFieldData& a, FormFieldData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormFieldData* New() const final {
    return CreateMaybeMessage<FormFieldData>(nullptr);
  }

  FormFieldData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FormFieldData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FormFieldData& from);
  void MergeFrom(const FormFieldData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormFieldData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .claros.instrument.InstrumentData instrumentData = 2;
  bool has_instrumentdata() const;
  void clear_instrumentdata();
  static const int kInstrumentDataFieldNumber = 2;
  const ::claros::instrument::InstrumentData& instrumentdata() const;
  ::claros::instrument::InstrumentData* release_instrumentdata();
  ::claros::instrument::InstrumentData* mutable_instrumentdata();
  void set_allocated_instrumentdata(::claros::instrument::InstrumentData* instrumentdata);

  // .claros.common.core.AuditEvent auditEvent = 99;
  bool has_auditevent() const;
  void clear_auditevent();
  static const int kAuditEventFieldNumber = 99;
  const ::claros::common::core::AuditEvent& auditevent() const;
  ::claros::common::core::AuditEvent* release_auditevent();
  ::claros::common::core::AuditEvent* mutable_auditevent();
  void set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent);

  // .claros.operations.spreadsheet.Cell cell = 1;
  bool has_cell() const;
  void clear_cell();
  static const int kCellFieldNumber = 1;
  const ::claros::operations::spreadsheet::Cell& cell() const;
  ::claros::operations::spreadsheet::Cell* release_cell();
  ::claros::operations::spreadsheet::Cell* mutable_cell();
  void set_allocated_cell(::claros::operations::spreadsheet::Cell* cell);

  void clear_fieldDataBinding();
  FieldDataBindingCase fieldDataBinding_case() const;
  // @@protoc_insertion_point(class_scope:claros.common.form.FormFieldData)
 private:
  class HasBitSetters;
  void set_has_cell();

  inline bool has_fieldDataBinding() const;
  inline void clear_has_fieldDataBinding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::claros::instrument::InstrumentData* instrumentdata_;
  ::claros::common::core::AuditEvent* auditevent_;
  union FieldDataBindingUnion {
    FieldDataBindingUnion() {}
    ::claros::operations::spreadsheet::Cell* cell_;
  } fieldDataBinding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5fcommon_5fform_5fformfield_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormFieldData

// .claros.operations.spreadsheet.Cell cell = 1;
inline bool FormFieldData::has_cell() const {
  return fieldDataBinding_case() == kCell;
}
inline void FormFieldData::set_has_cell() {
  _oneof_case_[0] = kCell;
}
inline ::claros::operations::spreadsheet::Cell* FormFieldData::release_cell() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormFieldData.cell)
  if (has_cell()) {
    clear_has_fieldDataBinding();
      ::claros::operations::spreadsheet::Cell* temp = fieldDataBinding_.cell_;
    fieldDataBinding_.cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::operations::spreadsheet::Cell& FormFieldData::cell() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormFieldData.cell)
  return has_cell()
      ? *fieldDataBinding_.cell_
      : *reinterpret_cast< ::claros::operations::spreadsheet::Cell*>(&::claros::operations::spreadsheet::_Cell_default_instance_);
}
inline ::claros::operations::spreadsheet::Cell* FormFieldData::mutable_cell() {
  if (!has_cell()) {
    clear_fieldDataBinding();
    set_has_cell();
    fieldDataBinding_.cell_ = CreateMaybeMessage< ::claros::operations::spreadsheet::Cell >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormFieldData.cell)
  return fieldDataBinding_.cell_;
}

// .claros.instrument.InstrumentData instrumentData = 2;
inline bool FormFieldData::has_instrumentdata() const {
  return this != internal_default_instance() && instrumentdata_ != nullptr;
}
inline const ::claros::instrument::InstrumentData& FormFieldData::instrumentdata() const {
  const ::claros::instrument::InstrumentData* p = instrumentdata_;
  // @@protoc_insertion_point(field_get:claros.common.form.FormFieldData.instrumentData)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::instrument::InstrumentData*>(
      &::claros::instrument::_InstrumentData_default_instance_);
}
inline ::claros::instrument::InstrumentData* FormFieldData::release_instrumentdata() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormFieldData.instrumentData)
  
  ::claros::instrument::InstrumentData* temp = instrumentdata_;
  instrumentdata_ = nullptr;
  return temp;
}
inline ::claros::instrument::InstrumentData* FormFieldData::mutable_instrumentdata() {
  
  if (instrumentdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::instrument::InstrumentData>(GetArenaNoVirtual());
    instrumentdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormFieldData.instrumentData)
  return instrumentdata_;
}
inline void FormFieldData::set_allocated_instrumentdata(::claros::instrument::InstrumentData* instrumentdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(instrumentdata_);
  }
  if (instrumentdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instrumentdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, instrumentdata, submessage_arena);
    }
    
  } else {
    
  }
  instrumentdata_ = instrumentdata;
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormFieldData.instrumentData)
}

// .claros.common.core.AuditEvent auditEvent = 99;
inline bool FormFieldData::has_auditevent() const {
  return this != internal_default_instance() && auditevent_ != nullptr;
}
inline const ::claros::common::core::AuditEvent& FormFieldData::auditevent() const {
  const ::claros::common::core::AuditEvent* p = auditevent_;
  // @@protoc_insertion_point(field_get:claros.common.form.FormFieldData.auditEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::AuditEvent*>(
      &::claros::common::core::_AuditEvent_default_instance_);
}
inline ::claros::common::core::AuditEvent* FormFieldData::release_auditevent() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormFieldData.auditEvent)
  
  ::claros::common::core::AuditEvent* temp = auditevent_;
  auditevent_ = nullptr;
  return temp;
}
inline ::claros::common::core::AuditEvent* FormFieldData::mutable_auditevent() {
  
  if (auditevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::AuditEvent>(GetArenaNoVirtual());
    auditevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormFieldData.auditEvent)
  return auditevent_;
}
inline void FormFieldData::set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auditevent_);
  }
  if (auditevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auditevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auditevent, submessage_arena);
    }
    
  } else {
    
  }
  auditevent_ = auditevent;
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormFieldData.auditEvent)
}

inline bool FormFieldData::has_fieldDataBinding() const {
  return fieldDataBinding_case() != FIELDDATABINDING_NOT_SET;
}
inline void FormFieldData::clear_has_fieldDataBinding() {
  _oneof_case_[0] = FIELDDATABINDING_NOT_SET;
}
inline FormFieldData::FieldDataBindingCase FormFieldData::fieldDataBinding_case() const {
  return FormFieldData::FieldDataBindingCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace form
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_5fdata_2eproto
