// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_limit.proto

#include "claros_common_core_limit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5frecurrence_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto;
namespace claros {
namespace common {
namespace core {
class LimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Limit> _instance;
} _Limit_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
static void InitDefaultsLimit_claros_5fcommon_5fcore_5flimit_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::core::_Limit_default_instance_;
    new (ptr) ::claros::common::core::Limit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::core::Limit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLimit_claros_5fcommon_5fcore_5flimit_2eproto}, {
      &scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fcore_5flimit_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fcore_5flimit_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fcore_5flimit_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fcore_5flimit_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fcore_5flimit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, i18nkey_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, limittype_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, value_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, unitid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Limit, recurrence_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::core::Limit)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::core::_Limit_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fcore_5flimit_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fcore_5flimit_2eproto, "claros_common_core_limit.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fcore_5flimit_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fcore_5flimit_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fcore_5flimit_2eproto, file_level_service_descriptors_claros_5fcommon_5fcore_5flimit_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fcore_5flimit_2eproto[] =
  "\n\036claros_common_core_limit.proto\022\022claros"
  ".common.core\032#claros_common_core_limit_t"
  "ype.proto\032#claros_common_core_recurrence"
  ".proto\"\235\001\n\005Limit\022\017\n\007i18nKey\030\001 \001(\t\0220\n\tlim"
  "itType\030\002 \001(\0162\035.claros.common.core.LimitT"
  "ype\022\r\n\005value\030\003 \001(\001\022\016\n\006unitId\030\004 \001(\r\0222\n\nre"
  "currence\030\005 \001(\0132\036.claros.common.core.Recu"
  "rrenceb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fcore_5flimit_2eproto = {
  false, InitDefaults_claros_5fcommon_5fcore_5flimit_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fcore_5flimit_2eproto,
  "claros_common_core_limit.proto", &assign_descriptors_table_claros_5fcommon_5fcore_5flimit_2eproto, 294,
};

void AddDescriptors_claros_5fcommon_5fcore_5flimit_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5flimit_5ftype_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5frecurrence_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fcore_5flimit_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fcore_5flimit_2eproto = []() { AddDescriptors_claros_5fcommon_5fcore_5flimit_2eproto(); return true; }();
namespace claros {
namespace common {
namespace core {

// ===================================================================

void Limit::InitAsDefaultInstance() {
  ::claros::common::core::_Limit_default_instance_._instance.get_mutable()->recurrence_ = const_cast< ::claros::common::core::Recurrence*>(
      ::claros::common::core::Recurrence::internal_default_instance());
}
class Limit::HasBitSetters {
 public:
  static const ::claros::common::core::Recurrence& recurrence(const Limit* msg);
};

const ::claros::common::core::Recurrence&
Limit::HasBitSetters::recurrence(const Limit* msg) {
  return *msg->recurrence_;
}
void Limit::clear_recurrence() {
  if (GetArenaNoVirtual() == nullptr && recurrence_ != nullptr) {
    delete recurrence_;
  }
  recurrence_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Limit::kI18NKeyFieldNumber;
const int Limit::kLimitTypeFieldNumber;
const int Limit::kValueFieldNumber;
const int Limit::kUnitIdFieldNumber;
const int Limit::kRecurrenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Limit::Limit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.core.Limit)
}
Limit::Limit(const Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  i18nkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.i18nkey().size() > 0) {
    i18nkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.i18nkey_);
  }
  if (from.has_recurrence()) {
    recurrence_ = new ::claros::common::core::Recurrence(*from.recurrence_);
  } else {
    recurrence_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unitid_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unitid_));
  // @@protoc_insertion_point(copy_constructor:claros.common.core.Limit)
}

void Limit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto.base);
  i18nkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&recurrence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unitid_) -
      reinterpret_cast<char*>(&recurrence_)) + sizeof(unitid_));
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:claros.common.core.Limit)
  SharedDtor();
}

void Limit::SharedDtor() {
  i18nkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete recurrence_;
}

void Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Limit& Limit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto.base);
  return *internal_default_instance();
}


void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.core.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i18nkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && recurrence_ != nullptr) {
    delete recurrence_;
  }
  recurrence_ = nullptr;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unitid_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unitid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Limit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Limit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string i18nKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.core.Limit.i18nKey");
        object = msg->mutable_i18nkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.common.core.LimitType limitType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_limittype(static_cast<::claros::common::core::LimitType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // uint32 unitId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unitid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .claros.common.core.Recurrence recurrence = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::Recurrence::_InternalParse;
        object = msg->mutable_recurrence();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.core.Limit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string i18nKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i18nkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.core.Limit.i18nKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.LimitType limitType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_limittype(static_cast< ::claros::common::core::LimitType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unitId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.Recurrence recurrence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recurrence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.core.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.core.Limit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.core.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string i18nKey = 1;
  if (this->i18nkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.core.Limit.i18nKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->i18nkey(), output);
  }

  // .claros.common.core.LimitType limitType = 2;
  if (this->limittype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->limittype(), output);
  }

  // double value = 3;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unitid(), output);
  }

  // .claros.common.core.Recurrence recurrence = 5;
  if (this->has_recurrence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::recurrence(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.core.Limit)
}

::google::protobuf::uint8* Limit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.core.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string i18nKey = 1;
  if (this->i18nkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.core.Limit.i18nKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->i18nkey(), target);
  }

  // .claros.common.core.LimitType limitType = 2;
  if (this->limittype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->limittype(), target);
  }

  // double value = 3;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unitid(), target);
  }

  // .claros.common.core.Recurrence recurrence = 5;
  if (this->has_recurrence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::recurrence(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.core.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.core.Limit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string i18nKey = 1;
  if (this->i18nkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->i18nkey());
  }

  // .claros.common.core.Recurrence recurrence = 5;
  if (this->has_recurrence()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recurrence_);
  }

  // double value = 3;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // .claros.common.core.LimitType limitType = 2;
  if (this->limittype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->limittype());
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unitid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.core.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const Limit* source =
      ::google::protobuf::DynamicCastToGenerated<Limit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.core.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.core.Limit)
    MergeFrom(*source);
  }
}

void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.core.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i18nkey().size() > 0) {

    i18nkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.i18nkey_);
  }
  if (from.has_recurrence()) {
    mutable_recurrence()->::claros::common::core::Recurrence::MergeFrom(from.recurrence());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.limittype() != 0) {
    set_limittype(from.limittype());
  }
  if (from.unitid() != 0) {
    set_unitid(from.unitid());
  }
}

void Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.core.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.core.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::Swap(Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Limit::InternalSwap(Limit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  i18nkey_.Swap(&other->i18nkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recurrence_, other->recurrence_);
  swap(value_, other->value_);
  swap(limittype_, other->limittype_);
  swap(unitid_, other->unitid_);
}

::google::protobuf::Metadata Limit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fcore_5flimit_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fcore_5flimit_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::core::Limit* Arena::CreateMaybeMessage< ::claros::common::core::Limit >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::core::Limit >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
