// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_gis.proto

#include "claros_common_gis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fgis_5fmulti_5fpoint2d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiPoint2D_claros_5fcommon_5fgis_5fmulti_5fpoint2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fgis_5fmulti_5fpoint3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiPoint3D_claros_5fcommon_5fgis_5fmulti_5fpoint3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fgis_5fpoint2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D_claros_5fcommon_5fgis_5fpoint2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fgis_5fpoint3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D_claros_5fcommon_5fgis_5fpoint3d_2eproto;
namespace claros {
namespace common {
namespace gis {
class GISDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GIS> _instance;
} _GIS_default_instance_;
}  // namespace gis
}  // namespace common
}  // namespace claros
static void InitDefaultsGIS_claros_5fcommon_5fgis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::gis::_GIS_default_instance_;
    new (ptr) ::claros::common::gis::GIS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::gis::GIS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_GIS_claros_5fcommon_5fgis_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGIS_claros_5fcommon_5fgis_2eproto}, {
      &scc_info_Point2D_claros_5fcommon_5fgis_5fpoint2d_2eproto.base,
      &scc_info_Point3D_claros_5fcommon_5fgis_5fpoint3d_2eproto.base,
      &scc_info_MultiPoint2D_claros_5fcommon_5fgis_5fmulti_5fpoint2d_2eproto.base,
      &scc_info_MultiPoint3D_claros_5fcommon_5fgis_5fmulti_5fpoint3d_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fgis_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_GIS_claros_5fcommon_5fgis_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fgis_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fgis_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fgis_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fgis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::gis::GIS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::gis::GIS, point2d_),
  PROTOBUF_FIELD_OFFSET(::claros::common::gis::GIS, point3d_),
  PROTOBUF_FIELD_OFFSET(::claros::common::gis::GIS, multi_point2d_),
  PROTOBUF_FIELD_OFFSET(::claros::common::gis::GIS, multi_point3d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::gis::GIS)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::gis::_GIS_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fgis_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fgis_2eproto, "claros_common_gis.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fgis_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fgis_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fgis_2eproto, file_level_service_descriptors_claros_5fcommon_5fgis_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fgis_2eproto[] =
  "\n\027claros_common_gis.proto\022\021claros.common"
  ".gis\032\037claros_common_gis_point2d.proto\032\037c"
  "laros_common_gis_point3d.proto\032%claros_c"
  "ommon_gis_multi_point2d.proto\032%claros_co"
  "mmon_gis_multi_point3d.proto\"\317\001\n\003GIS\022+\n\007"
  "point2d\030\001 \001(\0132\032.claros.common.gis.Point2"
  "D\022+\n\007point3d\030\002 \001(\0132\032.claros.common.gis.P"
  "oint3D\0226\n\rmulti_point2d\030\003 \001(\0132\037.claros.c"
  "ommon.gis.MultiPoint2D\0226\n\rmulti_point3d\030"
  "\004 \001(\0132\037.claros.common.gis.MultiPoint3Db\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fgis_2eproto = {
  false, InitDefaults_claros_5fcommon_5fgis_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fgis_2eproto,
  "claros_common_gis.proto", &assign_descriptors_table_claros_5fcommon_5fgis_2eproto, 406,
};

void AddDescriptors_claros_5fcommon_5fgis_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_claros_5fcommon_5fgis_5fpoint2d_2eproto,
    ::AddDescriptors_claros_5fcommon_5fgis_5fpoint3d_2eproto,
    ::AddDescriptors_claros_5fcommon_5fgis_5fmulti_5fpoint2d_2eproto,
    ::AddDescriptors_claros_5fcommon_5fgis_5fmulti_5fpoint3d_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fgis_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fgis_2eproto = []() { AddDescriptors_claros_5fcommon_5fgis_2eproto(); return true; }();
namespace claros {
namespace common {
namespace gis {

// ===================================================================

void GIS::InitAsDefaultInstance() {
  ::claros::common::gis::_GIS_default_instance_._instance.get_mutable()->point2d_ = const_cast< ::claros::common::gis::Point2D*>(
      ::claros::common::gis::Point2D::internal_default_instance());
  ::claros::common::gis::_GIS_default_instance_._instance.get_mutable()->point3d_ = const_cast< ::claros::common::gis::Point3D*>(
      ::claros::common::gis::Point3D::internal_default_instance());
  ::claros::common::gis::_GIS_default_instance_._instance.get_mutable()->multi_point2d_ = const_cast< ::claros::common::gis::MultiPoint2D*>(
      ::claros::common::gis::MultiPoint2D::internal_default_instance());
  ::claros::common::gis::_GIS_default_instance_._instance.get_mutable()->multi_point3d_ = const_cast< ::claros::common::gis::MultiPoint3D*>(
      ::claros::common::gis::MultiPoint3D::internal_default_instance());
}
class GIS::HasBitSetters {
 public:
  static const ::claros::common::gis::Point2D& point2d(const GIS* msg);
  static const ::claros::common::gis::Point3D& point3d(const GIS* msg);
  static const ::claros::common::gis::MultiPoint2D& multi_point2d(const GIS* msg);
  static const ::claros::common::gis::MultiPoint3D& multi_point3d(const GIS* msg);
};

const ::claros::common::gis::Point2D&
GIS::HasBitSetters::point2d(const GIS* msg) {
  return *msg->point2d_;
}
const ::claros::common::gis::Point3D&
GIS::HasBitSetters::point3d(const GIS* msg) {
  return *msg->point3d_;
}
const ::claros::common::gis::MultiPoint2D&
GIS::HasBitSetters::multi_point2d(const GIS* msg) {
  return *msg->multi_point2d_;
}
const ::claros::common::gis::MultiPoint3D&
GIS::HasBitSetters::multi_point3d(const GIS* msg) {
  return *msg->multi_point3d_;
}
void GIS::clear_point2d() {
  if (GetArenaNoVirtual() == nullptr && point2d_ != nullptr) {
    delete point2d_;
  }
  point2d_ = nullptr;
}
void GIS::clear_point3d() {
  if (GetArenaNoVirtual() == nullptr && point3d_ != nullptr) {
    delete point3d_;
  }
  point3d_ = nullptr;
}
void GIS::clear_multi_point2d() {
  if (GetArenaNoVirtual() == nullptr && multi_point2d_ != nullptr) {
    delete multi_point2d_;
  }
  multi_point2d_ = nullptr;
}
void GIS::clear_multi_point3d() {
  if (GetArenaNoVirtual() == nullptr && multi_point3d_ != nullptr) {
    delete multi_point3d_;
  }
  multi_point3d_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GIS::kPoint2DFieldNumber;
const int GIS::kPoint3DFieldNumber;
const int GIS::kMultiPoint2DFieldNumber;
const int GIS::kMultiPoint3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GIS::GIS()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.gis.GIS)
}
GIS::GIS(const GIS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point2d()) {
    point2d_ = new ::claros::common::gis::Point2D(*from.point2d_);
  } else {
    point2d_ = nullptr;
  }
  if (from.has_point3d()) {
    point3d_ = new ::claros::common::gis::Point3D(*from.point3d_);
  } else {
    point3d_ = nullptr;
  }
  if (from.has_multi_point2d()) {
    multi_point2d_ = new ::claros::common::gis::MultiPoint2D(*from.multi_point2d_);
  } else {
    multi_point2d_ = nullptr;
  }
  if (from.has_multi_point3d()) {
    multi_point3d_ = new ::claros::common::gis::MultiPoint3D(*from.multi_point3d_);
  } else {
    multi_point3d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:claros.common.gis.GIS)
}

void GIS::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GIS_claros_5fcommon_5fgis_2eproto.base);
  ::memset(&point2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_point3d_) -
      reinterpret_cast<char*>(&point2d_)) + sizeof(multi_point3d_));
}

GIS::~GIS() {
  // @@protoc_insertion_point(destructor:claros.common.gis.GIS)
  SharedDtor();
}

void GIS::SharedDtor() {
  if (this != internal_default_instance()) delete point2d_;
  if (this != internal_default_instance()) delete point3d_;
  if (this != internal_default_instance()) delete multi_point2d_;
  if (this != internal_default_instance()) delete multi_point3d_;
}

void GIS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GIS& GIS::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GIS_claros_5fcommon_5fgis_2eproto.base);
  return *internal_default_instance();
}


void GIS::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.gis.GIS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && point2d_ != nullptr) {
    delete point2d_;
  }
  point2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point3d_ != nullptr) {
    delete point3d_;
  }
  point3d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multi_point2d_ != nullptr) {
    delete multi_point2d_;
  }
  multi_point2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multi_point3d_ != nullptr) {
    delete multi_point3d_;
  }
  multi_point3d_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GIS::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GIS*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.gis.Point2D point2d = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::gis::Point2D::_InternalParse;
        object = msg->mutable_point2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.gis.Point3D point3d = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::gis::Point3D::_InternalParse;
        object = msg->mutable_point3d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.gis.MultiPoint2D multi_point2d = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::gis::MultiPoint2D::_InternalParse;
        object = msg->mutable_multi_point2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.gis.MultiPoint3D multi_point3d = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::gis::MultiPoint3D::_InternalParse;
        object = msg->mutable_multi_point3d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GIS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.gis.GIS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.gis.Point2D point2d = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.gis.Point3D point3d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.gis.MultiPoint2D multi_point2d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_point2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.gis.MultiPoint3D multi_point3d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_point3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.gis.GIS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.gis.GIS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GIS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.gis.GIS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.gis.Point2D point2d = 1;
  if (this->has_point2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::point2d(this), output);
  }

  // .claros.common.gis.Point3D point3d = 2;
  if (this->has_point3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::point3d(this), output);
  }

  // .claros.common.gis.MultiPoint2D multi_point2d = 3;
  if (this->has_multi_point2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::multi_point2d(this), output);
  }

  // .claros.common.gis.MultiPoint3D multi_point3d = 4;
  if (this->has_multi_point3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::multi_point3d(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.gis.GIS)
}

::google::protobuf::uint8* GIS::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.gis.GIS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.gis.Point2D point2d = 1;
  if (this->has_point2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::point2d(this), target);
  }

  // .claros.common.gis.Point3D point3d = 2;
  if (this->has_point3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::point3d(this), target);
  }

  // .claros.common.gis.MultiPoint2D multi_point2d = 3;
  if (this->has_multi_point2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::multi_point2d(this), target);
  }

  // .claros.common.gis.MultiPoint3D multi_point3d = 4;
  if (this->has_multi_point3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::multi_point3d(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.gis.GIS)
  return target;
}

size_t GIS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.gis.GIS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .claros.common.gis.Point2D point2d = 1;
  if (this->has_point2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point2d_);
  }

  // .claros.common.gis.Point3D point3d = 2;
  if (this->has_point3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point3d_);
  }

  // .claros.common.gis.MultiPoint2D multi_point2d = 3;
  if (this->has_multi_point2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *multi_point2d_);
  }

  // .claros.common.gis.MultiPoint3D multi_point3d = 4;
  if (this->has_multi_point3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *multi_point3d_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GIS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.gis.GIS)
  GOOGLE_DCHECK_NE(&from, this);
  const GIS* source =
      ::google::protobuf::DynamicCastToGenerated<GIS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.gis.GIS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.gis.GIS)
    MergeFrom(*source);
  }
}

void GIS::MergeFrom(const GIS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.gis.GIS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point2d()) {
    mutable_point2d()->::claros::common::gis::Point2D::MergeFrom(from.point2d());
  }
  if (from.has_point3d()) {
    mutable_point3d()->::claros::common::gis::Point3D::MergeFrom(from.point3d());
  }
  if (from.has_multi_point2d()) {
    mutable_multi_point2d()->::claros::common::gis::MultiPoint2D::MergeFrom(from.multi_point2d());
  }
  if (from.has_multi_point3d()) {
    mutable_multi_point3d()->::claros::common::gis::MultiPoint3D::MergeFrom(from.multi_point3d());
  }
}

void GIS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.gis.GIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GIS::CopyFrom(const GIS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.gis.GIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GIS::IsInitialized() const {
  return true;
}

void GIS::Swap(GIS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GIS::InternalSwap(GIS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point2d_, other->point2d_);
  swap(point3d_, other->point3d_);
  swap(multi_point2d_, other->multi_point2d_);
  swap(multi_point3d_, other->multi_point3d_);
}

::google::protobuf::Metadata GIS::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fgis_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fgis_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gis
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::gis::GIS* Arena::CreateMaybeMessage< ::claros::common::gis::GIS >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::gis::GIS >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
