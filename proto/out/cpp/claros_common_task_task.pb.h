// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_task.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5ftask_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5ftask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_task_definition.pb.h"
#include "claros_common_task_data.pb.h"
#include "claros_common_core_auditevent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5ftask_5ftask_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5ftask_5ftask_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5ftask_5ftask_2eproto();
namespace claros {
namespace common {
namespace task {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace task
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::task::Task* Arena::CreateMaybeMessage<::claros::common::task::Task>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace task {

// ===================================================================

class Task :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.task.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(Task&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Task* other);
  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string assignee = 4;
  void clear_assignee();
  static const int kAssigneeFieldNumber = 4;
  const ::std::string& assignee() const;
  void set_assignee(const ::std::string& value);
  #if LANG_CXX11
  void set_assignee(::std::string&& value);
  #endif
  void set_assignee(const char* value);
  void set_assignee(const char* value, size_t size);
  ::std::string* mutable_assignee();
  ::std::string* release_assignee();
  void set_allocated_assignee(::std::string* assignee);

  // string reporter = 5;
  void clear_reporter();
  static const int kReporterFieldNumber = 5;
  const ::std::string& reporter() const;
  void set_reporter(const ::std::string& value);
  #if LANG_CXX11
  void set_reporter(::std::string&& value);
  #endif
  void set_reporter(const char* value);
  void set_reporter(const char* value, size_t size);
  ::std::string* mutable_reporter();
  ::std::string* release_reporter();
  void set_allocated_reporter(::std::string* reporter);

  // string instrumentId = 7;
  void clear_instrumentid();
  static const int kInstrumentIdFieldNumber = 7;
  const ::std::string& instrumentid() const;
  void set_instrumentid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentid(::std::string&& value);
  #endif
  void set_instrumentid(const char* value);
  void set_instrumentid(const char* value, size_t size);
  ::std::string* mutable_instrumentid();
  ::std::string* release_instrumentid();
  void set_allocated_instrumentid(::std::string* instrumentid);

  // .claros.common.task.TaskDefinition taskDefinition = 8;
  bool has_taskdefinition() const;
  void clear_taskdefinition();
  static const int kTaskDefinitionFieldNumber = 8;
  const ::claros::common::task::TaskDefinition& taskdefinition() const;
  ::claros::common::task::TaskDefinition* release_taskdefinition();
  ::claros::common::task::TaskDefinition* mutable_taskdefinition();
  void set_allocated_taskdefinition(::claros::common::task::TaskDefinition* taskdefinition);

  // .claros.common.task.TaskData taskdata = 9;
  bool has_taskdata() const;
  void clear_taskdata();
  static const int kTaskdataFieldNumber = 9;
  const ::claros::common::task::TaskData& taskdata() const;
  ::claros::common::task::TaskData* release_taskdata();
  ::claros::common::task::TaskData* mutable_taskdata();
  void set_allocated_taskdata(::claros::common::task::TaskData* taskdata);

  // .claros.common.core.AuditEvent auditEvent = 10;
  bool has_auditevent() const;
  void clear_auditevent();
  static const int kAuditEventFieldNumber = 10;
  const ::claros::common::core::AuditEvent& auditevent() const;
  ::claros::common::core::AuditEvent* release_auditevent();
  ::claros::common::core::AuditEvent* mutable_auditevent();
  void set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent);

  // uint32 priority = 6;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.common.task.Task)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr assignee_;
  ::google::protobuf::internal::ArenaStringPtr reporter_;
  ::google::protobuf::internal::ArenaStringPtr instrumentid_;
  ::claros::common::task::TaskDefinition* taskdefinition_;
  ::claros::common::task::TaskData* taskdata_;
  ::claros::common::core::AuditEvent* auditevent_;
  ::google::protobuf::uint32 priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5ftask_5ftask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// string id = 1;
inline void Task::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.id)
  return id_.GetNoArena();
}
inline void Task::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.id)
}
#if LANG_CXX11
inline void Task::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.id)
}
#endif
inline void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.id)
}
inline void Task::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.id)
}
inline ::std::string* Task::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.id)
}

// string name = 2;
inline void Task::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.name)
  return name_.GetNoArena();
}
inline void Task::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.name)
}
#if LANG_CXX11
inline void Task::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.name)
}
#endif
inline void Task::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.name)
}
inline void Task::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.name)
}
inline ::std::string* Task::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.name)
}

// string description = 3;
inline void Task::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.description)
  return description_.GetNoArena();
}
inline void Task::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.description)
}
#if LANG_CXX11
inline void Task::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.description)
}
#endif
inline void Task::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.description)
}
inline void Task::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.description)
}
inline ::std::string* Task::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.description)
}

// string assignee = 4;
inline void Task::clear_assignee() {
  assignee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::assignee() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.assignee)
  return assignee_.GetNoArena();
}
inline void Task::set_assignee(const ::std::string& value) {
  
  assignee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.assignee)
}
#if LANG_CXX11
inline void Task::set_assignee(::std::string&& value) {
  
  assignee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.assignee)
}
#endif
inline void Task::set_assignee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assignee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.assignee)
}
inline void Task::set_assignee(const char* value, size_t size) {
  
  assignee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.assignee)
}
inline ::std::string* Task::mutable_assignee() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.assignee)
  return assignee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_assignee() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.assignee)
  
  return assignee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_assignee(::std::string* assignee) {
  if (assignee != nullptr) {
    
  } else {
    
  }
  assignee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assignee);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.assignee)
}

// string reporter = 5;
inline void Task::clear_reporter() {
  reporter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::reporter() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.reporter)
  return reporter_.GetNoArena();
}
inline void Task::set_reporter(const ::std::string& value) {
  
  reporter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.reporter)
}
#if LANG_CXX11
inline void Task::set_reporter(::std::string&& value) {
  
  reporter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.reporter)
}
#endif
inline void Task::set_reporter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reporter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.reporter)
}
inline void Task::set_reporter(const char* value, size_t size) {
  
  reporter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.reporter)
}
inline ::std::string* Task::mutable_reporter() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.reporter)
  return reporter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_reporter() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.reporter)
  
  return reporter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_reporter(::std::string* reporter) {
  if (reporter != nullptr) {
    
  } else {
    
  }
  reporter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reporter);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.reporter)
}

// uint32 priority = 6;
inline void Task::clear_priority() {
  priority_ = 0u;
}
inline ::google::protobuf::uint32 Task::priority() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.priority)
  return priority_;
}
inline void Task::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:claros.common.task.Task.priority)
}

// string instrumentId = 7;
inline void Task::clear_instrumentid() {
  instrumentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Task::instrumentid() const {
  // @@protoc_insertion_point(field_get:claros.common.task.Task.instrumentId)
  return instrumentid_.GetNoArena();
}
inline void Task::set_instrumentid(const ::std::string& value) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.task.Task.instrumentId)
}
#if LANG_CXX11
inline void Task::set_instrumentid(::std::string&& value) {
  
  instrumentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.task.Task.instrumentId)
}
#endif
inline void Task::set_instrumentid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.task.Task.instrumentId)
}
inline void Task::set_instrumentid(const char* value, size_t size) {
  
  instrumentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.task.Task.instrumentId)
}
inline ::std::string* Task::mutable_instrumentid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.instrumentId)
  return instrumentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_instrumentid() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.instrumentId)
  
  return instrumentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_instrumentid(::std::string* instrumentid) {
  if (instrumentid != nullptr) {
    
  } else {
    
  }
  instrumentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.instrumentId)
}

// .claros.common.task.TaskDefinition taskDefinition = 8;
inline bool Task::has_taskdefinition() const {
  return this != internal_default_instance() && taskdefinition_ != nullptr;
}
inline const ::claros::common::task::TaskDefinition& Task::taskdefinition() const {
  const ::claros::common::task::TaskDefinition* p = taskdefinition_;
  // @@protoc_insertion_point(field_get:claros.common.task.Task.taskDefinition)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::task::TaskDefinition*>(
      &::claros::common::task::_TaskDefinition_default_instance_);
}
inline ::claros::common::task::TaskDefinition* Task::release_taskdefinition() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.taskDefinition)
  
  ::claros::common::task::TaskDefinition* temp = taskdefinition_;
  taskdefinition_ = nullptr;
  return temp;
}
inline ::claros::common::task::TaskDefinition* Task::mutable_taskdefinition() {
  
  if (taskdefinition_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::task::TaskDefinition>(GetArenaNoVirtual());
    taskdefinition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.taskDefinition)
  return taskdefinition_;
}
inline void Task::set_allocated_taskdefinition(::claros::common::task::TaskDefinition* taskdefinition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(taskdefinition_);
  }
  if (taskdefinition) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taskdefinition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, taskdefinition, submessage_arena);
    }
    
  } else {
    
  }
  taskdefinition_ = taskdefinition;
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.taskDefinition)
}

// .claros.common.task.TaskData taskdata = 9;
inline bool Task::has_taskdata() const {
  return this != internal_default_instance() && taskdata_ != nullptr;
}
inline const ::claros::common::task::TaskData& Task::taskdata() const {
  const ::claros::common::task::TaskData* p = taskdata_;
  // @@protoc_insertion_point(field_get:claros.common.task.Task.taskdata)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::task::TaskData*>(
      &::claros::common::task::_TaskData_default_instance_);
}
inline ::claros::common::task::TaskData* Task::release_taskdata() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.taskdata)
  
  ::claros::common::task::TaskData* temp = taskdata_;
  taskdata_ = nullptr;
  return temp;
}
inline ::claros::common::task::TaskData* Task::mutable_taskdata() {
  
  if (taskdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::task::TaskData>(GetArenaNoVirtual());
    taskdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.taskdata)
  return taskdata_;
}
inline void Task::set_allocated_taskdata(::claros::common::task::TaskData* taskdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(taskdata_);
  }
  if (taskdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taskdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, taskdata, submessage_arena);
    }
    
  } else {
    
  }
  taskdata_ = taskdata;
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.taskdata)
}

// .claros.common.core.AuditEvent auditEvent = 10;
inline bool Task::has_auditevent() const {
  return this != internal_default_instance() && auditevent_ != nullptr;
}
inline const ::claros::common::core::AuditEvent& Task::auditevent() const {
  const ::claros::common::core::AuditEvent* p = auditevent_;
  // @@protoc_insertion_point(field_get:claros.common.task.Task.auditEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::AuditEvent*>(
      &::claros::common::core::_AuditEvent_default_instance_);
}
inline ::claros::common::core::AuditEvent* Task::release_auditevent() {
  // @@protoc_insertion_point(field_release:claros.common.task.Task.auditEvent)
  
  ::claros::common::core::AuditEvent* temp = auditevent_;
  auditevent_ = nullptr;
  return temp;
}
inline ::claros::common::core::AuditEvent* Task::mutable_auditevent() {
  
  if (auditevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::AuditEvent>(GetArenaNoVirtual());
    auditevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.task.Task.auditEvent)
  return auditevent_;
}
inline void Task::set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auditevent_);
  }
  if (auditevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auditevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auditevent, submessage_arena);
    }
    
  } else {
    
  }
  auditevent_ = auditevent;
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.Task.auditEvent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5ftask_2eproto
