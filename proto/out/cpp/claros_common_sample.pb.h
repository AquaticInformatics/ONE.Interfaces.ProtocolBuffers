// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_sample.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fsample_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fsample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fsample_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fsample_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fsample_2eproto();
class sample;
class sampleDefaultTypeInternal;
extern sampleDefaultTypeInternal _sample_default_instance_;
class sample_RepeatableOneOf;
class sample_RepeatableOneOfDefaultTypeInternal;
extern sample_RepeatableOneOfDefaultTypeInternal _sample_RepeatableOneOf_default_instance_;
class sample_SampleMapEntry_DoNotUse;
class sample_SampleMapEntry_DoNotUseDefaultTypeInternal;
extern sample_SampleMapEntry_DoNotUseDefaultTypeInternal _sample_SampleMapEntry_DoNotUse_default_instance_;
class sample_customMessage;
class sample_customMessageDefaultTypeInternal;
extern sample_customMessageDefaultTypeInternal _sample_customMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::sample* Arena::CreateMaybeMessage<::sample>(Arena*);
template<> ::sample_RepeatableOneOf* Arena::CreateMaybeMessage<::sample_RepeatableOneOf>(Arena*);
template<> ::sample_SampleMapEntry_DoNotUse* Arena::CreateMaybeMessage<::sample_SampleMapEntry_DoNotUse>(Arena*);
template<> ::sample_customMessage* Arena::CreateMaybeMessage<::sample_customMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum sample_enumType {
  sample_enumType_ENUM_UNKNOWN = 0,
  sample_enumType_ENUM_ONE = 1,
  sample_enumType_sample_enumType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  sample_enumType_sample_enumType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool sample_enumType_IsValid(int value);
const sample_enumType sample_enumType_enumType_MIN = sample_enumType_ENUM_UNKNOWN;
const sample_enumType sample_enumType_enumType_MAX = sample_enumType_ENUM_ONE;
const int sample_enumType_enumType_ARRAYSIZE = sample_enumType_enumType_MAX + 1;

const ::google::protobuf::EnumDescriptor* sample_enumType_descriptor();
inline const ::std::string& sample_enumType_Name(sample_enumType value) {
  return ::google::protobuf::internal::NameOfEnum(
    sample_enumType_descriptor(), value);
}
inline bool sample_enumType_Parse(
    const ::std::string& name, sample_enumType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sample_enumType>(
    sample_enumType_descriptor(), name, value);
}
// ===================================================================

class sample_SampleMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<sample_SampleMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<sample_SampleMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  sample_SampleMapEntry_DoNotUse();
  sample_SampleMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const sample_SampleMapEntry_DoNotUse& other);
  static const sample_SampleMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const sample_SampleMapEntry_DoNotUse*>(&_sample_SampleMapEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class sample_customMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sample.customMessage) */ {
 public:
  sample_customMessage();
  virtual ~sample_customMessage();

  sample_customMessage(const sample_customMessage& from);

  inline sample_customMessage& operator=(const sample_customMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sample_customMessage(sample_customMessage&& from) noexcept
    : sample_customMessage() {
    *this = ::std::move(from);
  }

  inline sample_customMessage& operator=(sample_customMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sample_customMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sample_customMessage* internal_default_instance() {
    return reinterpret_cast<const sample_customMessage*>(
               &_sample_customMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(sample_customMessage* other);
  friend void swap(sample_customMessage& a, sample_customMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sample_customMessage* New() const final {
    return CreateMaybeMessage<sample_customMessage>(nullptr);
  }

  sample_customMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sample_customMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sample_customMessage& from);
  void MergeFrom(const sample_customMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sample_customMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageBody = 20;
  void clear_messagebody();
  static const int kMessageBodyFieldNumber = 20;
  const ::std::string& messagebody() const;
  void set_messagebody(const ::std::string& value);
  #if LANG_CXX11
  void set_messagebody(::std::string&& value);
  #endif
  void set_messagebody(const char* value);
  void set_messagebody(const char* value, size_t size);
  ::std::string* mutable_messagebody();
  ::std::string* release_messagebody();
  void set_allocated_messagebody(::std::string* messagebody);

  // @@protoc_insertion_point(class_scope:sample.customMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messagebody_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fsample_2eproto;
};
// -------------------------------------------------------------------

class sample_RepeatableOneOf :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sample.RepeatableOneOf) */ {
 public:
  sample_RepeatableOneOf();
  virtual ~sample_RepeatableOneOf();

  sample_RepeatableOneOf(const sample_RepeatableOneOf& from);

  inline sample_RepeatableOneOf& operator=(const sample_RepeatableOneOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sample_RepeatableOneOf(sample_RepeatableOneOf&& from) noexcept
    : sample_RepeatableOneOf() {
    *this = ::std::move(from);
  }

  inline sample_RepeatableOneOf& operator=(sample_RepeatableOneOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sample_RepeatableOneOf& default_instance();

  enum RepeatableOneOfCase {
    kRepeatableOneOfString = 10,
    kRepeatableOneOfUint32 = 11,
    kRepeatableCustomMessage = 12,
    REPEATABLEONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sample_RepeatableOneOf* internal_default_instance() {
    return reinterpret_cast<const sample_RepeatableOneOf*>(
               &_sample_RepeatableOneOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(sample_RepeatableOneOf* other);
  friend void swap(sample_RepeatableOneOf& a, sample_RepeatableOneOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sample_RepeatableOneOf* New() const final {
    return CreateMaybeMessage<sample_RepeatableOneOf>(nullptr);
  }

  sample_RepeatableOneOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sample_RepeatableOneOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sample_RepeatableOneOf& from);
  void MergeFrom(const sample_RepeatableOneOf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sample_RepeatableOneOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string repeatableOneOfString = 10;
  private:
  bool has_repeatableoneofstring() const;
  public:
  void clear_repeatableoneofstring();
  static const int kRepeatableOneOfStringFieldNumber = 10;
  const ::std::string& repeatableoneofstring() const;
  void set_repeatableoneofstring(const ::std::string& value);
  #if LANG_CXX11
  void set_repeatableoneofstring(::std::string&& value);
  #endif
  void set_repeatableoneofstring(const char* value);
  void set_repeatableoneofstring(const char* value, size_t size);
  ::std::string* mutable_repeatableoneofstring();
  ::std::string* release_repeatableoneofstring();
  void set_allocated_repeatableoneofstring(::std::string* repeatableoneofstring);

  // uint32 repeatableOneOfUint32 = 11;
  private:
  bool has_repeatableoneofuint32() const;
  public:
  void clear_repeatableoneofuint32();
  static const int kRepeatableOneOfUint32FieldNumber = 11;
  ::google::protobuf::uint32 repeatableoneofuint32() const;
  void set_repeatableoneofuint32(::google::protobuf::uint32 value);

  // .sample.customMessage repeatableCustomMessage = 12;
  bool has_repeatablecustommessage() const;
  void clear_repeatablecustommessage();
  static const int kRepeatableCustomMessageFieldNumber = 12;
  const ::sample_customMessage& repeatablecustommessage() const;
  ::sample_customMessage* release_repeatablecustommessage();
  ::sample_customMessage* mutable_repeatablecustommessage();
  void set_allocated_repeatablecustommessage(::sample_customMessage* repeatablecustommessage);

  void clear_repeatableOneOf();
  RepeatableOneOfCase repeatableOneOf_case() const;
  // @@protoc_insertion_point(class_scope:sample.RepeatableOneOf)
 private:
  class HasBitSetters;
  void set_has_repeatableoneofstring();
  void set_has_repeatableoneofuint32();
  void set_has_repeatablecustommessage();

  inline bool has_repeatableOneOf() const;
  inline void clear_has_repeatableOneOf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RepeatableOneOfUnion {
    RepeatableOneOfUnion() {}
    ::google::protobuf::internal::ArenaStringPtr repeatableoneofstring_;
    ::google::protobuf::uint32 repeatableoneofuint32_;
    ::sample_customMessage* repeatablecustommessage_;
  } repeatableOneOf_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5fcommon_5fsample_2eproto;
};
// -------------------------------------------------------------------

class sample :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sample) */ {
 public:
  sample();
  virtual ~sample();

  sample(const sample& from);

  inline sample& operator=(const sample& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  sample(sample&& from) noexcept
    : sample() {
    *this = ::std::move(from);
  }

  inline sample& operator=(sample&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const sample& default_instance();

  enum OneofCase {
    kSampleString = 1,
    kSampleUint32 = 2,
    ONEOF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sample* internal_default_instance() {
    return reinterpret_cast<const sample*>(
               &_sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(sample* other);
  friend void swap(sample& a, sample& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline sample* New() const final {
    return CreateMaybeMessage<sample>(nullptr);
  }

  sample* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<sample>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const sample& from);
  void MergeFrom(const sample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sample* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef sample_customMessage customMessage;
  typedef sample_RepeatableOneOf RepeatableOneOf;

  typedef sample_enumType enumType;
  static const enumType ENUM_UNKNOWN =
    sample_enumType_ENUM_UNKNOWN;
  static const enumType ENUM_ONE =
    sample_enumType_ENUM_ONE;
  static inline bool enumType_IsValid(int value) {
    return sample_enumType_IsValid(value);
  }
  static const enumType enumType_MIN =
    sample_enumType_enumType_MIN;
  static const enumType enumType_MAX =
    sample_enumType_enumType_MAX;
  static const int enumType_ARRAYSIZE =
    sample_enumType_enumType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  enumType_descriptor() {
    return sample_enumType_descriptor();
  }
  static inline const ::std::string& enumType_Name(enumType value) {
    return sample_enumType_Name(value);
  }
  static inline bool enumType_Parse(const ::std::string& name,
      enumType* value) {
    return sample_enumType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // map<string, string> sampleMap = 3;
  int samplemap_size() const;
  void clear_samplemap();
  static const int kSampleMapFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      samplemap() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_samplemap();

  // repeated string sampleRepeatedString = 4;
  int samplerepeatedstring_size() const;
  void clear_samplerepeatedstring();
  static const int kSampleRepeatedStringFieldNumber = 4;
  const ::std::string& samplerepeatedstring(int index) const;
  ::std::string* mutable_samplerepeatedstring(int index);
  void set_samplerepeatedstring(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_samplerepeatedstring(int index, ::std::string&& value);
  #endif
  void set_samplerepeatedstring(int index, const char* value);
  void set_samplerepeatedstring(int index, const char* value, size_t size);
  ::std::string* add_samplerepeatedstring();
  void add_samplerepeatedstring(const ::std::string& value);
  #if LANG_CXX11
  void add_samplerepeatedstring(::std::string&& value);
  #endif
  void add_samplerepeatedstring(const char* value);
  void add_samplerepeatedstring(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& samplerepeatedstring() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_samplerepeatedstring();

  // repeated .sample.RepeatableOneOf repeatableOneOf = 6;
  int repeatableoneof_size() const;
  void clear_repeatableoneof();
  static const int kRepeatableOneOfFieldNumber = 6;
  ::sample_RepeatableOneOf* mutable_repeatableoneof(int index);
  ::google::protobuf::RepeatedPtrField< ::sample_RepeatableOneOf >*
      mutable_repeatableoneof();
  const ::sample_RepeatableOneOf& repeatableoneof(int index) const;
  ::sample_RepeatableOneOf* add_repeatableoneof();
  const ::google::protobuf::RepeatedPtrField< ::sample_RepeatableOneOf >&
      repeatableoneof() const;

  // .sample.enumType sampleEnumType = 5;
  void clear_sampleenumtype();
  static const int kSampleEnumTypeFieldNumber = 5;
  ::sample_enumType sampleenumtype() const;
  void set_sampleenumtype(::sample_enumType value);

  // string sampleString = 1;
  private:
  bool has_samplestring() const;
  public:
  void clear_samplestring();
  static const int kSampleStringFieldNumber = 1;
  const ::std::string& samplestring() const;
  void set_samplestring(const ::std::string& value);
  #if LANG_CXX11
  void set_samplestring(::std::string&& value);
  #endif
  void set_samplestring(const char* value);
  void set_samplestring(const char* value, size_t size);
  ::std::string* mutable_samplestring();
  ::std::string* release_samplestring();
  void set_allocated_samplestring(::std::string* samplestring);

  // uint32 sampleUint32 = 2;
  private:
  bool has_sampleuint32() const;
  public:
  void clear_sampleuint32();
  static const int kSampleUint32FieldNumber = 2;
  ::google::protobuf::uint32 sampleuint32() const;
  void set_sampleuint32(::google::protobuf::uint32 value);

  void clear_oneof();
  OneofCase oneof_case() const;
  // @@protoc_insertion_point(class_scope:sample)
 private:
  class HasBitSetters;
  void set_has_samplestring();
  void set_has_sampleuint32();

  inline bool has_oneof() const;
  inline void clear_has_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      sample_SampleMapEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > samplemap_;
  ::google::protobuf::RepeatedPtrField<::std::string> samplerepeatedstring_;
  ::google::protobuf::RepeatedPtrField< ::sample_RepeatableOneOf > repeatableoneof_;
  int sampleenumtype_;
  union OneofUnion {
    OneofUnion() {}
    ::google::protobuf::internal::ArenaStringPtr samplestring_;
    ::google::protobuf::uint32 sampleuint32_;
  } oneof_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5fcommon_5fsample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// sample_customMessage

// string messageBody = 20;
inline void sample_customMessage::clear_messagebody() {
  messagebody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& sample_customMessage::messagebody() const {
  // @@protoc_insertion_point(field_get:sample.customMessage.messageBody)
  return messagebody_.GetNoArena();
}
inline void sample_customMessage::set_messagebody(const ::std::string& value) {
  
  messagebody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample.customMessage.messageBody)
}
#if LANG_CXX11
inline void sample_customMessage::set_messagebody(::std::string&& value) {
  
  messagebody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sample.customMessage.messageBody)
}
#endif
inline void sample_customMessage::set_messagebody(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messagebody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample.customMessage.messageBody)
}
inline void sample_customMessage::set_messagebody(const char* value, size_t size) {
  
  messagebody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample.customMessage.messageBody)
}
inline ::std::string* sample_customMessage::mutable_messagebody() {
  
  // @@protoc_insertion_point(field_mutable:sample.customMessage.messageBody)
  return messagebody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sample_customMessage::release_messagebody() {
  // @@protoc_insertion_point(field_release:sample.customMessage.messageBody)
  
  return messagebody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void sample_customMessage::set_allocated_messagebody(::std::string* messagebody) {
  if (messagebody != nullptr) {
    
  } else {
    
  }
  messagebody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagebody);
  // @@protoc_insertion_point(field_set_allocated:sample.customMessage.messageBody)
}

// -------------------------------------------------------------------

// sample_RepeatableOneOf

// string repeatableOneOfString = 10;
inline bool sample_RepeatableOneOf::has_repeatableoneofstring() const {
  return repeatableOneOf_case() == kRepeatableOneOfString;
}
inline void sample_RepeatableOneOf::set_has_repeatableoneofstring() {
  _oneof_case_[0] = kRepeatableOneOfString;
}
inline void sample_RepeatableOneOf::clear_repeatableoneofstring() {
  if (has_repeatableoneofstring()) {
    repeatableOneOf_.repeatableoneofstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_repeatableOneOf();
  }
}
inline const ::std::string& sample_RepeatableOneOf::repeatableoneofstring() const {
  // @@protoc_insertion_point(field_get:sample.RepeatableOneOf.repeatableOneOfString)
  if (has_repeatableoneofstring()) {
    return repeatableOneOf_.repeatableoneofstring_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void sample_RepeatableOneOf::set_repeatableoneofstring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sample.RepeatableOneOf.repeatableOneOfString)
  if (!has_repeatableoneofstring()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  repeatableOneOf_.repeatableoneofstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample.RepeatableOneOf.repeatableOneOfString)
}
#if LANG_CXX11
inline void sample_RepeatableOneOf::set_repeatableoneofstring(::std::string&& value) {
  // @@protoc_insertion_point(field_set:sample.RepeatableOneOf.repeatableOneOfString)
  if (!has_repeatableoneofstring()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  repeatableOneOf_.repeatableoneofstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sample.RepeatableOneOf.repeatableOneOfString)
}
#endif
inline void sample_RepeatableOneOf::set_repeatableoneofstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_repeatableoneofstring()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  repeatableOneOf_.repeatableoneofstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample.RepeatableOneOf.repeatableOneOfString)
}
inline void sample_RepeatableOneOf::set_repeatableoneofstring(const char* value, size_t size) {
  if (!has_repeatableoneofstring()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  repeatableOneOf_.repeatableoneofstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample.RepeatableOneOf.repeatableOneOfString)
}
inline ::std::string* sample_RepeatableOneOf::mutable_repeatableoneofstring() {
  if (!has_repeatableoneofstring()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:sample.RepeatableOneOf.repeatableOneOfString)
  return repeatableOneOf_.repeatableoneofstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sample_RepeatableOneOf::release_repeatableoneofstring() {
  // @@protoc_insertion_point(field_release:sample.RepeatableOneOf.repeatableOneOfString)
  if (has_repeatableoneofstring()) {
    clear_has_repeatableOneOf();
    return repeatableOneOf_.repeatableoneofstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void sample_RepeatableOneOf::set_allocated_repeatableoneofstring(::std::string* repeatableoneofstring) {
  if (has_repeatableOneOf()) {
    clear_repeatableOneOf();
  }
  if (repeatableoneofstring != nullptr) {
    set_has_repeatableoneofstring();
    repeatableOneOf_.repeatableoneofstring_.UnsafeSetDefault(repeatableoneofstring);
  }
  // @@protoc_insertion_point(field_set_allocated:sample.RepeatableOneOf.repeatableOneOfString)
}

// uint32 repeatableOneOfUint32 = 11;
inline bool sample_RepeatableOneOf::has_repeatableoneofuint32() const {
  return repeatableOneOf_case() == kRepeatableOneOfUint32;
}
inline void sample_RepeatableOneOf::set_has_repeatableoneofuint32() {
  _oneof_case_[0] = kRepeatableOneOfUint32;
}
inline void sample_RepeatableOneOf::clear_repeatableoneofuint32() {
  if (has_repeatableoneofuint32()) {
    repeatableOneOf_.repeatableoneofuint32_ = 0u;
    clear_has_repeatableOneOf();
  }
}
inline ::google::protobuf::uint32 sample_RepeatableOneOf::repeatableoneofuint32() const {
  // @@protoc_insertion_point(field_get:sample.RepeatableOneOf.repeatableOneOfUint32)
  if (has_repeatableoneofuint32()) {
    return repeatableOneOf_.repeatableoneofuint32_;
  }
  return 0u;
}
inline void sample_RepeatableOneOf::set_repeatableoneofuint32(::google::protobuf::uint32 value) {
  if (!has_repeatableoneofuint32()) {
    clear_repeatableOneOf();
    set_has_repeatableoneofuint32();
  }
  repeatableOneOf_.repeatableoneofuint32_ = value;
  // @@protoc_insertion_point(field_set:sample.RepeatableOneOf.repeatableOneOfUint32)
}

// .sample.customMessage repeatableCustomMessage = 12;
inline bool sample_RepeatableOneOf::has_repeatablecustommessage() const {
  return repeatableOneOf_case() == kRepeatableCustomMessage;
}
inline void sample_RepeatableOneOf::set_has_repeatablecustommessage() {
  _oneof_case_[0] = kRepeatableCustomMessage;
}
inline void sample_RepeatableOneOf::clear_repeatablecustommessage() {
  if (has_repeatablecustommessage()) {
    delete repeatableOneOf_.repeatablecustommessage_;
    clear_has_repeatableOneOf();
  }
}
inline ::sample_customMessage* sample_RepeatableOneOf::release_repeatablecustommessage() {
  // @@protoc_insertion_point(field_release:sample.RepeatableOneOf.repeatableCustomMessage)
  if (has_repeatablecustommessage()) {
    clear_has_repeatableOneOf();
      ::sample_customMessage* temp = repeatableOneOf_.repeatablecustommessage_;
    repeatableOneOf_.repeatablecustommessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sample_customMessage& sample_RepeatableOneOf::repeatablecustommessage() const {
  // @@protoc_insertion_point(field_get:sample.RepeatableOneOf.repeatableCustomMessage)
  return has_repeatablecustommessage()
      ? *repeatableOneOf_.repeatablecustommessage_
      : *reinterpret_cast< ::sample_customMessage*>(&::_sample_customMessage_default_instance_);
}
inline ::sample_customMessage* sample_RepeatableOneOf::mutable_repeatablecustommessage() {
  if (!has_repeatablecustommessage()) {
    clear_repeatableOneOf();
    set_has_repeatablecustommessage();
    repeatableOneOf_.repeatablecustommessage_ = CreateMaybeMessage< ::sample_customMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sample.RepeatableOneOf.repeatableCustomMessage)
  return repeatableOneOf_.repeatablecustommessage_;
}

inline bool sample_RepeatableOneOf::has_repeatableOneOf() const {
  return repeatableOneOf_case() != REPEATABLEONEOF_NOT_SET;
}
inline void sample_RepeatableOneOf::clear_has_repeatableOneOf() {
  _oneof_case_[0] = REPEATABLEONEOF_NOT_SET;
}
inline sample_RepeatableOneOf::RepeatableOneOfCase sample_RepeatableOneOf::repeatableOneOf_case() const {
  return sample_RepeatableOneOf::RepeatableOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// sample

// string sampleString = 1;
inline bool sample::has_samplestring() const {
  return oneof_case() == kSampleString;
}
inline void sample::set_has_samplestring() {
  _oneof_case_[0] = kSampleString;
}
inline void sample::clear_samplestring() {
  if (has_samplestring()) {
    oneof_.samplestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof();
  }
}
inline const ::std::string& sample::samplestring() const {
  // @@protoc_insertion_point(field_get:sample.sampleString)
  if (has_samplestring()) {
    return oneof_.samplestring_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void sample::set_samplestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sample.sampleString)
  if (!has_samplestring()) {
    clear_oneof();
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_.samplestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sample.sampleString)
}
#if LANG_CXX11
inline void sample::set_samplestring(::std::string&& value) {
  // @@protoc_insertion_point(field_set:sample.sampleString)
  if (!has_samplestring()) {
    clear_oneof();
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_.samplestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sample.sampleString)
}
#endif
inline void sample::set_samplestring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_samplestring()) {
    clear_oneof();
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_.samplestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sample.sampleString)
}
inline void sample::set_samplestring(const char* value, size_t size) {
  if (!has_samplestring()) {
    clear_oneof();
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_.samplestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sample.sampleString)
}
inline ::std::string* sample::mutable_samplestring() {
  if (!has_samplestring()) {
    clear_oneof();
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:sample.sampleString)
  return oneof_.samplestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* sample::release_samplestring() {
  // @@protoc_insertion_point(field_release:sample.sampleString)
  if (has_samplestring()) {
    clear_has_oneof();
    return oneof_.samplestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void sample::set_allocated_samplestring(::std::string* samplestring) {
  if (has_oneof()) {
    clear_oneof();
  }
  if (samplestring != nullptr) {
    set_has_samplestring();
    oneof_.samplestring_.UnsafeSetDefault(samplestring);
  }
  // @@protoc_insertion_point(field_set_allocated:sample.sampleString)
}

// uint32 sampleUint32 = 2;
inline bool sample::has_sampleuint32() const {
  return oneof_case() == kSampleUint32;
}
inline void sample::set_has_sampleuint32() {
  _oneof_case_[0] = kSampleUint32;
}
inline void sample::clear_sampleuint32() {
  if (has_sampleuint32()) {
    oneof_.sampleuint32_ = 0u;
    clear_has_oneof();
  }
}
inline ::google::protobuf::uint32 sample::sampleuint32() const {
  // @@protoc_insertion_point(field_get:sample.sampleUint32)
  if (has_sampleuint32()) {
    return oneof_.sampleuint32_;
  }
  return 0u;
}
inline void sample::set_sampleuint32(::google::protobuf::uint32 value) {
  if (!has_sampleuint32()) {
    clear_oneof();
    set_has_sampleuint32();
  }
  oneof_.sampleuint32_ = value;
  // @@protoc_insertion_point(field_set:sample.sampleUint32)
}

// map<string, string> sampleMap = 3;
inline int sample::samplemap_size() const {
  return samplemap_.size();
}
inline void sample::clear_samplemap() {
  samplemap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
sample::samplemap() const {
  // @@protoc_insertion_point(field_map:sample.sampleMap)
  return samplemap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
sample::mutable_samplemap() {
  // @@protoc_insertion_point(field_mutable_map:sample.sampleMap)
  return samplemap_.MutableMap();
}

// repeated string sampleRepeatedString = 4;
inline int sample::samplerepeatedstring_size() const {
  return samplerepeatedstring_.size();
}
inline void sample::clear_samplerepeatedstring() {
  samplerepeatedstring_.Clear();
}
inline const ::std::string& sample::samplerepeatedstring(int index) const {
  // @@protoc_insertion_point(field_get:sample.sampleRepeatedString)
  return samplerepeatedstring_.Get(index);
}
inline ::std::string* sample::mutable_samplerepeatedstring(int index) {
  // @@protoc_insertion_point(field_mutable:sample.sampleRepeatedString)
  return samplerepeatedstring_.Mutable(index);
}
inline void sample::set_samplerepeatedstring(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:sample.sampleRepeatedString)
  samplerepeatedstring_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void sample::set_samplerepeatedstring(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:sample.sampleRepeatedString)
  samplerepeatedstring_.Mutable(index)->assign(std::move(value));
}
#endif
inline void sample::set_samplerepeatedstring(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  samplerepeatedstring_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sample.sampleRepeatedString)
}
inline void sample::set_samplerepeatedstring(int index, const char* value, size_t size) {
  samplerepeatedstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sample.sampleRepeatedString)
}
inline ::std::string* sample::add_samplerepeatedstring() {
  // @@protoc_insertion_point(field_add_mutable:sample.sampleRepeatedString)
  return samplerepeatedstring_.Add();
}
inline void sample::add_samplerepeatedstring(const ::std::string& value) {
  samplerepeatedstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sample.sampleRepeatedString)
}
#if LANG_CXX11
inline void sample::add_samplerepeatedstring(::std::string&& value) {
  samplerepeatedstring_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sample.sampleRepeatedString)
}
#endif
inline void sample::add_samplerepeatedstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  samplerepeatedstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sample.sampleRepeatedString)
}
inline void sample::add_samplerepeatedstring(const char* value, size_t size) {
  samplerepeatedstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sample.sampleRepeatedString)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
sample::samplerepeatedstring() const {
  // @@protoc_insertion_point(field_list:sample.sampleRepeatedString)
  return samplerepeatedstring_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
sample::mutable_samplerepeatedstring() {
  // @@protoc_insertion_point(field_mutable_list:sample.sampleRepeatedString)
  return &samplerepeatedstring_;
}

// .sample.enumType sampleEnumType = 5;
inline void sample::clear_sampleenumtype() {
  sampleenumtype_ = 0;
}
inline ::sample_enumType sample::sampleenumtype() const {
  // @@protoc_insertion_point(field_get:sample.sampleEnumType)
  return static_cast< ::sample_enumType >(sampleenumtype_);
}
inline void sample::set_sampleenumtype(::sample_enumType value) {
  
  sampleenumtype_ = value;
  // @@protoc_insertion_point(field_set:sample.sampleEnumType)
}

// repeated .sample.RepeatableOneOf repeatableOneOf = 6;
inline int sample::repeatableoneof_size() const {
  return repeatableoneof_.size();
}
inline void sample::clear_repeatableoneof() {
  repeatableoneof_.Clear();
}
inline ::sample_RepeatableOneOf* sample::mutable_repeatableoneof(int index) {
  // @@protoc_insertion_point(field_mutable:sample.repeatableOneOf)
  return repeatableoneof_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::sample_RepeatableOneOf >*
sample::mutable_repeatableoneof() {
  // @@protoc_insertion_point(field_mutable_list:sample.repeatableOneOf)
  return &repeatableoneof_;
}
inline const ::sample_RepeatableOneOf& sample::repeatableoneof(int index) const {
  // @@protoc_insertion_point(field_get:sample.repeatableOneOf)
  return repeatableoneof_.Get(index);
}
inline ::sample_RepeatableOneOf* sample::add_repeatableoneof() {
  // @@protoc_insertion_point(field_add:sample.repeatableOneOf)
  return repeatableoneof_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sample_RepeatableOneOf >&
sample::repeatableoneof() const {
  // @@protoc_insertion_point(field_list:sample.repeatableOneOf)
  return repeatableoneof_;
}

inline bool sample::has_oneof() const {
  return oneof_case() != ONEOF_NOT_SET;
}
inline void sample::clear_has_oneof() {
  _oneof_case_[0] = ONEOF_NOT_SET;
}
inline sample::OneofCase sample::oneof_case() const {
  return sample::OneofCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sample_enumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample_enumType>() {
  return ::sample_enumType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fsample_2eproto
