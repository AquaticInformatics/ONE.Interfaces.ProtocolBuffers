// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formcolumn.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformcolumn_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformcolumn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformcolumn_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fform_5fformcolumn_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fform_5fformcolumn_2eproto();
namespace claros {
namespace common {
namespace form {
class FormColumn;
class FormColumnDefaultTypeInternal;
extern FormColumnDefaultTypeInternal _FormColumn_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::form::FormColumn* Arena::CreateMaybeMessage<::claros::common::form::FormColumn>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace form {

// ===================================================================

class FormColumn :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.form.FormColumn) */ {
 public:
  FormColumn();
  virtual ~FormColumn();

  FormColumn(const FormColumn& from);

  inline FormColumn& operator=(const FormColumn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormColumn(FormColumn&& from) noexcept
    : FormColumn() {
    *this = ::std::move(from);
  }

  inline FormColumn& operator=(FormColumn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FormColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormColumn* internal_default_instance() {
    return reinterpret_cast<const FormColumn*>(
               &_FormColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FormColumn* other);
  friend void swap(FormColumn& a, FormColumn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormColumn* New() const final {
    return CreateMaybeMessage<FormColumn>(nullptr);
  }

  FormColumn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FormColumn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FormColumn& from);
  void MergeFrom(const FormColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormColumn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string formFieldIds = 2;
  int formfieldids_size() const;
  void clear_formfieldids();
  static const int kFormFieldIdsFieldNumber = 2;
  const ::std::string& formfieldids(int index) const;
  ::std::string* mutable_formfieldids(int index);
  void set_formfieldids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_formfieldids(int index, ::std::string&& value);
  #endif
  void set_formfieldids(int index, const char* value);
  void set_formfieldids(int index, const char* value, size_t size);
  ::std::string* add_formfieldids();
  void add_formfieldids(const ::std::string& value);
  #if LANG_CXX11
  void add_formfieldids(::std::string&& value);
  #endif
  void add_formfieldids(const char* value);
  void add_formfieldids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& formfieldids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_formfieldids();

  // uint32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::uint32 number() const;
  void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.common.form.FormColumn)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> formfieldids_;
  ::google::protobuf::uint32 number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fform_5fformcolumn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormColumn

// uint32 number = 1;
inline void FormColumn::clear_number() {
  number_ = 0u;
}
inline ::google::protobuf::uint32 FormColumn::number() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormColumn.number)
  return number_;
}
inline void FormColumn::set_number(::google::protobuf::uint32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:claros.common.form.FormColumn.number)
}

// repeated string formFieldIds = 2;
inline int FormColumn::formfieldids_size() const {
  return formfieldids_.size();
}
inline void FormColumn::clear_formfieldids() {
  formfieldids_.Clear();
}
inline const ::std::string& FormColumn::formfieldids(int index) const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormColumn.formFieldIds)
  return formfieldids_.Get(index);
}
inline ::std::string* FormColumn::mutable_formfieldids(int index) {
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormColumn.formFieldIds)
  return formfieldids_.Mutable(index);
}
inline void FormColumn::set_formfieldids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:claros.common.form.FormColumn.formFieldIds)
  formfieldids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void FormColumn::set_formfieldids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:claros.common.form.FormColumn.formFieldIds)
  formfieldids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void FormColumn::set_formfieldids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  formfieldids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormColumn.formFieldIds)
}
inline void FormColumn::set_formfieldids(int index, const char* value, size_t size) {
  formfieldids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormColumn.formFieldIds)
}
inline ::std::string* FormColumn::add_formfieldids() {
  // @@protoc_insertion_point(field_add_mutable:claros.common.form.FormColumn.formFieldIds)
  return formfieldids_.Add();
}
inline void FormColumn::add_formfieldids(const ::std::string& value) {
  formfieldids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:claros.common.form.FormColumn.formFieldIds)
}
#if LANG_CXX11
inline void FormColumn::add_formfieldids(::std::string&& value) {
  formfieldids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:claros.common.form.FormColumn.formFieldIds)
}
#endif
inline void FormColumn::add_formfieldids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  formfieldids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:claros.common.form.FormColumn.formFieldIds)
}
inline void FormColumn::add_formfieldids(const char* value, size_t size) {
  formfieldids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:claros.common.form.FormColumn.formFieldIds)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
FormColumn::formfieldids() const {
  // @@protoc_insertion_point(field_list:claros.common.form.FormColumn.formFieldIds)
  return formfieldids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
FormColumn::mutable_formfieldids() {
  // @@protoc_insertion_point(field_mutable_list:claros.common.form.FormColumn.formFieldIds)
  return &formfieldids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace form
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformcolumn_2eproto
