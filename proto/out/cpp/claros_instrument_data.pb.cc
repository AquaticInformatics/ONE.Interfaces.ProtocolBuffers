// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_data.proto

#include "claros_instrument_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fevent_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_InstrumentMeasurement_claros_5finstrument_5fmeasurement_2eproto;
namespace claros {
namespace instrument {
class InstrumentData_SettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentData_SettingsEntry_DoNotUse> _instance;
} _InstrumentData_SettingsEntry_DoNotUse_default_instance_;
class InstrumentData_StatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentData_StatesEntry_DoNotUse> _instance;
} _InstrumentData_StatesEntry_DoNotUse_default_instance_;
class InstrumentDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentData> _instance;
} _InstrumentData_default_instance_;
}  // namespace instrument
}  // namespace claros
static void InitDefaultsInstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_InstrumentData_SettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse();
  }
  ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto}, {}};

static void InitDefaultsInstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_InstrumentData_StatesEntry_DoNotUse_default_instance_;
    new (ptr) ::claros::instrument::InstrumentData_StatesEntry_DoNotUse();
  }
  ::claros::instrument::InstrumentData_StatesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto}, {}};

static void InitDefaultsInstrumentData_claros_5finstrument_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_InstrumentData_default_instance_;
    new (ptr) ::claros::instrument::InstrumentData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::InstrumentData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsInstrumentData_claros_5finstrument_5fdata_2eproto}, {
      &scc_info_InstrumentEvent_claros_5finstrument_5fevent_2eproto.base,
      &scc_info_InstrumentMeasurement_claros_5finstrument_5fmeasurement_2eproto.base,
      &scc_info_InstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto.base,
      &scc_info_InstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto.base,
      &scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base,}};

void InitDefaults_claros_5finstrument_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentData_SettingsEntry_DoNotUse_claros_5finstrument_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentData_StatesEntry_DoNotUse_claros_5finstrument_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5finstrument_5fdata_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5finstrument_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5finstrument_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5finstrument_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_SettingsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_StatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_StatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_StatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData_StatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, tenantid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, fusionid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, events_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, measurements_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, settings_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, states_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentData, instrumentdatadatetime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::claros::instrument::InstrumentData_SettingsEntry_DoNotUse)},
  { 9, 16, sizeof(::claros::instrument::InstrumentData_StatesEntry_DoNotUse)},
  { 18, -1, sizeof(::claros::instrument::InstrumentData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_InstrumentData_SettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_InstrumentData_StatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_InstrumentData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5finstrument_5fdata_2eproto = {
  {}, AddDescriptors_claros_5finstrument_5fdata_2eproto, "claros_instrument_data.proto", schemas,
  file_default_instances, TableStruct_claros_5finstrument_5fdata_2eproto::offsets,
  file_level_metadata_claros_5finstrument_5fdata_2eproto, 3, file_level_enum_descriptors_claros_5finstrument_5fdata_2eproto, file_level_service_descriptors_claros_5finstrument_5fdata_2eproto,
};

const char descriptor_table_protodef_claros_5finstrument_5fdata_2eproto[] =
  "\n\034claros_instrument_data.proto\022\021claros.i"
  "nstrument\032\035claros_instrument_event.proto"
  "\032#claros_instrument_measurement.proto\032\034c"
  "laros_common_datetime.proto\"\303\003\n\016Instrume"
  "ntData\022\020\n\010tenantId\030\001 \001(\t\022\020\n\010fusionId\030\002 \001"
  "(\t\0222\n\006events\030\003 \001(\0132\".claros.instrument.I"
  "nstrumentEvent\022>\n\014measurements\030\004 \003(\0132(.c"
  "laros.instrument.InstrumentMeasurement\022A"
  "\n\010settings\030\005 \003(\0132/.claros.instrument.Ins"
  "trumentData.SettingsEntry\022=\n\006states\030\006 \003("
  "\0132-.claros.instrument.InstrumentData.Sta"
  "tesEntry\0227\n\026instrumentDataDateTime\030\007 \001(\013"
  "2\027.claros.common.DateTime\032/\n\rSettingsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032-\n\013St"
  "atesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5finstrument_5fdata_2eproto = {
  false, InitDefaults_claros_5finstrument_5fdata_2eproto, 
  descriptor_table_protodef_claros_5finstrument_5fdata_2eproto,
  "claros_instrument_data.proto", &assign_descriptors_table_claros_5finstrument_5fdata_2eproto, 609,
};

void AddDescriptors_claros_5finstrument_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_claros_5finstrument_5fevent_2eproto,
    ::AddDescriptors_claros_5finstrument_5fmeasurement_2eproto,
    ::AddDescriptors_claros_5fcommon_5fdatetime_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5finstrument_5fdata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5finstrument_5fdata_2eproto = []() { AddDescriptors_claros_5finstrument_5fdata_2eproto(); return true; }();
namespace claros {
namespace instrument {

// ===================================================================

InstrumentData_SettingsEntry_DoNotUse::InstrumentData_SettingsEntry_DoNotUse() {}
InstrumentData_SettingsEntry_DoNotUse::InstrumentData_SettingsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InstrumentData_SettingsEntry_DoNotUse::MergeFrom(const InstrumentData_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata InstrumentData_SettingsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fdata_2eproto[0];
}
void InstrumentData_SettingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentData_SettingsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      InstrumentData_SettingsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.instrument.InstrumentData.SettingsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.instrument.InstrumentData.SettingsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

InstrumentData_StatesEntry_DoNotUse::InstrumentData_StatesEntry_DoNotUse() {}
InstrumentData_StatesEntry_DoNotUse::InstrumentData_StatesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void InstrumentData_StatesEntry_DoNotUse::MergeFrom(const InstrumentData_StatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata InstrumentData_StatesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fdata_2eproto[1];
}
void InstrumentData_StatesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentData_StatesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      InstrumentData_StatesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.instrument.InstrumentData.StatesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.instrument.InstrumentData.StatesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void InstrumentData::InitAsDefaultInstance() {
  ::claros::instrument::_InstrumentData_default_instance_._instance.get_mutable()->events_ = const_cast< ::claros::instrument::InstrumentEvent*>(
      ::claros::instrument::InstrumentEvent::internal_default_instance());
  ::claros::instrument::_InstrumentData_default_instance_._instance.get_mutable()->instrumentdatadatetime_ = const_cast< ::claros::common::DateTime*>(
      ::claros::common::DateTime::internal_default_instance());
}
class InstrumentData::HasBitSetters {
 public:
  static const ::claros::instrument::InstrumentEvent& events(const InstrumentData* msg);
  static const ::claros::common::DateTime& instrumentdatadatetime(const InstrumentData* msg);
};

const ::claros::instrument::InstrumentEvent&
InstrumentData::HasBitSetters::events(const InstrumentData* msg) {
  return *msg->events_;
}
const ::claros::common::DateTime&
InstrumentData::HasBitSetters::instrumentdatadatetime(const InstrumentData* msg) {
  return *msg->instrumentdatadatetime_;
}
void InstrumentData::clear_events() {
  if (GetArenaNoVirtual() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
}
void InstrumentData::clear_measurements() {
  measurements_.Clear();
}
void InstrumentData::clear_instrumentdatadatetime() {
  if (GetArenaNoVirtual() == nullptr && instrumentdatadatetime_ != nullptr) {
    delete instrumentdatadatetime_;
  }
  instrumentdatadatetime_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentData::kTenantIdFieldNumber;
const int InstrumentData::kFusionIdFieldNumber;
const int InstrumentData::kEventsFieldNumber;
const int InstrumentData::kMeasurementsFieldNumber;
const int InstrumentData::kSettingsFieldNumber;
const int InstrumentData::kStatesFieldNumber;
const int InstrumentData::kInstrumentDataDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentData::InstrumentData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.InstrumentData)
}
InstrumentData::InstrumentData(const InstrumentData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      measurements_(from.measurements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  settings_.MergeFrom(from.settings_);
  states_.MergeFrom(from.states_);
  tenantid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tenantid().size() > 0) {
    tenantid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tenantid_);
  }
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fusionid().size() > 0) {
    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  if (from.has_events()) {
    events_ = new ::claros::instrument::InstrumentEvent(*from.events_);
  } else {
    events_ = nullptr;
  }
  if (from.has_instrumentdatadatetime()) {
    instrumentdatadatetime_ = new ::claros::common::DateTime(*from.instrumentdatadatetime_);
  } else {
    instrumentdatadatetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:claros.instrument.InstrumentData)
}

void InstrumentData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto.base);
  tenantid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&events_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instrumentdatadatetime_) -
      reinterpret_cast<char*>(&events_)) + sizeof(instrumentdatadatetime_));
}

InstrumentData::~InstrumentData() {
  // @@protoc_insertion_point(destructor:claros.instrument.InstrumentData)
  SharedDtor();
}

void InstrumentData::SharedDtor() {
  tenantid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete events_;
  if (this != internal_default_instance()) delete instrumentdatadatetime_;
}

void InstrumentData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentData& InstrumentData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InstrumentData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.InstrumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurements_.Clear();
  settings_.Clear();
  states_.Clear();
  tenantid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && instrumentdatadatetime_ != nullptr) {
    delete instrumentdatadatetime_;
  }
  instrumentdatadatetime_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstrumentData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string tenantId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentData.tenantId");
        object = msg->mutable_tenantid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string fusionId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentData.fusionId");
        object = msg->mutable_fusionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.instrument.InstrumentEvent events = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::InstrumentEvent::_InternalParse;
        object = msg->mutable_events();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .claros.instrument.InstrumentMeasurement measurements = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::InstrumentMeasurement::_InternalParse;
          object = msg->add_measurements();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // map<string, string> settings = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->settings_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // map<string, string> states = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::claros::instrument::InstrumentData_StatesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->states_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // .claros.common.DateTime instrumentDataDateTime = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::DateTime::_InternalParse;
        object = msg->mutable_instrumentdatadatetime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.InstrumentData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tenantId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tenantid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tenantid().data(), static_cast<int>(this->tenantid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.tenantId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fusionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fusionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fusionid().data(), static_cast<int>(this->fusionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.fusionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.InstrumentEvent events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.instrument.InstrumentMeasurement measurements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> settings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          InstrumentData_SettingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              InstrumentData_SettingsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&settings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.SettingsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.SettingsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> states = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          InstrumentData_StatesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              InstrumentData_StatesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&states_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.StatesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentData.StatesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.DateTime instrumentDataDateTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instrumentdatadatetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.InstrumentData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.InstrumentData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.InstrumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tenantId = 1;
  if (this->tenantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tenantid().data(), static_cast<int>(this->tenantid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentData.tenantId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tenantid(), output);
  }

  // string fusionId = 2;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentData.fusionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fusionid(), output);
  }

  // .claros.instrument.InstrumentEvent events = 3;
  if (this->has_events()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::events(this), output);
  }

  // repeated .claros.instrument.InstrumentMeasurement measurements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->measurements(static_cast<int>(i)),
      output);
  }

  // map<string, string> settings = 5;
  if (!this->settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.SettingsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.SettingsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->settings().begin();
          it != this->settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InstrumentData_SettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InstrumentData_SettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->settings().begin();
          it != this->settings().end(); ++it) {
        entry.reset(settings_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> states = 6;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.StatesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.StatesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InstrumentData_StatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(6, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InstrumentData_StatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(6, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .claros.common.DateTime instrumentDataDateTime = 7;
  if (this->has_instrumentdatadatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::instrumentdatadatetime(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.InstrumentData)
}

::google::protobuf::uint8* InstrumentData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.InstrumentData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tenantId = 1;
  if (this->tenantid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tenantid().data(), static_cast<int>(this->tenantid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentData.tenantId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tenantid(), target);
  }

  // string fusionId = 2;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentData.fusionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fusionid(), target);
  }

  // .claros.instrument.InstrumentEvent events = 3;
  if (this->has_events()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::events(this), target);
  }

  // repeated .claros.instrument.InstrumentMeasurement measurements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->measurements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->measurements(static_cast<int>(i)), target);
  }

  // map<string, string> settings = 5;
  if (!this->settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.SettingsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.SettingsEntry.value");
      }
    };

    if (false &&
        this->settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->settings().begin();
          it != this->settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InstrumentData_SettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InstrumentData_SettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->settings().begin();
          it != this->settings().end(); ++it) {
        entry.reset(settings_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> states = 6;
  if (!this->states().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.StatesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.instrument.InstrumentData.StatesEntry.value");
      }
    };

    if (false &&
        this->states().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->states().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<InstrumentData_StatesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(states_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(6, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<InstrumentData_StatesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->states().begin();
          it != this->states().end(); ++it) {
        entry.reset(states_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(6, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .claros.common.DateTime instrumentDataDateTime = 7;
  if (this->has_instrumentdatadatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::instrumentdatadatetime(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.InstrumentData)
  return target;
}

size_t InstrumentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.InstrumentData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.instrument.InstrumentMeasurement measurements = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->measurements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->measurements(static_cast<int>(i)));
    }
  }

  // map<string, string> settings = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->settings_size());
  {
    ::std::unique_ptr<InstrumentData_SettingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->settings().begin();
        it != this->settings().end(); ++it) {
      entry.reset(settings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> states = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->states_size());
  {
    ::std::unique_ptr<InstrumentData_StatesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->states().begin();
        it != this->states().end(); ++it) {
      entry.reset(states_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string tenantId = 1;
  if (this->tenantid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tenantid());
  }

  // string fusionId = 2;
  if (this->fusionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fusionid());
  }

  // .claros.instrument.InstrumentEvent events = 3;
  if (this->has_events()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *events_);
  }

  // .claros.common.DateTime instrumentDataDateTime = 7;
  if (this->has_instrumentdatadatetime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *instrumentdatadatetime_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.InstrumentData)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentData* source =
      ::google::protobuf::DynamicCastToGenerated<InstrumentData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.InstrumentData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.InstrumentData)
    MergeFrom(*source);
  }
}

void InstrumentData::MergeFrom(const InstrumentData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.InstrumentData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  measurements_.MergeFrom(from.measurements_);
  settings_.MergeFrom(from.settings_);
  states_.MergeFrom(from.states_);
  if (from.tenantid().size() > 0) {

    tenantid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tenantid_);
  }
  if (from.fusionid().size() > 0) {

    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  if (from.has_events()) {
    mutable_events()->::claros::instrument::InstrumentEvent::MergeFrom(from.events());
  }
  if (from.has_instrumentdatadatetime()) {
    mutable_instrumentdatadatetime()->::claros::common::DateTime::MergeFrom(from.instrumentdatadatetime());
  }
}

void InstrumentData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.InstrumentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentData::CopyFrom(const InstrumentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.InstrumentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentData::IsInitialized() const {
  return true;
}

void InstrumentData::Swap(InstrumentData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentData::InternalSwap(InstrumentData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&measurements_)->InternalSwap(CastToBase(&other->measurements_));
  settings_.Swap(&other->settings_);
  states_.Swap(&other->states_);
  tenantid_.Swap(&other->tenantid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fusionid_.Swap(&other->fusionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(events_, other->events_);
  swap(instrumentdatadatetime_, other->instrumentdatadatetime_);
}

::google::protobuf::Metadata InstrumentData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::InstrumentData_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::instrument::InstrumentData_StatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::claros::instrument::InstrumentData_StatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::InstrumentData_StatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::instrument::InstrumentData* Arena::CreateMaybeMessage< ::claros::instrument::InstrumentData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::InstrumentData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
