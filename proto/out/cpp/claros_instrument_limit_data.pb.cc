// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_limit_data.proto

#include "claros_instrument_limit_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5flimit_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto;
namespace claros {
namespace instrument {
class LimitData_LimitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LimitData_Limit> _instance;
} _LimitData_Limit_default_instance_;
class LimitDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LimitData> _instance;
} _LimitData_default_instance_;
}  // namespace instrument
}  // namespace claros
static void InitDefaultsLimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_LimitData_Limit_default_instance_;
    new (ptr) ::claros::instrument::LimitData_Limit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::LimitData_Limit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto}, {}};

static void InitDefaultsLimitData_claros_5finstrument_5flimit_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_LimitData_default_instance_;
    new (ptr) ::claros::instrument::LimitData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::LimitData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LimitData_claros_5finstrument_5flimit_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLimitData_claros_5finstrument_5flimit_5fdata_2eproto}, {
      &scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto.base,}};

void InitDefaults_claros_5finstrument_5flimit_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LimitData_claros_5finstrument_5flimit_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5finstrument_5flimit_5fdata_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5finstrument_5flimit_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5finstrument_5flimit_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5finstrument_5flimit_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData_Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData_Limit, severity_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData_Limit, polarity_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData_Limit, i18nkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::LimitData, limits_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::instrument::LimitData_Limit)},
  { 8, -1, sizeof(::claros::instrument::LimitData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_LimitData_Limit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_LimitData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5finstrument_5flimit_5fdata_2eproto = {
  {}, AddDescriptors_claros_5finstrument_5flimit_5fdata_2eproto, "claros_instrument_limit_data.proto", schemas,
  file_default_instances, TableStruct_claros_5finstrument_5flimit_5fdata_2eproto::offsets,
  file_level_metadata_claros_5finstrument_5flimit_5fdata_2eproto, 2, file_level_enum_descriptors_claros_5finstrument_5flimit_5fdata_2eproto, file_level_service_descriptors_claros_5finstrument_5flimit_5fdata_2eproto,
};

const char descriptor_table_protodef_claros_5finstrument_5flimit_5fdata_2eproto[] =
  "\n\"claros_instrument_limit_data.proto\022\021cl"
  "aros.instrument\"}\n\tLimitData\0222\n\006limits\030\001"
  " \003(\0132\".claros.instrument.LimitData.Limit"
  "\032<\n\005Limit\022\020\n\010severity\030\001 \001(\r\022\020\n\010polarity\030"
  "\002 \001(\r\022\017\n\007i18nKey\030\003 \001(\tb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5finstrument_5flimit_5fdata_2eproto = {
  false, InitDefaults_claros_5finstrument_5flimit_5fdata_2eproto, 
  descriptor_table_protodef_claros_5finstrument_5flimit_5fdata_2eproto,
  "claros_instrument_limit_data.proto", &assign_descriptors_table_claros_5finstrument_5flimit_5fdata_2eproto, 190,
};

void AddDescriptors_claros_5finstrument_5flimit_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5finstrument_5flimit_5fdata_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5finstrument_5flimit_5fdata_2eproto = []() { AddDescriptors_claros_5finstrument_5flimit_5fdata_2eproto(); return true; }();
namespace claros {
namespace instrument {

// ===================================================================

void LimitData_Limit::InitAsDefaultInstance() {
}
class LimitData_Limit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitData_Limit::kSeverityFieldNumber;
const int LimitData_Limit::kPolarityFieldNumber;
const int LimitData_Limit::kI18NKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitData_Limit::LimitData_Limit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.LimitData.Limit)
}
LimitData_Limit::LimitData_Limit(const LimitData_Limit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  i18nkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.i18nkey().size() > 0) {
    i18nkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.i18nkey_);
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&polarity_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(polarity_));
  // @@protoc_insertion_point(copy_constructor:claros.instrument.LimitData.Limit)
}

void LimitData_Limit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto.base);
  i18nkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polarity_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(polarity_));
}

LimitData_Limit::~LimitData_Limit() {
  // @@protoc_insertion_point(destructor:claros.instrument.LimitData.Limit)
  SharedDtor();
}

void LimitData_Limit::SharedDtor() {
  i18nkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LimitData_Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitData_Limit& LimitData_Limit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LimitData_Limit_claros_5finstrument_5flimit_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LimitData_Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.LimitData.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i18nkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polarity_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(polarity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LimitData_Limit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LimitData_Limit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 severity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_severity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 polarity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_polarity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string i18nKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.LimitData.Limit.i18nKey");
        object = msg->mutable_i18nkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LimitData_Limit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.LimitData.Limit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 severity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 polarity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &polarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string i18nKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_i18nkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.LimitData.Limit.i18nKey"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.LimitData.Limit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.LimitData.Limit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LimitData_Limit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.LimitData.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 severity = 1;
  if (this->severity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // uint32 polarity = 2;
  if (this->polarity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->polarity(), output);
  }

  // string i18nKey = 3;
  if (this->i18nkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.LimitData.Limit.i18nKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->i18nkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.LimitData.Limit)
}

::google::protobuf::uint8* LimitData_Limit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.LimitData.Limit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 severity = 1;
  if (this->severity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // uint32 polarity = 2;
  if (this->polarity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->polarity(), target);
  }

  // string i18nKey = 3;
  if (this->i18nkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->i18nkey().data(), static_cast<int>(this->i18nkey().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.LimitData.Limit.i18nKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->i18nkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.LimitData.Limit)
  return target;
}

size_t LimitData_Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.LimitData.Limit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string i18nKey = 3;
  if (this->i18nkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->i18nkey());
  }

  // uint32 severity = 1;
  if (this->severity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->severity());
  }

  // uint32 polarity = 2;
  if (this->polarity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->polarity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitData_Limit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.LimitData.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitData_Limit* source =
      ::google::protobuf::DynamicCastToGenerated<LimitData_Limit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.LimitData.Limit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.LimitData.Limit)
    MergeFrom(*source);
  }
}

void LimitData_Limit::MergeFrom(const LimitData_Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.LimitData.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.i18nkey().size() > 0) {

    i18nkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.i18nkey_);
  }
  if (from.severity() != 0) {
    set_severity(from.severity());
  }
  if (from.polarity() != 0) {
    set_polarity(from.polarity());
  }
}

void LimitData_Limit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.LimitData.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitData_Limit::CopyFrom(const LimitData_Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.LimitData.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitData_Limit::IsInitialized() const {
  return true;
}

void LimitData_Limit::Swap(LimitData_Limit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitData_Limit::InternalSwap(LimitData_Limit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  i18nkey_.Swap(&other->i18nkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(severity_, other->severity_);
  swap(polarity_, other->polarity_);
}

::google::protobuf::Metadata LimitData_Limit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5flimit_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5flimit_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LimitData::InitAsDefaultInstance() {
}
class LimitData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitData::kLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitData::LimitData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.LimitData)
}
LimitData::LimitData(const LimitData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:claros.instrument.LimitData)
}

void LimitData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LimitData_claros_5finstrument_5flimit_5fdata_2eproto.base);
}

LimitData::~LimitData() {
  // @@protoc_insertion_point(destructor:claros.instrument.LimitData)
  SharedDtor();
}

void LimitData::SharedDtor() {
}

void LimitData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LimitData& LimitData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LimitData_claros_5finstrument_5flimit_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LimitData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.LimitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LimitData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LimitData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .claros.instrument.LimitData.Limit limits = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::instrument::LimitData_Limit::_InternalParse;
          object = msg->add_limits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.LimitData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .claros.instrument.LimitData.Limit limits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.LimitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.LimitData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.LimitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .claros.instrument.LimitData.Limit limits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->limits(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.LimitData)
}

::google::protobuf::uint8* LimitData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.LimitData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .claros.instrument.LimitData.Limit limits = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->limits(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.LimitData)
  return target;
}

size_t LimitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.LimitData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.instrument.LimitData.Limit limits = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LimitData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.LimitData)
  GOOGLE_DCHECK_NE(&from, this);
  const LimitData* source =
      ::google::protobuf::DynamicCastToGenerated<LimitData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.LimitData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.LimitData)
    MergeFrom(*source);
  }
}

void LimitData::MergeFrom(const LimitData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.LimitData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
}

void LimitData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.LimitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitData::CopyFrom(const LimitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.LimitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitData::IsInitialized() const {
  return true;
}

void LimitData::Swap(LimitData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitData::InternalSwap(LimitData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
}

::google::protobuf::Metadata LimitData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5flimit_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5flimit_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::instrument::LimitData_Limit* Arena::CreateMaybeMessage< ::claros::instrument::LimitData_Limit >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::LimitData_Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::instrument::LimitData* Arena::CreateMaybeMessage< ::claros::instrument::LimitData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::LimitData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
