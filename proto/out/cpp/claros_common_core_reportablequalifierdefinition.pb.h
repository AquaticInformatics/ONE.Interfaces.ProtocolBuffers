// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_reportablequalifierdefinition.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_reportablequalifier_type.pb.h"
#include "claros_common_core_reportablequalifierdefinition_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto();
namespace claros {
namespace common {
namespace core {
class ReportableQualifierDefinition;
class ReportableQualifierDefinitionDefaultTypeInternal;
extern ReportableQualifierDefinitionDefaultTypeInternal _ReportableQualifierDefinition_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::core::ReportableQualifierDefinition* Arena::CreateMaybeMessage<::claros::common::core::ReportableQualifierDefinition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace core {

// ===================================================================

class ReportableQualifierDefinition :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.core.ReportableQualifierDefinition) */ {
 public:
  ReportableQualifierDefinition();
  virtual ~ReportableQualifierDefinition();

  ReportableQualifierDefinition(const ReportableQualifierDefinition& from);

  inline ReportableQualifierDefinition& operator=(const ReportableQualifierDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReportableQualifierDefinition(ReportableQualifierDefinition&& from) noexcept
    : ReportableQualifierDefinition() {
    *this = ::std::move(from);
  }

  inline ReportableQualifierDefinition& operator=(ReportableQualifierDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReportableQualifierDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportableQualifierDefinition* internal_default_instance() {
    return reinterpret_cast<const ReportableQualifierDefinition*>(
               &_ReportableQualifierDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReportableQualifierDefinition* other);
  friend void swap(ReportableQualifierDefinition& a, ReportableQualifierDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReportableQualifierDefinition* New() const final {
    return CreateMaybeMessage<ReportableQualifierDefinition>(nullptr);
  }

  ReportableQualifierDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReportableQualifierDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReportableQualifierDefinition& from);
  void MergeFrom(const ReportableQualifierDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportableQualifierDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .claros.common.core.ReportableQualifierType reportableQualifierType = 1;
  void clear_reportablequalifiertype();
  static const int kReportableQualifierTypeFieldNumber = 1;
  ::claros::common::core::ReportableQualifierType reportablequalifiertype() const;
  void set_reportablequalifiertype(::claros::common::core::ReportableQualifierType value);

  // .claros.common.core.ReportableQualifierDefinitionType reportableQualifierDefinitionType = 2;
  void clear_reportablequalifierdefinitiontype();
  static const int kReportableQualifierDefinitionTypeFieldNumber = 2;
  ::claros::common::core::ReportableQualifierDefinitionType reportablequalifierdefinitiontype() const;
  void set_reportablequalifierdefinitiontype(::claros::common::core::ReportableQualifierDefinitionType value);

  // double constantValue = 3;
  void clear_constantvalue();
  static const int kConstantValueFieldNumber = 3;
  double constantvalue() const;
  void set_constantvalue(double value);

  // @@protoc_insertion_point(class_scope:claros.common.core.ReportableQualifierDefinition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reportablequalifiertype_;
  int reportablequalifierdefinitiontype_;
  double constantvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReportableQualifierDefinition

// .claros.common.core.ReportableQualifierType reportableQualifierType = 1;
inline void ReportableQualifierDefinition::clear_reportablequalifiertype() {
  reportablequalifiertype_ = 0;
}
inline ::claros::common::core::ReportableQualifierType ReportableQualifierDefinition::reportablequalifiertype() const {
  // @@protoc_insertion_point(field_get:claros.common.core.ReportableQualifierDefinition.reportableQualifierType)
  return static_cast< ::claros::common::core::ReportableQualifierType >(reportablequalifiertype_);
}
inline void ReportableQualifierDefinition::set_reportablequalifiertype(::claros::common::core::ReportableQualifierType value) {
  
  reportablequalifiertype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.ReportableQualifierDefinition.reportableQualifierType)
}

// .claros.common.core.ReportableQualifierDefinitionType reportableQualifierDefinitionType = 2;
inline void ReportableQualifierDefinition::clear_reportablequalifierdefinitiontype() {
  reportablequalifierdefinitiontype_ = 0;
}
inline ::claros::common::core::ReportableQualifierDefinitionType ReportableQualifierDefinition::reportablequalifierdefinitiontype() const {
  // @@protoc_insertion_point(field_get:claros.common.core.ReportableQualifierDefinition.reportableQualifierDefinitionType)
  return static_cast< ::claros::common::core::ReportableQualifierDefinitionType >(reportablequalifierdefinitiontype_);
}
inline void ReportableQualifierDefinition::set_reportablequalifierdefinitiontype(::claros::common::core::ReportableQualifierDefinitionType value) {
  
  reportablequalifierdefinitiontype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.ReportableQualifierDefinition.reportableQualifierDefinitionType)
}

// double constantValue = 3;
inline void ReportableQualifierDefinition::clear_constantvalue() {
  constantvalue_ = 0;
}
inline double ReportableQualifierDefinition::constantvalue() const {
  // @@protoc_insertion_point(field_get:claros.common.core.ReportableQualifierDefinition.constantValue)
  return constantvalue_;
}
inline void ReportableQualifierDefinition::set_constantvalue(double value) {
  
  constantvalue_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.ReportableQualifierDefinition.constantValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5freportablequalifierdefinition_2eproto
