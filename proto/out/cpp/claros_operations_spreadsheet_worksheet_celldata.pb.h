// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_celldata.proto

#ifndef PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto
#define PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_reportablequalifier.pb.h"
#include "claros_operations_spreadsheet_worksheet_celldata_binding.pb.h"
#include "claros_common_core_auditevent.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto();
namespace claros {
namespace operations {
namespace spreadsheet {
class CellData;
class CellDataDefaultTypeInternal;
extern CellDataDefaultTypeInternal _CellData_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::operations::spreadsheet::CellData* Arena::CreateMaybeMessage<::claros::operations::spreadsheet::CellData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

class CellData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.operations.spreadsheet.CellData) */ {
 public:
  CellData();
  virtual ~CellData();

  CellData(const CellData& from);

  inline CellData& operator=(const CellData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CellData(CellData&& from) noexcept
    : CellData() {
    *this = ::std::move(from);
  }

  inline CellData& operator=(CellData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CellData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellData* internal_default_instance() {
    return reinterpret_cast<const CellData*>(
               &_CellData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CellData* other);
  friend void swap(CellData& a, CellData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CellData* New() const final {
    return CreateMaybeMessage<CellData>(nullptr);
  }

  CellData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CellData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CellData& from);
  void MergeFrom(const CellData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
  int celldatabindings_size() const;
  void clear_celldatabindings();
  static const int kCellDataBindingsFieldNumber = 7;
  ::claros::operations::spreadsheet::CellDataBinding* mutable_celldatabindings(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::operations::spreadsheet::CellDataBinding >*
      mutable_celldatabindings();
  const ::claros::operations::spreadsheet::CellDataBinding& celldatabindings(int index) const;
  ::claros::operations::spreadsheet::CellDataBinding* add_celldatabindings();
  const ::google::protobuf::RepeatedPtrField< ::claros::operations::spreadsheet::CellDataBinding >&
      celldatabindings() const;

  // string stringValue = 2;
  void clear_stringvalue();
  static const int kStringValueFieldNumber = 2;
  const ::std::string& stringvalue() const;
  void set_stringvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_stringvalue(::std::string&& value);
  #endif
  void set_stringvalue(const char* value);
  void set_stringvalue(const char* value, size_t size);
  ::std::string* mutable_stringvalue();
  ::std::string* release_stringvalue();
  void set_allocated_stringvalue(::std::string* stringvalue);

  // string justification = 5;
  void clear_justification();
  static const int kJustificationFieldNumber = 5;
  const ::std::string& justification() const;
  void set_justification(const ::std::string& value);
  #if LANG_CXX11
  void set_justification(::std::string&& value);
  #endif
  void set_justification(const char* value);
  void set_justification(const char* value, size_t size);
  ::std::string* mutable_justification();
  ::std::string* release_justification();
  void set_allocated_justification(::std::string* justification);

  // .claros.common.core.ReportableQualifier reportableQualifier = 6;
  bool has_reportablequalifier() const;
  void clear_reportablequalifier();
  static const int kReportableQualifierFieldNumber = 6;
  const ::claros::common::core::ReportableQualifier& reportablequalifier() const;
  ::claros::common::core::ReportableQualifier* release_reportablequalifier();
  ::claros::common::core::ReportableQualifier* mutable_reportablequalifier();
  void set_allocated_reportablequalifier(::claros::common::core::ReportableQualifier* reportablequalifier);

  // .claros.common.core.AuditEvent auditEvent = 99;
  bool has_auditevent() const;
  void clear_auditevent();
  static const int kAuditEventFieldNumber = 99;
  const ::claros::common::core::AuditEvent& auditevent() const;
  ::claros::common::core::AuditEvent* release_auditevent();
  ::claros::common::core::AuditEvent* mutable_auditevent();
  void set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent);

  // double value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  double value() const;
  void set_value(double value);

  // bool isLocked = 3;
  void clear_islocked();
  static const int kIsLockedFieldNumber = 3;
  bool islocked() const;
  void set_islocked(bool value);

  // uint32 unitId = 4;
  void clear_unitid();
  static const int kUnitIdFieldNumber = 4;
  ::google::protobuf::uint32 unitid() const;
  void set_unitid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.operations.spreadsheet.CellData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::operations::spreadsheet::CellDataBinding > celldatabindings_;
  ::google::protobuf::internal::ArenaStringPtr stringvalue_;
  ::google::protobuf::internal::ArenaStringPtr justification_;
  ::claros::common::core::ReportableQualifier* reportablequalifier_;
  ::claros::common::core::AuditEvent* auditevent_;
  double value_;
  bool islocked_;
  ::google::protobuf::uint32 unitid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CellData

// double value = 1;
inline void CellData::clear_value() {
  value_ = 0;
}
inline double CellData::value() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.value)
  return value_;
}
inline void CellData::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.CellData.value)
}

// string stringValue = 2;
inline void CellData::clear_stringvalue() {
  stringvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CellData::stringvalue() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.stringValue)
  return stringvalue_.GetNoArena();
}
inline void CellData::set_stringvalue(const ::std::string& value) {
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.CellData.stringValue)
}
#if LANG_CXX11
inline void CellData::set_stringvalue(::std::string&& value) {
  
  stringvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.CellData.stringValue)
}
#endif
inline void CellData::set_stringvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.CellData.stringValue)
}
inline void CellData::set_stringvalue(const char* value, size_t size) {
  
  stringvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.CellData.stringValue)
}
inline ::std::string* CellData::mutable_stringvalue() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.CellData.stringValue)
  return stringvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CellData::release_stringvalue() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.CellData.stringValue)
  
  return stringvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CellData::set_allocated_stringvalue(::std::string* stringvalue) {
  if (stringvalue != nullptr) {
    
  } else {
    
  }
  stringvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stringvalue);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.CellData.stringValue)
}

// bool isLocked = 3;
inline void CellData::clear_islocked() {
  islocked_ = false;
}
inline bool CellData::islocked() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.isLocked)
  return islocked_;
}
inline void CellData::set_islocked(bool value) {
  
  islocked_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.CellData.isLocked)
}

// uint32 unitId = 4;
inline void CellData::clear_unitid() {
  unitid_ = 0u;
}
inline ::google::protobuf::uint32 CellData::unitid() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.unitId)
  return unitid_;
}
inline void CellData::set_unitid(::google::protobuf::uint32 value) {
  
  unitid_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.CellData.unitId)
}

// string justification = 5;
inline void CellData::clear_justification() {
  justification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CellData::justification() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.justification)
  return justification_.GetNoArena();
}
inline void CellData::set_justification(const ::std::string& value) {
  
  justification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.CellData.justification)
}
#if LANG_CXX11
inline void CellData::set_justification(::std::string&& value) {
  
  justification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.CellData.justification)
}
#endif
inline void CellData::set_justification(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  justification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.CellData.justification)
}
inline void CellData::set_justification(const char* value, size_t size) {
  
  justification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.CellData.justification)
}
inline ::std::string* CellData::mutable_justification() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.CellData.justification)
  return justification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CellData::release_justification() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.CellData.justification)
  
  return justification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CellData::set_allocated_justification(::std::string* justification) {
  if (justification != nullptr) {
    
  } else {
    
  }
  justification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), justification);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.CellData.justification)
}

// .claros.common.core.ReportableQualifier reportableQualifier = 6;
inline bool CellData::has_reportablequalifier() const {
  return this != internal_default_instance() && reportablequalifier_ != nullptr;
}
inline const ::claros::common::core::ReportableQualifier& CellData::reportablequalifier() const {
  const ::claros::common::core::ReportableQualifier* p = reportablequalifier_;
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.reportableQualifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ReportableQualifier*>(
      &::claros::common::core::_ReportableQualifier_default_instance_);
}
inline ::claros::common::core::ReportableQualifier* CellData::release_reportablequalifier() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.CellData.reportableQualifier)
  
  ::claros::common::core::ReportableQualifier* temp = reportablequalifier_;
  reportablequalifier_ = nullptr;
  return temp;
}
inline ::claros::common::core::ReportableQualifier* CellData::mutable_reportablequalifier() {
  
  if (reportablequalifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ReportableQualifier>(GetArenaNoVirtual());
    reportablequalifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.CellData.reportableQualifier)
  return reportablequalifier_;
}
inline void CellData::set_allocated_reportablequalifier(::claros::common::core::ReportableQualifier* reportablequalifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reportablequalifier_);
  }
  if (reportablequalifier) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reportablequalifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reportablequalifier, submessage_arena);
    }
    
  } else {
    
  }
  reportablequalifier_ = reportablequalifier;
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.CellData.reportableQualifier)
}

// repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
inline int CellData::celldatabindings_size() const {
  return celldatabindings_.size();
}
inline ::claros::operations::spreadsheet::CellDataBinding* CellData::mutable_celldatabindings(int index) {
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.CellData.cellDataBindings)
  return celldatabindings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::operations::spreadsheet::CellDataBinding >*
CellData::mutable_celldatabindings() {
  // @@protoc_insertion_point(field_mutable_list:claros.operations.spreadsheet.CellData.cellDataBindings)
  return &celldatabindings_;
}
inline const ::claros::operations::spreadsheet::CellDataBinding& CellData::celldatabindings(int index) const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.cellDataBindings)
  return celldatabindings_.Get(index);
}
inline ::claros::operations::spreadsheet::CellDataBinding* CellData::add_celldatabindings() {
  // @@protoc_insertion_point(field_add:claros.operations.spreadsheet.CellData.cellDataBindings)
  return celldatabindings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::operations::spreadsheet::CellDataBinding >&
CellData::celldatabindings() const {
  // @@protoc_insertion_point(field_list:claros.operations.spreadsheet.CellData.cellDataBindings)
  return celldatabindings_;
}

// .claros.common.core.AuditEvent auditEvent = 99;
inline bool CellData::has_auditevent() const {
  return this != internal_default_instance() && auditevent_ != nullptr;
}
inline const ::claros::common::core::AuditEvent& CellData::auditevent() const {
  const ::claros::common::core::AuditEvent* p = auditevent_;
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.CellData.auditEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::AuditEvent*>(
      &::claros::common::core::_AuditEvent_default_instance_);
}
inline ::claros::common::core::AuditEvent* CellData::release_auditevent() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.CellData.auditEvent)
  
  ::claros::common::core::AuditEvent* temp = auditevent_;
  auditevent_ = nullptr;
  return temp;
}
inline ::claros::common::core::AuditEvent* CellData::mutable_auditevent() {
  
  if (auditevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::AuditEvent>(GetArenaNoVirtual());
    auditevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.CellData.auditEvent)
  return auditevent_;
}
inline void CellData::set_allocated_auditevent(::claros::common::core::AuditEvent* auditevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auditevent_);
  }
  if (auditevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auditevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auditevent, submessage_arena);
    }
    
  } else {
    
  }
  auditevent_ = auditevent;
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.CellData.auditEvent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto
