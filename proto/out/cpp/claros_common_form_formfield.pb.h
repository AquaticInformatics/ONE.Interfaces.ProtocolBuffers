// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formfield.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_form_formdataentry_type.pb.h"
#include "claros_operations_spreadsheet_worksheet_cell.pb.h"
#include "claros_instrument_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformfield_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fform_5fformfield_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fform_5fformfield_2eproto();
namespace claros {
namespace common {
namespace form {
class FormField;
class FormFieldDefaultTypeInternal;
extern FormFieldDefaultTypeInternal _FormField_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::form::FormField* Arena::CreateMaybeMessage<::claros::common::form::FormField>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace form {

// ===================================================================

class FormField :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.form.FormField) */ {
 public:
  FormField();
  virtual ~FormField();

  FormField(const FormField& from);

  inline FormField& operator=(const FormField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormField(FormField&& from) noexcept
    : FormField() {
    *this = ::std::move(from);
  }

  inline FormField& operator=(FormField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FormField& default_instance();

  enum FormFieldDataCase {
    kCell = 6,
    FORMFIELDDATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormField* internal_default_instance() {
    return reinterpret_cast<const FormField*>(
               &_FormField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FormField* other);
  friend void swap(FormField& a, FormField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormField* New() const final {
    return CreateMaybeMessage<FormField>(nullptr);
  }

  FormField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FormField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FormField& from);
  void MergeFrom(const FormField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.instrument.InstrumentData instrumentData = 7;
  int instrumentdata_size() const;
  void clear_instrumentdata();
  static const int kInstrumentDataFieldNumber = 7;
  ::claros::instrument::InstrumentData* mutable_instrumentdata(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::InstrumentData >*
      mutable_instrumentdata();
  const ::claros::instrument::InstrumentData& instrumentdata(int index) const;
  ::claros::instrument::InstrumentData* add_instrumentdata();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::InstrumentData >&
      instrumentdata() const;

  // string guid = 1;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  #if LANG_CXX11
  void set_guid(::std::string&& value);
  #endif
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);

  // string formFieldDefinitionId = 2;
  void clear_formfielddefinitionid();
  static const int kFormFieldDefinitionIdFieldNumber = 2;
  const ::std::string& formfielddefinitionid() const;
  void set_formfielddefinitionid(const ::std::string& value);
  #if LANG_CXX11
  void set_formfielddefinitionid(::std::string&& value);
  #endif
  void set_formfielddefinitionid(const char* value);
  void set_formfielddefinitionid(const char* value, size_t size);
  ::std::string* mutable_formfielddefinitionid();
  ::std::string* release_formfielddefinitionid();
  void set_allocated_formfielddefinitionid(::std::string* formfielddefinitionid);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .claros.common.form.FormDataEntryType formDataEntryType = 3;
  void clear_formdataentrytype();
  static const int kFormDataEntryTypeFieldNumber = 3;
  ::claros::common::form::FormDataEntryType formdataentrytype() const;
  void set_formdataentrytype(::claros::common::form::FormDataEntryType value);

  // bool isDataEntryTypeLocked = 4;
  void clear_isdataentrytypelocked();
  static const int kIsDataEntryTypeLockedFieldNumber = 4;
  bool isdataentrytypelocked() const;
  void set_isdataentrytypelocked(bool value);

  // .claros.operations.spreadsheet.Cell cell = 6;
  bool has_cell() const;
  void clear_cell();
  static const int kCellFieldNumber = 6;
  const ::claros::operations::spreadsheet::Cell& cell() const;
  ::claros::operations::spreadsheet::Cell* release_cell();
  ::claros::operations::spreadsheet::Cell* mutable_cell();
  void set_allocated_cell(::claros::operations::spreadsheet::Cell* cell);

  void clear_FormFieldData();
  FormFieldDataCase FormFieldData_case() const;
  // @@protoc_insertion_point(class_scope:claros.common.form.FormField)
 private:
  class HasBitSetters;
  void set_has_cell();

  inline bool has_FormFieldData() const;
  inline void clear_has_FormFieldData();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::InstrumentData > instrumentdata_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr formfielddefinitionid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int formdataentrytype_;
  bool isdataentrytypelocked_;
  union FormFieldDataUnion {
    FormFieldDataUnion() {}
    ::claros::operations::spreadsheet::Cell* cell_;
  } FormFieldData_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5fcommon_5fform_5fformfield_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormField

// string guid = 1;
inline void FormField::clear_guid() {
  guid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormField::guid() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.guid)
  return guid_.GetNoArena();
}
inline void FormField::set_guid(const ::std::string& value) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormField.guid)
}
#if LANG_CXX11
inline void FormField::set_guid(::std::string&& value) {
  
  guid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormField.guid)
}
#endif
inline void FormField::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormField.guid)
}
inline void FormField::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormField.guid)
}
inline ::std::string* FormField::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormField.guid)
  return guid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormField::release_guid() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormField.guid)
  
  return guid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormField::set_allocated_guid(::std::string* guid) {
  if (guid != nullptr) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormField.guid)
}

// string formFieldDefinitionId = 2;
inline void FormField::clear_formfielddefinitionid() {
  formfielddefinitionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormField::formfielddefinitionid() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.formFieldDefinitionId)
  return formfielddefinitionid_.GetNoArena();
}
inline void FormField::set_formfielddefinitionid(const ::std::string& value) {
  
  formfielddefinitionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormField.formFieldDefinitionId)
}
#if LANG_CXX11
inline void FormField::set_formfielddefinitionid(::std::string&& value) {
  
  formfielddefinitionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormField.formFieldDefinitionId)
}
#endif
inline void FormField::set_formfielddefinitionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  formfielddefinitionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormField.formFieldDefinitionId)
}
inline void FormField::set_formfielddefinitionid(const char* value, size_t size) {
  
  formfielddefinitionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormField.formFieldDefinitionId)
}
inline ::std::string* FormField::mutable_formfielddefinitionid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormField.formFieldDefinitionId)
  return formfielddefinitionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormField::release_formfielddefinitionid() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormField.formFieldDefinitionId)
  
  return formfielddefinitionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormField::set_allocated_formfielddefinitionid(::std::string* formfielddefinitionid) {
  if (formfielddefinitionid != nullptr) {
    
  } else {
    
  }
  formfielddefinitionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), formfielddefinitionid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormField.formFieldDefinitionId)
}

// .claros.common.form.FormDataEntryType formDataEntryType = 3;
inline void FormField::clear_formdataentrytype() {
  formdataentrytype_ = 0;
}
inline ::claros::common::form::FormDataEntryType FormField::formdataentrytype() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.formDataEntryType)
  return static_cast< ::claros::common::form::FormDataEntryType >(formdataentrytype_);
}
inline void FormField::set_formdataentrytype(::claros::common::form::FormDataEntryType value) {
  
  formdataentrytype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.form.FormField.formDataEntryType)
}

// bool isDataEntryTypeLocked = 4;
inline void FormField::clear_isdataentrytypelocked() {
  isdataentrytypelocked_ = false;
}
inline bool FormField::isdataentrytypelocked() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.isDataEntryTypeLocked)
  return isdataentrytypelocked_;
}
inline void FormField::set_isdataentrytypelocked(bool value) {
  
  isdataentrytypelocked_ = value;
  // @@protoc_insertion_point(field_set:claros.common.form.FormField.isDataEntryTypeLocked)
}

// string name = 5;
inline void FormField::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormField::name() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.name)
  return name_.GetNoArena();
}
inline void FormField::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormField.name)
}
#if LANG_CXX11
inline void FormField::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormField.name)
}
#endif
inline void FormField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormField.name)
}
inline void FormField::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormField.name)
}
inline ::std::string* FormField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormField.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormField::release_name() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormField.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormField::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormField.name)
}

// .claros.operations.spreadsheet.Cell cell = 6;
inline bool FormField::has_cell() const {
  return FormFieldData_case() == kCell;
}
inline void FormField::set_has_cell() {
  _oneof_case_[0] = kCell;
}
inline ::claros::operations::spreadsheet::Cell* FormField::release_cell() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormField.cell)
  if (has_cell()) {
    clear_has_FormFieldData();
      ::claros::operations::spreadsheet::Cell* temp = FormFieldData_.cell_;
    FormFieldData_.cell_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::operations::spreadsheet::Cell& FormField::cell() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.cell)
  return has_cell()
      ? *FormFieldData_.cell_
      : *reinterpret_cast< ::claros::operations::spreadsheet::Cell*>(&::claros::operations::spreadsheet::_Cell_default_instance_);
}
inline ::claros::operations::spreadsheet::Cell* FormField::mutable_cell() {
  if (!has_cell()) {
    clear_FormFieldData();
    set_has_cell();
    FormFieldData_.cell_ = CreateMaybeMessage< ::claros::operations::spreadsheet::Cell >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormField.cell)
  return FormFieldData_.cell_;
}

// repeated .claros.instrument.InstrumentData instrumentData = 7;
inline int FormField::instrumentdata_size() const {
  return instrumentdata_.size();
}
inline ::claros::instrument::InstrumentData* FormField::mutable_instrumentdata(int index) {
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormField.instrumentData)
  return instrumentdata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::InstrumentData >*
FormField::mutable_instrumentdata() {
  // @@protoc_insertion_point(field_mutable_list:claros.common.form.FormField.instrumentData)
  return &instrumentdata_;
}
inline const ::claros::instrument::InstrumentData& FormField::instrumentdata(int index) const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormField.instrumentData)
  return instrumentdata_.Get(index);
}
inline ::claros::instrument::InstrumentData* FormField::add_instrumentdata() {
  // @@protoc_insertion_point(field_add:claros.common.form.FormField.instrumentData)
  return instrumentdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::InstrumentData >&
FormField::instrumentdata() const {
  // @@protoc_insertion_point(field_list:claros.common.form.FormField.instrumentData)
  return instrumentdata_;
}

inline bool FormField::has_FormFieldData() const {
  return FormFieldData_case() != FORMFIELDDATA_NOT_SET;
}
inline void FormField::clear_has_FormFieldData() {
  _oneof_case_[0] = FORMFIELDDATA_NOT_SET;
}
inline FormField::FormFieldDataCase FormField::FormFieldData_case() const {
  return FormField::FormFieldDataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace form
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformfield_2eproto
