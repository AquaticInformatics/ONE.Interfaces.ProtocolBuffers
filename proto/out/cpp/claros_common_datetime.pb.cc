// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_datetime.proto

#include "claros_common_datetime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_Date_claros_5fcommon_5fdatetime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_Time_claros_5fcommon_5fdatetime_2eproto;
namespace claros {
namespace common {
class DateTime_TimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTime_Time> _instance;
} _DateTime_Time_default_instance_;
class DateTime_DateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTime_Date> _instance;
} _DateTime_Date_default_instance_;
class DateTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DateTime> _instance;
} _DateTime_default_instance_;
}  // namespace common
}  // namespace claros
static void InitDefaultsDateTime_Time_claros_5fcommon_5fdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::_DateTime_Time_default_instance_;
    new (ptr) ::claros::common::DateTime_Time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::DateTime_Time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_Time_claros_5fcommon_5fdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTime_Time_claros_5fcommon_5fdatetime_2eproto}, {}};

static void InitDefaultsDateTime_Date_claros_5fcommon_5fdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::_DateTime_Date_default_instance_;
    new (ptr) ::claros::common::DateTime_Date();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::DateTime_Date::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DateTime_Date_claros_5fcommon_5fdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDateTime_Date_claros_5fcommon_5fdatetime_2eproto}, {}};

static void InitDefaultsDateTime_claros_5fcommon_5fdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::_DateTime_default_instance_;
    new (ptr) ::claros::common::DateTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::DateTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDateTime_claros_5fcommon_5fdatetime_2eproto}, {
      &scc_info_DateTime_Date_claros_5fcommon_5fdatetime_2eproto.base,
      &scc_info_DateTime_Time_claros_5fcommon_5fdatetime_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fdatetime_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_DateTime_Time_claros_5fcommon_5fdatetime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTime_Date_claros_5fcommon_5fdatetime_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fdatetime_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fdatetime_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fdatetime_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fdatetime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Time, hours_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Time, minutes_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Time, seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Date, year_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Date, month_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime_Date, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime, datefield_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime, timefield_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime, timezone_),
  PROTOBUF_FIELD_OFFSET(::claros::common::DateTime, ticks_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::DateTime_Time)},
  { 8, -1, sizeof(::claros::common::DateTime_Date)},
  { 16, -1, sizeof(::claros::common::DateTime)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::_DateTime_Time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::_DateTime_Date_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::_DateTime_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fdatetime_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fdatetime_2eproto, "claros_common_datetime.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fdatetime_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fdatetime_2eproto, 3, file_level_enum_descriptors_claros_5fcommon_5fdatetime_2eproto, file_level_service_descriptors_claros_5fcommon_5fdatetime_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fdatetime_2eproto[] =
  "\n\034claros_common_datetime.proto\022\rclaros.c"
  "ommon\"\370\001\n\010DateTime\022/\n\tdateField\030\001 \001(\0132\034."
  "claros.common.ClarosDateTime.Date\022/\n\ttimeField"
  "\030\002 \001(\0132\034.claros.common.ClarosDateTime.Time\022\020\n\010"
  "timeZone\030\003 \001(\005\022\r\n\005ticks\030\004 \001(\004\0327\n\004Time\022\r\n"
  "\005hours\030\001 \001(\r\022\017\n\007minutes\030\002 \001(\r\022\017\n\007seconds"
  "\030\003 \001(\r\0320\n\004Date\022\014\n\004year\030\001 \001(\r\022\r\n\005month\030\002 "
  "\001(\r\022\013\n\003day\030\003 \001(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fdatetime_2eproto = {
  false, InitDefaults_claros_5fcommon_5fdatetime_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fdatetime_2eproto,
  "claros_common_datetime.proto", &assign_descriptors_table_claros_5fcommon_5fdatetime_2eproto, 304,
};

void AddDescriptors_claros_5fcommon_5fdatetime_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fdatetime_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fdatetime_2eproto = []() { AddDescriptors_claros_5fcommon_5fdatetime_2eproto(); return true; }();
namespace claros {
namespace common {

// ===================================================================

void DateTime_Time::InitAsDefaultInstance() {
}
class DateTime_Time::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime_Time::kHoursFieldNumber;
const int DateTime_Time::kMinutesFieldNumber;
const int DateTime_Time::kSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime_Time::DateTime_Time()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.ClarosDateTime.Time)
}
DateTime_Time::DateTime_Time(const DateTime_Time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hours_, &from.hours_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_) -
    reinterpret_cast<char*>(&hours_)) + sizeof(seconds_));
  // @@protoc_insertion_point(copy_constructor:claros.common.ClarosDateTime.Time)
}

void DateTime_Time::SharedCtor() {
  ::memset(&hours_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&hours_)) + sizeof(seconds_));
}

DateTime_Time::~DateTime_Time() {
  // @@protoc_insertion_point(destructor:claros.common.ClarosDateTime.Time)
  SharedDtor();
}

void DateTime_Time::SharedDtor() {
}

void DateTime_Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime_Time& DateTime_Time::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTime_Time_claros_5fcommon_5fdatetime_2eproto.base);
  return *internal_default_instance();
}


void DateTime_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.ClarosDateTime.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hours_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&hours_)) + sizeof(seconds_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTime_Time::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTime_Time*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 hours = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hours(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 minutes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_minutes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 seconds = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_seconds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTime_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.ClarosDateTime.Time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 hours = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minutes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.ClarosDateTime.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.ClarosDateTime.Time)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTime_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.ClarosDateTime.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hours = 1;
  if (this->hours() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hours(), output);
  }

  // uint32 minutes = 2;
  if (this->minutes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minutes(), output);
  }

  // uint32 seconds = 3;
  if (this->seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.ClarosDateTime.Time)
}

::google::protobuf::uint8* DateTime_Time::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.ClarosDateTime.Time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 hours = 1;
  if (this->hours() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hours(), target);
  }

  // uint32 minutes = 2;
  if (this->minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minutes(), target);
  }

  // uint32 seconds = 3;
  if (this->seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.ClarosDateTime.Time)
  return target;
}

size_t DateTime_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.ClarosDateTime.Time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 hours = 1;
  if (this->hours() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hours());
  }

  // uint32 minutes = 2;
  if (this->minutes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minutes());
  }

  // uint32 seconds = 3;
  if (this->seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime_Time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.ClarosDateTime.Time)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime_Time* source =
      ::google::protobuf::DynamicCastToGenerated<DateTime_Time>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.ClarosDateTime.Time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.ClarosDateTime.Time)
    MergeFrom(*source);
  }
}

void DateTime_Time::MergeFrom(const DateTime_Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.ClarosDateTime.Time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hours() != 0) {
    set_hours(from.hours());
  }
  if (from.minutes() != 0) {
    set_minutes(from.minutes());
  }
  if (from.seconds() != 0) {
    set_seconds(from.seconds());
  }
}

void DateTime_Time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.ClarosDateTime.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime_Time::CopyFrom(const DateTime_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.ClarosDateTime.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_Time::IsInitialized() const {
  return true;
}

void DateTime_Time::Swap(DateTime_Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTime_Time::InternalSwap(DateTime_Time* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
}

::google::protobuf::Metadata DateTime_Time::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fdatetime_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fdatetime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTime_Date::InitAsDefaultInstance() {
}
class DateTime_Date::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime_Date::kYearFieldNumber;
const int DateTime_Date::kMonthFieldNumber;
const int DateTime_Date::kDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime_Date::DateTime_Date()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.ClarosDateTime.Date)
}
DateTime_Date::DateTime_Date(const DateTime_Date& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:claros.common.ClarosDateTime.Date)
}

void DateTime_Date::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

DateTime_Date::~DateTime_Date() {
  // @@protoc_insertion_point(destructor:claros.common.ClarosDateTime.Date)
  SharedDtor();
}

void DateTime_Date::SharedDtor() {
}

void DateTime_Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime_Date& DateTime_Date::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTime_Date_claros_5fcommon_5fdatetime_2eproto.base);
  return *internal_default_instance();
}


void DateTime_Date::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.ClarosDateTime.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTime_Date::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTime_Date*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 year = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_year(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 month = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_month(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 day = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_day(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTime_Date::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.ClarosDateTime.Date)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 year = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 month = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 day = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.ClarosDateTime.Date)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.ClarosDateTime.Date)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTime_Date::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.ClarosDateTime.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->year(), output);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.ClarosDateTime.Date)
}

::google::protobuf::uint8* DateTime_Date::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.ClarosDateTime.Date)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->year(), target);
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.ClarosDateTime.Date)
  return target;
}

size_t DateTime_Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.ClarosDateTime.Date)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->year());
  }

  // uint32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->month());
  }

  // uint32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime_Date::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.ClarosDateTime.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime_Date* source =
      ::google::protobuf::DynamicCastToGenerated<DateTime_Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.ClarosDateTime.Date)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.ClarosDateTime.Date)
    MergeFrom(*source);
  }
}

void DateTime_Date::MergeFrom(const DateTime_Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.ClarosDateTime.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    set_year(from.year());
  }
  if (from.month() != 0) {
    set_month(from.month());
  }
  if (from.day() != 0) {
    set_day(from.day());
  }
}

void DateTime_Date::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.ClarosDateTime.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime_Date::CopyFrom(const DateTime_Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.ClarosDateTime.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime_Date::IsInitialized() const {
  return true;
}

void DateTime_Date::Swap(DateTime_Date* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTime_Date::InternalSwap(DateTime_Date* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
}

::google::protobuf::Metadata DateTime_Date::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fdatetime_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fdatetime_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DateTime::InitAsDefaultInstance() {
  ::claros::common::_DateTime_default_instance_._instance.get_mutable()->datefield_ = const_cast< ::claros::common::DateTime_Date*>(
      ::claros::common::DateTime_Date::internal_default_instance());
  ::claros::common::_DateTime_default_instance_._instance.get_mutable()->timefield_ = const_cast< ::claros::common::DateTime_Time*>(
      ::claros::common::DateTime_Time::internal_default_instance());
}
class DateTime::HasBitSetters {
 public:
  static const ::claros::common::DateTime_Date& datefield(const DateTime* msg);
  static const ::claros::common::DateTime_Time& timefield(const DateTime* msg);
};

const ::claros::common::DateTime_Date&
DateTime::HasBitSetters::datefield(const DateTime* msg) {
  return *msg->datefield_;
}
const ::claros::common::DateTime_Time&
DateTime::HasBitSetters::timefield(const DateTime* msg) {
  return *msg->timefield_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DateTime::kDateFieldFieldNumber;
const int DateTime::kTimeFieldFieldNumber;
const int DateTime::kTimeZoneFieldNumber;
const int DateTime::kTicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DateTime::DateTime()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.ClarosDateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_datefield()) {
    datefield_ = new ::claros::common::DateTime_Date(*from.datefield_);
  } else {
    datefield_ = nullptr;
  }
  if (from.has_timefield()) {
    timefield_ = new ::claros::common::DateTime_Time(*from.timefield_);
  } else {
    timefield_ = nullptr;
  }
  ::memcpy(&ticks_, &from.ticks_,
    static_cast<size_t>(reinterpret_cast<char*>(&timezone_) -
    reinterpret_cast<char*>(&ticks_)) + sizeof(timezone_));
  // @@protoc_insertion_point(copy_constructor:claros.common.ClarosDateTime)
}

void DateTime::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base);
  ::memset(&datefield_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_) -
      reinterpret_cast<char*>(&datefield_)) + sizeof(timezone_));
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:claros.common.ClarosDateTime)
  SharedDtor();
}

void DateTime::SharedDtor() {
  if (this != internal_default_instance()) delete datefield_;
  if (this != internal_default_instance()) delete timefield_;
}

void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base);
  return *internal_default_instance();
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && datefield_ != nullptr) {
    delete datefield_;
  }
  datefield_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timefield_ != nullptr) {
    delete timefield_;
  }
  timefield_ = nullptr;
  ::memset(&ticks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_) -
      reinterpret_cast<char*>(&ticks_)) + sizeof(timezone_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DateTime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DateTime*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.ClarosDateTime.Date dateField = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::DateTime_Date::_InternalParse;
        object = msg->mutable_datefield();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.ClarosDateTime.Time timeField = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::DateTime_Time::_InternalParse;
        object = msg->mutable_timefield();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 timeZone = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timezone(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 ticks = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ticks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.ClarosDateTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.ClarosDateTime.Date dateField = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_datefield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.ClarosDateTime.Time timeField = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timefield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeZone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timezone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ticks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.ClarosDateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.ClarosDateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.ClarosDateTime.Date dateField = 1;
  if (this->has_datefield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::datefield(this), output);
  }

  // .claros.common.ClarosDateTime.Time timeField = 2;
  if (this->has_timefield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::timefield(this), output);
  }

  // int32 timeZone = 3;
  if (this->timezone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timezone(), output);
  }

  // uint64 ticks = 4;
  if (this->ticks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ticks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.ClarosDateTime)
}

::google::protobuf::uint8* DateTime::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.ClarosDateTime.Date dateField = 1;
  if (this->has_datefield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::datefield(this), target);
  }

  // .claros.common.ClarosDateTime.Time timeField = 2;
  if (this->has_timefield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::timefield(this), target);
  }

  // int32 timeZone = 3;
  if (this->timezone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timezone(), target);
  }

  // uint64 ticks = 4;
  if (this->ticks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ticks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.ClarosDateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.ClarosDateTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .claros.common.ClarosDateTime.Date dateField = 1;
  if (this->has_datefield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *datefield_);
  }

  // .claros.common.ClarosDateTime.Time timeField = 2;
  if (this->has_timefield()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timefield_);
  }

  // uint64 ticks = 4;
  if (this->ticks() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->ticks());
  }

  // int32 timeZone = 3;
  if (this->timezone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timezone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.ClarosDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::google::protobuf::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.ClarosDateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.ClarosDateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.ClarosDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_datefield()) {
    mutable_datefield()->::claros::common::DateTime_Date::MergeFrom(from.datefield());
  }
  if (from.has_timefield()) {
    mutable_timefield()->::claros::common::DateTime_Time::MergeFrom(from.timefield());
  }
  if (from.ticks() != 0) {
    set_ticks(from.ticks());
  }
  if (from.timezone() != 0) {
    set_timezone(from.timezone());
  }
}

void DateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.ClarosDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.ClarosDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::Swap(DateTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(datefield_, other->datefield_);
  swap(timefield_, other->timefield_);
  swap(ticks_, other->ticks_);
  swap(timezone_, other->timezone_);
}

::google::protobuf::Metadata DateTime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fdatetime_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fdatetime_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::DateTime_Time* Arena::CreateMaybeMessage< ::claros::common::DateTime_Time >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::DateTime_Time >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::common::DateTime_Date* Arena::CreateMaybeMessage< ::claros::common::DateTime_Date >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::DateTime_Date >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::common::DateTime* Arena::CreateMaybeMessage< ::claros::common::DateTime >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::DateTime >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
