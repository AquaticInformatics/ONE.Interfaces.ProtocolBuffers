// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_data.proto

#include "claros_instrument_measurement_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fmeasurement_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Measurement_claros_5fcommon_5fcore_5fmeasurement_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fgis_5fgis_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_GIS_claros_5fcommon_5fgis_5fgis_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fevent_5fdata_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_InstrumentEventData_claros_5finstrument_5fevent_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_5fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_InstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto;
namespace claros {
namespace instrument {
namespace measurement {
class InstrumentMeasurementDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentMeasurementData> _instance;
} _InstrumentMeasurementData_default_instance_;
}  // namespace measurement
}  // namespace instrument
}  // namespace claros
static void InitDefaultsInstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_;
    new (ptr) ::claros::instrument::measurement::InstrumentMeasurementData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::measurement::InstrumentMeasurementData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_InstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsInstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto}, {
      &scc_info_Measurement_claros_5fcommon_5fcore_5fmeasurement_2eproto.base,
      &scc_info_GIS_claros_5fcommon_5fgis_5fgis_2eproto.base,
      &scc_info_InstrumentEventData_claros_5finstrument_5fevent_5fdata_2eproto.base,}};

void InitDefaults_claros_5finstrument_5fmeasurement_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5finstrument_5fmeasurement_5fdata_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5finstrument_5fmeasurement_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, instrumentmeasurementid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, channel_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, fusionid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, measurement_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, supportingmeasurements_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, gis_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, measurementdataextended_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::measurement::InstrumentMeasurementData, measurementevent_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::instrument::measurement::InstrumentMeasurementData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdata_2eproto = {
  {}, AddDescriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto, "claros_instrument_measurement_data.proto", schemas,
  file_default_instances, TableStruct_claros_5finstrument_5fmeasurement_5fdata_2eproto::offsets,
  file_level_metadata_claros_5finstrument_5fmeasurement_5fdata_2eproto, 1, file_level_enum_descriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto, file_level_service_descriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto,
};

const char descriptor_table_protodef_claros_5finstrument_5fmeasurement_5fdata_2eproto[] =
  "\n(claros_instrument_measurement_data.pro"
  "to\022\035claros.instrument.measurement\032$claro"
  "s_common_core_measurement.proto\032\"claros_"
  "instrument_event_data.proto\032\033claros_comm"
  "on_gis_gis.proto\"\375\002\n\031InstrumentMeasureme"
  "ntData\022\037\n\027instrumentMeasurementId\030\001 \001(\t\022"
  "\017\n\007channel\030\002 \001(\005\022\020\n\010fusionId\030\003 \001(\t\0224\n\013me"
  "asurement\030\004 \001(\0132\037.claros.common.core.Mea"
  "surement\022X\n\026supportingMeasurements\030\005 \001(\013"
  "28.claros.instrument.measurement.Instrum"
  "entMeasurementData\022#\n\003gis\030\006 \001(\0132\026.claros"
  ".common.gis.GIS\022\037\n\027measurementDataExtend"
  "ed\030\007 \001(\t\022F\n\020measurementEvent\030\010 \001(\0132,.cla"
  "ros.instrument.event.InstrumentEventData"
  "b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5finstrument_5fmeasurement_5fdata_2eproto = {
  false, InitDefaults_claros_5finstrument_5fmeasurement_5fdata_2eproto, 
  descriptor_table_protodef_claros_5finstrument_5fmeasurement_5fdata_2eproto,
  "claros_instrument_measurement_data.proto", &assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdata_2eproto, 568,
};

void AddDescriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5fmeasurement_2eproto,
    ::AddDescriptors_claros_5finstrument_5fevent_5fdata_2eproto,
    ::AddDescriptors_claros_5fcommon_5fgis_5fgis_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5finstrument_5fmeasurement_5fdata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5finstrument_5fmeasurement_5fdata_2eproto = []() { AddDescriptors_claros_5finstrument_5fmeasurement_5fdata_2eproto(); return true; }();
namespace claros {
namespace instrument {
namespace measurement {

// ===================================================================

void InstrumentMeasurementData::InitAsDefaultInstance() {
  ::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_._instance.get_mutable()->measurement_ = const_cast< ::claros::common::core::Measurement*>(
      ::claros::common::core::Measurement::internal_default_instance());
  ::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_._instance.get_mutable()->supportingmeasurements_ = const_cast< ::claros::instrument::measurement::InstrumentMeasurementData*>(
      ::claros::instrument::measurement::InstrumentMeasurementData::internal_default_instance());
  ::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_._instance.get_mutable()->gis_ = const_cast< ::claros::common::gis::GIS*>(
      ::claros::common::gis::GIS::internal_default_instance());
  ::claros::instrument::measurement::_InstrumentMeasurementData_default_instance_._instance.get_mutable()->measurementevent_ = const_cast< ::claros::instrument::event::InstrumentEventData*>(
      ::claros::instrument::event::InstrumentEventData::internal_default_instance());
}
class InstrumentMeasurementData::HasBitSetters {
 public:
  static const ::claros::common::core::Measurement& measurement(const InstrumentMeasurementData* msg);
  static const ::claros::instrument::measurement::InstrumentMeasurementData& supportingmeasurements(const InstrumentMeasurementData* msg);
  static const ::claros::common::gis::GIS& gis(const InstrumentMeasurementData* msg);
  static const ::claros::instrument::event::InstrumentEventData& measurementevent(const InstrumentMeasurementData* msg);
};

const ::claros::common::core::Measurement&
InstrumentMeasurementData::HasBitSetters::measurement(const InstrumentMeasurementData* msg) {
  return *msg->measurement_;
}
const ::claros::instrument::measurement::InstrumentMeasurementData&
InstrumentMeasurementData::HasBitSetters::supportingmeasurements(const InstrumentMeasurementData* msg) {
  return *msg->supportingmeasurements_;
}
const ::claros::common::gis::GIS&
InstrumentMeasurementData::HasBitSetters::gis(const InstrumentMeasurementData* msg) {
  return *msg->gis_;
}
const ::claros::instrument::event::InstrumentEventData&
InstrumentMeasurementData::HasBitSetters::measurementevent(const InstrumentMeasurementData* msg) {
  return *msg->measurementevent_;
}
void InstrumentMeasurementData::clear_measurement() {
  if (GetArenaNoVirtual() == nullptr && measurement_ != nullptr) {
    delete measurement_;
  }
  measurement_ = nullptr;
}
void InstrumentMeasurementData::clear_gis() {
  if (GetArenaNoVirtual() == nullptr && gis_ != nullptr) {
    delete gis_;
  }
  gis_ = nullptr;
}
void InstrumentMeasurementData::clear_measurementevent() {
  if (GetArenaNoVirtual() == nullptr && measurementevent_ != nullptr) {
    delete measurementevent_;
  }
  measurementevent_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentMeasurementData::kInstrumentMeasurementIdFieldNumber;
const int InstrumentMeasurementData::kChannelFieldNumber;
const int InstrumentMeasurementData::kFusionIdFieldNumber;
const int InstrumentMeasurementData::kMeasurementFieldNumber;
const int InstrumentMeasurementData::kSupportingMeasurementsFieldNumber;
const int InstrumentMeasurementData::kGisFieldNumber;
const int InstrumentMeasurementData::kMeasurementDataExtendedFieldNumber;
const int InstrumentMeasurementData::kMeasurementEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentMeasurementData::InstrumentMeasurementData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.measurement.InstrumentMeasurementData)
}
InstrumentMeasurementData::InstrumentMeasurementData(const InstrumentMeasurementData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrumentmeasurementid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentmeasurementid().size() > 0) {
    instrumentmeasurementid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentmeasurementid_);
  }
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fusionid().size() > 0) {
    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  measurementdataextended_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.measurementdataextended().size() > 0) {
    measurementdataextended_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.measurementdataextended_);
  }
  if (from.has_measurement()) {
    measurement_ = new ::claros::common::core::Measurement(*from.measurement_);
  } else {
    measurement_ = nullptr;
  }
  if (from.has_supportingmeasurements()) {
    supportingmeasurements_ = new ::claros::instrument::measurement::InstrumentMeasurementData(*from.supportingmeasurements_);
  } else {
    supportingmeasurements_ = nullptr;
  }
  if (from.has_gis()) {
    gis_ = new ::claros::common::gis::GIS(*from.gis_);
  } else {
    gis_ = nullptr;
  }
  if (from.has_measurementevent()) {
    measurementevent_ = new ::claros::instrument::event::InstrumentEventData(*from.measurementevent_);
  } else {
    measurementevent_ = nullptr;
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:claros.instrument.measurement.InstrumentMeasurementData)
}

void InstrumentMeasurementData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto.base);
  instrumentmeasurementid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurementdataextended_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&measurement_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&measurement_)) + sizeof(channel_));
}

InstrumentMeasurementData::~InstrumentMeasurementData() {
  // @@protoc_insertion_point(destructor:claros.instrument.measurement.InstrumentMeasurementData)
  SharedDtor();
}

void InstrumentMeasurementData::SharedDtor() {
  instrumentmeasurementid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurementdataextended_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete measurement_;
  if (this != internal_default_instance()) delete supportingmeasurements_;
  if (this != internal_default_instance()) delete gis_;
  if (this != internal_default_instance()) delete measurementevent_;
}

void InstrumentMeasurementData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentMeasurementData& InstrumentMeasurementData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstrumentMeasurementData_claros_5finstrument_5fmeasurement_5fdata_2eproto.base);
  return *internal_default_instance();
}


void InstrumentMeasurementData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.measurement.InstrumentMeasurementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentmeasurementid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  measurementdataextended_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && measurement_ != nullptr) {
    delete measurement_;
  }
  measurement_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && supportingmeasurements_ != nullptr) {
    delete supportingmeasurements_;
  }
  supportingmeasurements_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gis_ != nullptr) {
    delete gis_;
  }
  gis_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && measurementevent_ != nullptr) {
    delete measurementevent_;
  }
  measurementevent_ = nullptr;
  channel_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentMeasurementData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstrumentMeasurementData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instrumentMeasurementId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.measurement.InstrumentMeasurementData.instrumentMeasurementId");
        object = msg->mutable_instrumentmeasurementid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string fusionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.measurement.InstrumentMeasurementData.fusionId");
        object = msg->mutable_fusionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.common.core.Measurement measurement = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::Measurement::_InternalParse;
        object = msg->mutable_measurement();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.instrument.measurement.InstrumentMeasurementData supportingMeasurements = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::measurement::InstrumentMeasurementData::_InternalParse;
        object = msg->mutable_supportingmeasurements();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.gis.GIS gis = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::gis::GIS::_InternalParse;
        object = msg->mutable_gis();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string measurementDataExtended = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.measurement.InstrumentMeasurementData.measurementDataExtended");
        object = msg->mutable_measurementdataextended();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.instrument.event.InstrumentEventData measurementEvent = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::event::InstrumentEventData::_InternalParse;
        object = msg->mutable_measurementevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentMeasurementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.measurement.InstrumentMeasurementData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instrumentMeasurementId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentmeasurementid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.measurement.InstrumentMeasurementData.instrumentMeasurementId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fusionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fusionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fusionid().data(), static_cast<int>(this->fusionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.measurement.InstrumentMeasurementData.fusionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.Measurement measurement = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.measurement.InstrumentMeasurementData supportingMeasurements = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_supportingmeasurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.gis.GIS gis = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string measurementDataExtended = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_measurementdataextended()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->measurementdataextended().data(), static_cast<int>(this->measurementdataextended().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.measurement.InstrumentMeasurementData.measurementDataExtended"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.event.InstrumentEventData measurementEvent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurementevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.measurement.InstrumentMeasurementData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.measurement.InstrumentMeasurementData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentMeasurementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.measurement.InstrumentMeasurementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.instrumentMeasurementId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentmeasurementid(), output);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.fusionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fusionid(), output);
  }

  // .claros.common.core.Measurement measurement = 4;
  if (this->has_measurement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::measurement(this), output);
  }

  // .claros.instrument.measurement.InstrumentMeasurementData supportingMeasurements = 5;
  if (this->has_supportingmeasurements()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::supportingmeasurements(this), output);
  }

  // .claros.common.gis.GIS gis = 6;
  if (this->has_gis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::gis(this), output);
  }

  // string measurementDataExtended = 7;
  if (this->measurementdataextended().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->measurementdataextended().data(), static_cast<int>(this->measurementdataextended().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.measurementDataExtended");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->measurementdataextended(), output);
  }

  // .claros.instrument.event.InstrumentEventData measurementEvent = 8;
  if (this->has_measurementevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::measurementevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.measurement.InstrumentMeasurementData)
}

::google::protobuf::uint8* InstrumentMeasurementData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.measurement.InstrumentMeasurementData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.instrumentMeasurementId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentmeasurementid(), target);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.fusionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fusionid(), target);
  }

  // .claros.common.core.Measurement measurement = 4;
  if (this->has_measurement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::measurement(this), target);
  }

  // .claros.instrument.measurement.InstrumentMeasurementData supportingMeasurements = 5;
  if (this->has_supportingmeasurements()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::supportingmeasurements(this), target);
  }

  // .claros.common.gis.GIS gis = 6;
  if (this->has_gis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::gis(this), target);
  }

  // string measurementDataExtended = 7;
  if (this->measurementdataextended().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->measurementdataextended().data(), static_cast<int>(this->measurementdataextended().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.measurement.InstrumentMeasurementData.measurementDataExtended");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->measurementdataextended(), target);
  }

  // .claros.instrument.event.InstrumentEventData measurementEvent = 8;
  if (this->has_measurementevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::measurementevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.measurement.InstrumentMeasurementData)
  return target;
}

size_t InstrumentMeasurementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.measurement.InstrumentMeasurementData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentmeasurementid());
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fusionid());
  }

  // string measurementDataExtended = 7;
  if (this->measurementdataextended().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->measurementdataextended());
  }

  // .claros.common.core.Measurement measurement = 4;
  if (this->has_measurement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *measurement_);
  }

  // .claros.instrument.measurement.InstrumentMeasurementData supportingMeasurements = 5;
  if (this->has_supportingmeasurements()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *supportingmeasurements_);
  }

  // .claros.common.gis.GIS gis = 6;
  if (this->has_gis()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gis_);
  }

  // .claros.instrument.event.InstrumentEventData measurementEvent = 8;
  if (this->has_measurementevent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *measurementevent_);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentMeasurementData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.measurement.InstrumentMeasurementData)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentMeasurementData* source =
      ::google::protobuf::DynamicCastToGenerated<InstrumentMeasurementData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.measurement.InstrumentMeasurementData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.measurement.InstrumentMeasurementData)
    MergeFrom(*source);
  }
}

void InstrumentMeasurementData::MergeFrom(const InstrumentMeasurementData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.measurement.InstrumentMeasurementData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrumentmeasurementid().size() > 0) {

    instrumentmeasurementid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentmeasurementid_);
  }
  if (from.fusionid().size() > 0) {

    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  if (from.measurementdataextended().size() > 0) {

    measurementdataextended_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.measurementdataextended_);
  }
  if (from.has_measurement()) {
    mutable_measurement()->::claros::common::core::Measurement::MergeFrom(from.measurement());
  }
  if (from.has_supportingmeasurements()) {
    mutable_supportingmeasurements()->::claros::instrument::measurement::InstrumentMeasurementData::MergeFrom(from.supportingmeasurements());
  }
  if (from.has_gis()) {
    mutable_gis()->::claros::common::gis::GIS::MergeFrom(from.gis());
  }
  if (from.has_measurementevent()) {
    mutable_measurementevent()->::claros::instrument::event::InstrumentEventData::MergeFrom(from.measurementevent());
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
}

void InstrumentMeasurementData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.measurement.InstrumentMeasurementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentMeasurementData::CopyFrom(const InstrumentMeasurementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.measurement.InstrumentMeasurementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentMeasurementData::IsInitialized() const {
  return true;
}

void InstrumentMeasurementData::Swap(InstrumentMeasurementData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentMeasurementData::InternalSwap(InstrumentMeasurementData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  instrumentmeasurementid_.Swap(&other->instrumentmeasurementid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fusionid_.Swap(&other->fusionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  measurementdataextended_.Swap(&other->measurementdataextended_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(measurement_, other->measurement_);
  swap(supportingmeasurements_, other->supportingmeasurements_);
  swap(gis_, other->gis_);
  swap(measurementevent_, other->measurementevent_);
  swap(channel_, other->channel_);
}

::google::protobuf::Metadata InstrumentMeasurementData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdata_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fmeasurement_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace measurement
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::instrument::measurement::InstrumentMeasurementData* Arena::CreateMaybeMessage< ::claros::instrument::measurement::InstrumentMeasurementData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::measurement::InstrumentMeasurementData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
