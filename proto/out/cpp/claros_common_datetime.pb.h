// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_datetime.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fdatetime_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fdatetime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fdatetime_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fdatetime_2eproto();
namespace claros {
namespace common {
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class DateTime_Date;
class DateTime_DateDefaultTypeInternal;
extern DateTime_DateDefaultTypeInternal _DateTime_Date_default_instance_;
class DateTime_Time;
class DateTime_TimeDefaultTypeInternal;
extern DateTime_TimeDefaultTypeInternal _DateTime_Time_default_instance_;
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::DateTime* Arena::CreateMaybeMessage<::claros::common::DateTime>(Arena*);
template<> ::claros::common::DateTime_Date* Arena::CreateMaybeMessage<::claros::common::DateTime_Date>(Arena*);
template<> ::claros::common::DateTime_Time* Arena::CreateMaybeMessage<::claros::common::DateTime_Time>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {

// ===================================================================

class DateTime_Time :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.DateTime.Time) */ {
 public:
  DateTime_Time();
  virtual ~DateTime_Time();

  DateTime_Time(const DateTime_Time& from);

  inline DateTime_Time& operator=(const DateTime_Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime_Time(DateTime_Time&& from) noexcept
    : DateTime_Time() {
    *this = ::std::move(from);
  }

  inline DateTime_Time& operator=(DateTime_Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTime_Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime_Time* internal_default_instance() {
    return reinterpret_cast<const DateTime_Time*>(
               &_DateTime_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DateTime_Time* other);
  friend void swap(DateTime_Time& a, DateTime_Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime_Time* New() const final {
    return CreateMaybeMessage<DateTime_Time>(nullptr);
  }

  DateTime_Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime_Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime_Time& from);
  void MergeFrom(const DateTime_Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime_Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 hours = 1;
  void clear_hours();
  static const int kHoursFieldNumber = 1;
  ::google::protobuf::uint32 hours() const;
  void set_hours(::google::protobuf::uint32 value);

  // uint32 minutes = 2;
  void clear_minutes();
  static const int kMinutesFieldNumber = 2;
  ::google::protobuf::uint32 minutes() const;
  void set_minutes(::google::protobuf::uint32 value);

  // uint32 seconds = 3;
  void clear_seconds();
  static const int kSecondsFieldNumber = 3;
  ::google::protobuf::uint32 seconds() const;
  void set_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.common.DateTime.Time)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 hours_;
  ::google::protobuf::uint32 minutes_;
  ::google::protobuf::uint32 seconds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fdatetime_2eproto;
};
// -------------------------------------------------------------------

class DateTime_Date :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.DateTime.Date) */ {
 public:
  DateTime_Date();
  virtual ~DateTime_Date();

  DateTime_Date(const DateTime_Date& from);

  inline DateTime_Date& operator=(const DateTime_Date& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime_Date(DateTime_Date&& from) noexcept
    : DateTime_Date() {
    *this = ::std::move(from);
  }

  inline DateTime_Date& operator=(DateTime_Date&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTime_Date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime_Date* internal_default_instance() {
    return reinterpret_cast<const DateTime_Date*>(
               &_DateTime_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DateTime_Date* other);
  friend void swap(DateTime_Date& a, DateTime_Date& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime_Date* New() const final {
    return CreateMaybeMessage<DateTime_Date>(nullptr);
  }

  DateTime_Date* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime_Date>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime_Date& from);
  void MergeFrom(const DateTime_Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime_Date* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 year = 1;
  void clear_year();
  static const int kYearFieldNumber = 1;
  ::google::protobuf::uint32 year() const;
  void set_year(::google::protobuf::uint32 value);

  // uint32 month = 2;
  void clear_month();
  static const int kMonthFieldNumber = 2;
  ::google::protobuf::uint32 month() const;
  void set_month(::google::protobuf::uint32 value);

  // uint32 day = 3;
  void clear_day();
  static const int kDayFieldNumber = 3;
  ::google::protobuf::uint32 day() const;
  void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.common.DateTime.Date)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fdatetime_2eproto;
};
// -------------------------------------------------------------------

class DateTime :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.DateTime) */ {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DateTime* other);
  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(nullptr);
  }

  DateTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTime_Time Time;
  typedef DateTime_Date Date;

  // accessors -------------------------------------------------------

  // .claros.common.DateTime.Date dateField = 1;
  bool has_datefield() const;
  void clear_datefield();
  static const int kDateFieldFieldNumber = 1;
  const ::claros::common::DateTime_Date& datefield() const;
  ::claros::common::DateTime_Date* release_datefield();
  ::claros::common::DateTime_Date* mutable_datefield();
  void set_allocated_datefield(::claros::common::DateTime_Date* datefield);

  // .claros.common.DateTime.Time timeField = 2;
  bool has_timefield() const;
  void clear_timefield();
  static const int kTimeFieldFieldNumber = 2;
  const ::claros::common::DateTime_Time& timefield() const;
  ::claros::common::DateTime_Time* release_timefield();
  ::claros::common::DateTime_Time* mutable_timefield();
  void set_allocated_timefield(::claros::common::DateTime_Time* timefield);

  // int32 timeZone = 3;
  void clear_timezone();
  static const int kTimeZoneFieldNumber = 3;
  ::google::protobuf::int32 timezone() const;
  void set_timezone(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:claros.common.DateTime)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::claros::common::DateTime_Date* datefield_;
  ::claros::common::DateTime_Time* timefield_;
  ::google::protobuf::int32 timezone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fdatetime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateTime_Time

// uint32 hours = 1;
inline void DateTime_Time::clear_hours() {
  hours_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Time::hours() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Time.hours)
  return hours_;
}
inline void DateTime_Time::set_hours(::google::protobuf::uint32 value) {
  
  hours_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Time.hours)
}

// uint32 minutes = 2;
inline void DateTime_Time::clear_minutes() {
  minutes_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Time::minutes() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Time.minutes)
  return minutes_;
}
inline void DateTime_Time::set_minutes(::google::protobuf::uint32 value) {
  
  minutes_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Time.minutes)
}

// uint32 seconds = 3;
inline void DateTime_Time::clear_seconds() {
  seconds_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Time::seconds() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Time.seconds)
  return seconds_;
}
inline void DateTime_Time::set_seconds(::google::protobuf::uint32 value) {
  
  seconds_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Time.seconds)
}

// -------------------------------------------------------------------

// DateTime_Date

// uint32 year = 1;
inline void DateTime_Date::clear_year() {
  year_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Date::year() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Date.year)
  return year_;
}
inline void DateTime_Date::set_year(::google::protobuf::uint32 value) {
  
  year_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Date.year)
}

// uint32 month = 2;
inline void DateTime_Date::clear_month() {
  month_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Date::month() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Date.month)
  return month_;
}
inline void DateTime_Date::set_month(::google::protobuf::uint32 value) {
  
  month_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Date.month)
}

// uint32 day = 3;
inline void DateTime_Date::clear_day() {
  day_ = 0u;
}
inline ::google::protobuf::uint32 DateTime_Date::day() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.Date.day)
  return day_;
}
inline void DateTime_Date::set_day(::google::protobuf::uint32 value) {
  
  day_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.Date.day)
}

// -------------------------------------------------------------------

// DateTime

// .claros.common.DateTime.Date dateField = 1;
inline bool DateTime::has_datefield() const {
  return this != internal_default_instance() && datefield_ != nullptr;
}
inline void DateTime::clear_datefield() {
  if (GetArenaNoVirtual() == nullptr && datefield_ != nullptr) {
    delete datefield_;
  }
  datefield_ = nullptr;
}
inline const ::claros::common::DateTime_Date& DateTime::datefield() const {
  const ::claros::common::DateTime_Date* p = datefield_;
  // @@protoc_insertion_point(field_get:claros.common.DateTime.dateField)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::DateTime_Date*>(
      &::claros::common::_DateTime_Date_default_instance_);
}
inline ::claros::common::DateTime_Date* DateTime::release_datefield() {
  // @@protoc_insertion_point(field_release:claros.common.DateTime.dateField)
  
  ::claros::common::DateTime_Date* temp = datefield_;
  datefield_ = nullptr;
  return temp;
}
inline ::claros::common::DateTime_Date* DateTime::mutable_datefield() {
  
  if (datefield_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::DateTime_Date>(GetArenaNoVirtual());
    datefield_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.DateTime.dateField)
  return datefield_;
}
inline void DateTime::set_allocated_datefield(::claros::common::DateTime_Date* datefield) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete datefield_;
  }
  if (datefield) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datefield = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, datefield, submessage_arena);
    }
    
  } else {
    
  }
  datefield_ = datefield;
  // @@protoc_insertion_point(field_set_allocated:claros.common.DateTime.dateField)
}

// .claros.common.DateTime.Time timeField = 2;
inline bool DateTime::has_timefield() const {
  return this != internal_default_instance() && timefield_ != nullptr;
}
inline void DateTime::clear_timefield() {
  if (GetArenaNoVirtual() == nullptr && timefield_ != nullptr) {
    delete timefield_;
  }
  timefield_ = nullptr;
}
inline const ::claros::common::DateTime_Time& DateTime::timefield() const {
  const ::claros::common::DateTime_Time* p = timefield_;
  // @@protoc_insertion_point(field_get:claros.common.DateTime.timeField)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::DateTime_Time*>(
      &::claros::common::_DateTime_Time_default_instance_);
}
inline ::claros::common::DateTime_Time* DateTime::release_timefield() {
  // @@protoc_insertion_point(field_release:claros.common.DateTime.timeField)
  
  ::claros::common::DateTime_Time* temp = timefield_;
  timefield_ = nullptr;
  return temp;
}
inline ::claros::common::DateTime_Time* DateTime::mutable_timefield() {
  
  if (timefield_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::DateTime_Time>(GetArenaNoVirtual());
    timefield_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.DateTime.timeField)
  return timefield_;
}
inline void DateTime::set_allocated_timefield(::claros::common::DateTime_Time* timefield) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timefield_;
  }
  if (timefield) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timefield = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timefield, submessage_arena);
    }
    
  } else {
    
  }
  timefield_ = timefield;
  // @@protoc_insertion_point(field_set_allocated:claros.common.DateTime.timeField)
}

// int32 timeZone = 3;
inline void DateTime::clear_timezone() {
  timezone_ = 0;
}
inline ::google::protobuf::int32 DateTime::timezone() const {
  // @@protoc_insertion_point(field_get:claros.common.DateTime.timeZone)
  return timezone_;
}
inline void DateTime::set_timezone(::google::protobuf::int32 value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:claros.common.DateTime.timeZone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fdatetime_2eproto
