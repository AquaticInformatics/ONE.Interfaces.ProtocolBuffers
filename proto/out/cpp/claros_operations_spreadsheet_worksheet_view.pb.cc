// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_view.proto

#include "claros_operations_spreadsheet_worksheet_view.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto;
namespace claros {
namespace operations {
namespace spreadsheet {
class WorksheetView_ColumnMasksEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorksheetView_ColumnMasksEntry_DoNotUse> _instance;
} _WorksheetView_ColumnMasksEntry_DoNotUse_default_instance_;
class WorksheetViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorksheetView> _instance;
} _WorksheetView_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
static void InitDefaultsWorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::operations::spreadsheet::_WorksheetView_ColumnMasksEntry_DoNotUse_default_instance_;
    new (ptr) ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse();
  }
  ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto}, {}};

static void InitDefaultsWorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::operations::spreadsheet::_WorksheetView_default_instance_;
    new (ptr) ::claros::operations::spreadsheet::WorksheetView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::operations::spreadsheet::WorksheetView::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto}, {
      &scc_info_WorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto.base,}};

void InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_WorksheetView_ColumnMasksEntry_DoNotUse_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView, worksheettype_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView, columnmasks_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::WorksheetView, layout_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse)},
  { 9, -1, sizeof(::claros::operations::spreadsheet::WorksheetView)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::operations::spreadsheet::_WorksheetView_ColumnMasksEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::operations::spreadsheet::_WorksheetView_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto = {
  {}, AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, "claros_operations_spreadsheet_worksheet_view.proto", schemas,
  file_default_instances, TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto::offsets,
  file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, 2, file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto,
};

const char descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto[] =
  "\n2claros_operations_spreadsheet_workshee"
  "t_view.proto\022\035claros.operations.spreadsh"
  "eet\0322claros_operations_spreadsheet_works"
  "heet_type.proto\"\354\001\n\rWorksheetView\022C\n\rwor"
  "ksheetType\030\001 \001(\0162,.claros.operations.spr"
  "eadsheet.WorksheetType\022R\n\013columnMasks\030\002 "
  "\003(\0132=.claros.operations.spreadsheet.Work"
  "sheetView.ColumnMasksEntry\022\016\n\006layout\030\003 \001"
  "(\t\0322\n\020ColumnMasksEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto = {
  false, InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, 
  descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto,
  "claros_operations_spreadsheet_worksheet_view.proto", &assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, 382,
};

void AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5ftype_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto = []() { AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto(); return true; }();
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

WorksheetView_ColumnMasksEntry_DoNotUse::WorksheetView_ColumnMasksEntry_DoNotUse() {}
WorksheetView_ColumnMasksEntry_DoNotUse::WorksheetView_ColumnMasksEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WorksheetView_ColumnMasksEntry_DoNotUse::MergeFrom(const WorksheetView_ColumnMasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WorksheetView_ColumnMasksEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto);
  return ::file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto[0];
}
void WorksheetView_ColumnMasksEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorksheetView_ColumnMasksEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WorksheetView_ColumnMasksEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.operations.spreadsheet.WorksheetView.ColumnMasksEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WorksheetView::InitAsDefaultInstance() {
}
class WorksheetView::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorksheetView::kWorksheetTypeFieldNumber;
const int WorksheetView::kColumnMasksFieldNumber;
const int WorksheetView::kLayoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorksheetView::WorksheetView()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.operations.spreadsheet.WorksheetView)
}
WorksheetView::WorksheetView(const WorksheetView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  columnmasks_.MergeFrom(from.columnmasks_);
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.layout().size() > 0) {
    layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  worksheettype_ = from.worksheettype_;
  // @@protoc_insertion_point(copy_constructor:claros.operations.spreadsheet.WorksheetView)
}

void WorksheetView::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto.base);
  layout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worksheettype_ = 0;
}

WorksheetView::~WorksheetView() {
  // @@protoc_insertion_point(destructor:claros.operations.spreadsheet.WorksheetView)
  SharedDtor();
}

void WorksheetView::SharedDtor() {
  layout_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorksheetView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorksheetView& WorksheetView::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorksheetView_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto.base);
  return *internal_default_instance();
}


void WorksheetView::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.operations.spreadsheet.WorksheetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columnmasks_.Clear();
  layout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  worksheettype_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorksheetView::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorksheetView*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.operations.spreadsheet.WorksheetType worksheetType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_worksheettype(static_cast<::claros::operations::spreadsheet::WorksheetType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<uint32, string> columnMasks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->columnmasks_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // string layout = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.operations.spreadsheet.WorksheetView.layout");
        object = msg->mutable_layout();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorksheetView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.operations.spreadsheet.WorksheetView)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.operations.spreadsheet.WorksheetType worksheetType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_worksheettype(static_cast< ::claros::operations::spreadsheet::WorksheetType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, string> columnMasks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          WorksheetView_ColumnMasksEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WorksheetView_ColumnMasksEntry_DoNotUse,
              ::google::protobuf::uint32, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string > > parser(&columnmasks_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.operations.spreadsheet.WorksheetView.ColumnMasksEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string layout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->layout().data(), static_cast<int>(this->layout().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.operations.spreadsheet.WorksheetView.layout"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.operations.spreadsheet.WorksheetView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.operations.spreadsheet.WorksheetView)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorksheetView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.operations.spreadsheet.WorksheetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.operations.spreadsheet.WorksheetType worksheetType = 1;
  if (this->worksheettype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->worksheettype(), output);
  }

  // map<uint32, string> columnMasks = 2;
  if (!this->columnmasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.operations.spreadsheet.WorksheetView.ColumnMasksEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->columnmasks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->columnmasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->columnmasks().begin();
          it != this->columnmasks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorksheetView_ColumnMasksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(columnmasks_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      ::std::unique_ptr<WorksheetView_ColumnMasksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->columnmasks().begin();
          it != this->columnmasks().end(); ++it) {
        entry.reset(columnmasks_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string layout = 3;
  if (this->layout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layout().data(), static_cast<int>(this->layout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.WorksheetView.layout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->layout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.operations.spreadsheet.WorksheetView)
}

::google::protobuf::uint8* WorksheetView::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.operations.spreadsheet.WorksheetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.operations.spreadsheet.WorksheetType worksheetType = 1;
  if (this->worksheettype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->worksheettype(), target);
  }

  // map<uint32, string> columnMasks = 2;
  if (!this->columnmasks().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.operations.spreadsheet.WorksheetView.ColumnMasksEntry.value");
      }
    };

    if (false &&
        this->columnmasks().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->columnmasks().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->columnmasks().begin();
          it != this->columnmasks().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorksheetView_ColumnMasksEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(columnmasks_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      ::std::unique_ptr<WorksheetView_ColumnMasksEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
          it = this->columnmasks().begin();
          it != this->columnmasks().end(); ++it) {
        entry.reset(columnmasks_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string layout = 3;
  if (this->layout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->layout().data(), static_cast<int>(this->layout().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.WorksheetView.layout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->layout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.operations.spreadsheet.WorksheetView)
  return target;
}

size_t WorksheetView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.operations.spreadsheet.WorksheetView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> columnMasks = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->columnmasks_size());
  {
    ::std::unique_ptr<WorksheetView_ColumnMasksEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->columnmasks().begin();
        it != this->columnmasks().end(); ++it) {
      entry.reset(columnmasks_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string layout = 3;
  if (this->layout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layout());
  }

  // .claros.operations.spreadsheet.WorksheetType worksheetType = 1;
  if (this->worksheettype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->worksheettype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorksheetView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.operations.spreadsheet.WorksheetView)
  GOOGLE_DCHECK_NE(&from, this);
  const WorksheetView* source =
      ::google::protobuf::DynamicCastToGenerated<WorksheetView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.operations.spreadsheet.WorksheetView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.operations.spreadsheet.WorksheetView)
    MergeFrom(*source);
  }
}

void WorksheetView::MergeFrom(const WorksheetView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.operations.spreadsheet.WorksheetView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columnmasks_.MergeFrom(from.columnmasks_);
  if (from.layout().size() > 0) {

    layout_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_);
  }
  if (from.worksheettype() != 0) {
    set_worksheettype(from.worksheettype());
  }
}

void WorksheetView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.operations.spreadsheet.WorksheetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorksheetView::CopyFrom(const WorksheetView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.operations.spreadsheet.WorksheetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorksheetView::IsInitialized() const {
  return true;
}

void WorksheetView::Swap(WorksheetView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorksheetView::InternalSwap(WorksheetView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  columnmasks_.Swap(&other->columnmasks_);
  layout_.Swap(&other->layout_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(worksheettype_, other->worksheettype_);
}

::google::protobuf::Metadata WorksheetView::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto);
  return ::file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fview_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse* Arena::CreateMaybeMessage< ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::claros::operations::spreadsheet::WorksheetView_ColumnMasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::operations::spreadsheet::WorksheetView* Arena::CreateMaybeMessage< ::claros::operations::spreadsheet::WorksheetView >(Arena* arena) {
  return Arena::CreateInternal< ::claros::operations::spreadsheet::WorksheetView >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
