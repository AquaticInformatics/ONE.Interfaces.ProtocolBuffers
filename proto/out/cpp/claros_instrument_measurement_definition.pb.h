// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_definition.proto

#ifndef PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_5fdefinition_2eproto
#define PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_5fdefinition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_clarosdatetime.pb.h"
#include "claros_instrument_measurement_milliamp_binding.pb.h"
#include "claros_instrument_measurement_scsensor_binding.pb.h"
#include "claros_common_core_limit.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_5fdefinition_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5finstrument_5fmeasurement_5fdefinition_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto();
namespace claros {
namespace instrument {
namespace measurement {
class InstrumentMeasurementDefinition;
class InstrumentMeasurementDefinitionDefaultTypeInternal;
extern InstrumentMeasurementDefinitionDefaultTypeInternal _InstrumentMeasurementDefinition_default_instance_;
}  // namespace measurement
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::instrument::measurement::InstrumentMeasurementDefinition* Arena::CreateMaybeMessage<::claros::instrument::measurement::InstrumentMeasurementDefinition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace instrument {
namespace measurement {

// ===================================================================

class InstrumentMeasurementDefinition :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.measurement.InstrumentMeasurementDefinition) */ {
 public:
  InstrumentMeasurementDefinition();
  virtual ~InstrumentMeasurementDefinition();

  InstrumentMeasurementDefinition(const InstrumentMeasurementDefinition& from);

  inline InstrumentMeasurementDefinition& operator=(const InstrumentMeasurementDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentMeasurementDefinition(InstrumentMeasurementDefinition&& from) noexcept
    : InstrumentMeasurementDefinition() {
    *this = ::std::move(from);
  }

  inline InstrumentMeasurementDefinition& operator=(InstrumentMeasurementDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InstrumentMeasurementDefinition& default_instance();

  enum BindingCase {
    kScSensorBinding = 8,
    kMilliAmpBinding = 9,
    BINDING_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentMeasurementDefinition* internal_default_instance() {
    return reinterpret_cast<const InstrumentMeasurementDefinition*>(
               &_InstrumentMeasurementDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InstrumentMeasurementDefinition* other);
  friend void swap(InstrumentMeasurementDefinition& a, InstrumentMeasurementDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentMeasurementDefinition* New() const final {
    return CreateMaybeMessage<InstrumentMeasurementDefinition>(nullptr);
  }

  InstrumentMeasurementDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentMeasurementDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentMeasurementDefinition& from);
  void MergeFrom(const InstrumentMeasurementDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentMeasurementDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.common.core.Limit limits = 10;
  int limits_size() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 10;
  ::claros::common::core::Limit* mutable_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >*
      mutable_limits();
  const ::claros::common::core::Limit& limits(int index) const;
  ::claros::common::core::Limit* add_limits();
  const ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >&
      limits() const;

  // string instrumentMeasurementId = 1;
  void clear_instrumentmeasurementid();
  static const int kInstrumentMeasurementIdFieldNumber = 1;
  const ::std::string& instrumentmeasurementid() const;
  void set_instrumentmeasurementid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentmeasurementid(::std::string&& value);
  #endif
  void set_instrumentmeasurementid(const char* value);
  void set_instrumentmeasurementid(const char* value, size_t size);
  ::std::string* mutable_instrumentmeasurementid();
  ::std::string* release_instrumentmeasurementid();
  void set_allocated_instrumentmeasurementid(::std::string* instrumentmeasurementid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string fusionId = 3;
  void clear_fusionid();
  static const int kFusionIdFieldNumber = 3;
  const ::std::string& fusionid() const;
  void set_fusionid(const ::std::string& value);
  #if LANG_CXX11
  void set_fusionid(::std::string&& value);
  #endif
  void set_fusionid(const char* value);
  void set_fusionid(const char* value, size_t size);
  ::std::string* mutable_fusionid();
  ::std::string* release_fusionid();
  void set_allocated_fusionid(::std::string* fusionid);

  // string locationId = 4;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 4;
  const ::std::string& locationid() const;
  void set_locationid(const ::std::string& value);
  #if LANG_CXX11
  void set_locationid(::std::string&& value);
  #endif
  void set_locationid(const char* value);
  void set_locationid(const char* value, size_t size);
  ::std::string* mutable_locationid();
  ::std::string* release_locationid();
  void set_allocated_locationid(::std::string* locationid);

  // string createdById = 11;
  void clear_createdbyid();
  static const int kCreatedByIdFieldNumber = 11;
  const ::std::string& createdbyid() const;
  void set_createdbyid(const ::std::string& value);
  #if LANG_CXX11
  void set_createdbyid(::std::string&& value);
  #endif
  void set_createdbyid(const char* value);
  void set_createdbyid(const char* value, size_t size);
  ::std::string* mutable_createdbyid();
  ::std::string* release_createdbyid();
  void set_allocated_createdbyid(::std::string* createdbyid);

  // string modifiedById = 13;
  void clear_modifiedbyid();
  static const int kModifiedByIdFieldNumber = 13;
  const ::std::string& modifiedbyid() const;
  void set_modifiedbyid(const ::std::string& value);
  #if LANG_CXX11
  void set_modifiedbyid(::std::string&& value);
  #endif
  void set_modifiedbyid(const char* value);
  void set_modifiedbyid(const char* value, size_t size);
  ::std::string* mutable_modifiedbyid();
  ::std::string* release_modifiedbyid();
  void set_allocated_modifiedbyid(::std::string* modifiedbyid);

  // .claros.common.core.ClarosDateTime createdOn = 12;
  bool has_createdon() const;
  void clear_createdon();
  static const int kCreatedOnFieldNumber = 12;
  const ::claros::common::core::ClarosDateTime& createdon() const;
  ::claros::common::core::ClarosDateTime* release_createdon();
  ::claros::common::core::ClarosDateTime* mutable_createdon();
  void set_allocated_createdon(::claros::common::core::ClarosDateTime* createdon);

  // .claros.common.core.ClarosDateTime modifiedOn = 14;
  bool has_modifiedon() const;
  void clear_modifiedon();
  static const int kModifiedOnFieldNumber = 14;
  const ::claros::common::core::ClarosDateTime& modifiedon() const;
  ::claros::common::core::ClarosDateTime* release_modifiedon();
  ::claros::common::core::ClarosDateTime* mutable_modifiedon();
  void set_allocated_modifiedon(::claros::common::core::ClarosDateTime* modifiedon);

  // uint32 parameterId = 5;
  void clear_parameterid();
  static const int kParameterIdFieldNumber = 5;
  ::google::protobuf::uint32 parameterid() const;
  void set_parameterid(::google::protobuf::uint32 value);

  // uint32 displayUnitId = 6;
  void clear_displayunitid();
  static const int kDisplayUnitIdFieldNumber = 6;
  ::google::protobuf::uint32 displayunitid() const;
  void set_displayunitid(::google::protobuf::uint32 value);

  // bool isVisible = 7;
  void clear_isvisible();
  static const int kIsVisibleFieldNumber = 7;
  bool isvisible() const;
  void set_isvisible(bool value);

  // .claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;
  bool has_scsensorbinding() const;
  void clear_scsensorbinding();
  static const int kScSensorBindingFieldNumber = 8;
  const ::claros::instrument::measurement::SCSensorBinding& scsensorbinding() const;
  ::claros::instrument::measurement::SCSensorBinding* release_scsensorbinding();
  ::claros::instrument::measurement::SCSensorBinding* mutable_scsensorbinding();
  void set_allocated_scsensorbinding(::claros::instrument::measurement::SCSensorBinding* scsensorbinding);

  // .claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;
  bool has_milliampbinding() const;
  void clear_milliampbinding();
  static const int kMilliAmpBindingFieldNumber = 9;
  const ::claros::instrument::measurement::MilliAmpBinding& milliampbinding() const;
  ::claros::instrument::measurement::MilliAmpBinding* release_milliampbinding();
  ::claros::instrument::measurement::MilliAmpBinding* mutable_milliampbinding();
  void set_allocated_milliampbinding(::claros::instrument::measurement::MilliAmpBinding* milliampbinding);

  void clear_binding();
  BindingCase binding_case() const;
  // @@protoc_insertion_point(class_scope:claros.instrument.measurement.InstrumentMeasurementDefinition)
 private:
  class HasBitSetters;
  void set_has_scsensorbinding();
  void set_has_milliampbinding();

  inline bool has_binding() const;
  inline void clear_has_binding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit > limits_;
  ::google::protobuf::internal::ArenaStringPtr instrumentmeasurementid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr fusionid_;
  ::google::protobuf::internal::ArenaStringPtr locationid_;
  ::google::protobuf::internal::ArenaStringPtr createdbyid_;
  ::google::protobuf::internal::ArenaStringPtr modifiedbyid_;
  ::claros::common::core::ClarosDateTime* createdon_;
  ::claros::common::core::ClarosDateTime* modifiedon_;
  ::google::protobuf::uint32 parameterid_;
  ::google::protobuf::uint32 displayunitid_;
  bool isvisible_;
  union BindingUnion {
    BindingUnion() {}
    ::claros::instrument::measurement::SCSensorBinding* scsensorbinding_;
    ::claros::instrument::measurement::MilliAmpBinding* milliampbinding_;
  } binding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5finstrument_5fmeasurement_5fdefinition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentMeasurementDefinition

// string instrumentMeasurementId = 1;
inline void InstrumentMeasurementDefinition::clear_instrumentmeasurementid() {
  instrumentmeasurementid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::instrumentmeasurementid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
  return instrumentmeasurementid_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_instrumentmeasurementid(const ::std::string& value) {
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_instrumentmeasurementid(::std::string&& value) {
  
  instrumentmeasurementid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
}
#endif
inline void InstrumentMeasurementDefinition::set_instrumentmeasurementid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
}
inline void InstrumentMeasurementDefinition::set_instrumentmeasurementid(const char* value, size_t size) {
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_instrumentmeasurementid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
  return instrumentmeasurementid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_instrumentmeasurementid() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
  
  return instrumentmeasurementid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_instrumentmeasurementid(::std::string* instrumentmeasurementid) {
  if (instrumentmeasurementid != nullptr) {
    
  } else {
    
  }
  instrumentmeasurementid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentmeasurementid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.instrumentMeasurementId)
}

// string name = 2;
inline void InstrumentMeasurementDefinition::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::name() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
  return name_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
}
#endif
inline void InstrumentMeasurementDefinition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
}
inline void InstrumentMeasurementDefinition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_name() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.name)
}

// string fusionId = 3;
inline void InstrumentMeasurementDefinition::clear_fusionid() {
  fusionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::fusionid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
  return fusionid_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_fusionid(const ::std::string& value) {
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_fusionid(::std::string&& value) {
  
  fusionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
}
#endif
inline void InstrumentMeasurementDefinition::set_fusionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
}
inline void InstrumentMeasurementDefinition::set_fusionid(const char* value, size_t size) {
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_fusionid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
  return fusionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_fusionid() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
  
  return fusionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_fusionid(::std::string* fusionid) {
  if (fusionid != nullptr) {
    
  } else {
    
  }
  fusionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fusionid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.fusionId)
}

// string locationId = 4;
inline void InstrumentMeasurementDefinition::clear_locationid() {
  locationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::locationid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
  return locationid_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_locationid(const ::std::string& value) {
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_locationid(::std::string&& value) {
  
  locationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
}
#endif
inline void InstrumentMeasurementDefinition::set_locationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
}
inline void InstrumentMeasurementDefinition::set_locationid(const char* value, size_t size) {
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_locationid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
  return locationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_locationid() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
  
  return locationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_locationid(::std::string* locationid) {
  if (locationid != nullptr) {
    
  } else {
    
  }
  locationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locationid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.locationId)
}

// uint32 parameterId = 5;
inline void InstrumentMeasurementDefinition::clear_parameterid() {
  parameterid_ = 0u;
}
inline ::google::protobuf::uint32 InstrumentMeasurementDefinition::parameterid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.parameterId)
  return parameterid_;
}
inline void InstrumentMeasurementDefinition::set_parameterid(::google::protobuf::uint32 value) {
  
  parameterid_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.parameterId)
}

// uint32 displayUnitId = 6;
inline void InstrumentMeasurementDefinition::clear_displayunitid() {
  displayunitid_ = 0u;
}
inline ::google::protobuf::uint32 InstrumentMeasurementDefinition::displayunitid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.displayUnitId)
  return displayunitid_;
}
inline void InstrumentMeasurementDefinition::set_displayunitid(::google::protobuf::uint32 value) {
  
  displayunitid_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.displayUnitId)
}

// bool isVisible = 7;
inline void InstrumentMeasurementDefinition::clear_isvisible() {
  isvisible_ = false;
}
inline bool InstrumentMeasurementDefinition::isvisible() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.isVisible)
  return isvisible_;
}
inline void InstrumentMeasurementDefinition::set_isvisible(bool value) {
  
  isvisible_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.isVisible)
}

// .claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;
inline bool InstrumentMeasurementDefinition::has_scsensorbinding() const {
  return binding_case() == kScSensorBinding;
}
inline void InstrumentMeasurementDefinition::set_has_scsensorbinding() {
  _oneof_case_[0] = kScSensorBinding;
}
inline ::claros::instrument::measurement::SCSensorBinding* InstrumentMeasurementDefinition::release_scsensorbinding() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.scSensorBinding)
  if (has_scsensorbinding()) {
    clear_has_binding();
      ::claros::instrument::measurement::SCSensorBinding* temp = binding_.scsensorbinding_;
    binding_.scsensorbinding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::instrument::measurement::SCSensorBinding& InstrumentMeasurementDefinition::scsensorbinding() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.scSensorBinding)
  return has_scsensorbinding()
      ? *binding_.scsensorbinding_
      : *reinterpret_cast< ::claros::instrument::measurement::SCSensorBinding*>(&::claros::instrument::measurement::_SCSensorBinding_default_instance_);
}
inline ::claros::instrument::measurement::SCSensorBinding* InstrumentMeasurementDefinition::mutable_scsensorbinding() {
  if (!has_scsensorbinding()) {
    clear_binding();
    set_has_scsensorbinding();
    binding_.scsensorbinding_ = CreateMaybeMessage< ::claros::instrument::measurement::SCSensorBinding >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.scSensorBinding)
  return binding_.scsensorbinding_;
}

// .claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;
inline bool InstrumentMeasurementDefinition::has_milliampbinding() const {
  return binding_case() == kMilliAmpBinding;
}
inline void InstrumentMeasurementDefinition::set_has_milliampbinding() {
  _oneof_case_[0] = kMilliAmpBinding;
}
inline ::claros::instrument::measurement::MilliAmpBinding* InstrumentMeasurementDefinition::release_milliampbinding() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.milliAmpBinding)
  if (has_milliampbinding()) {
    clear_has_binding();
      ::claros::instrument::measurement::MilliAmpBinding* temp = binding_.milliampbinding_;
    binding_.milliampbinding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::instrument::measurement::MilliAmpBinding& InstrumentMeasurementDefinition::milliampbinding() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.milliAmpBinding)
  return has_milliampbinding()
      ? *binding_.milliampbinding_
      : *reinterpret_cast< ::claros::instrument::measurement::MilliAmpBinding*>(&::claros::instrument::measurement::_MilliAmpBinding_default_instance_);
}
inline ::claros::instrument::measurement::MilliAmpBinding* InstrumentMeasurementDefinition::mutable_milliampbinding() {
  if (!has_milliampbinding()) {
    clear_binding();
    set_has_milliampbinding();
    binding_.milliampbinding_ = CreateMaybeMessage< ::claros::instrument::measurement::MilliAmpBinding >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.milliAmpBinding)
  return binding_.milliampbinding_;
}

// repeated .claros.common.core.Limit limits = 10;
inline int InstrumentMeasurementDefinition::limits_size() const {
  return limits_.size();
}
inline ::claros::common::core::Limit* InstrumentMeasurementDefinition::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.limits)
  return limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >*
InstrumentMeasurementDefinition::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.measurement.InstrumentMeasurementDefinition.limits)
  return &limits_;
}
inline const ::claros::common::core::Limit& InstrumentMeasurementDefinition::limits(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.limits)
  return limits_.Get(index);
}
inline ::claros::common::core::Limit* InstrumentMeasurementDefinition::add_limits() {
  // @@protoc_insertion_point(field_add:claros.instrument.measurement.InstrumentMeasurementDefinition.limits)
  return limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >&
InstrumentMeasurementDefinition::limits() const {
  // @@protoc_insertion_point(field_list:claros.instrument.measurement.InstrumentMeasurementDefinition.limits)
  return limits_;
}

// string createdById = 11;
inline void InstrumentMeasurementDefinition::clear_createdbyid() {
  createdbyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::createdbyid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
  return createdbyid_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_createdbyid(const ::std::string& value) {
  
  createdbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_createdbyid(::std::string&& value) {
  
  createdbyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
}
#endif
inline void InstrumentMeasurementDefinition::set_createdbyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
}
inline void InstrumentMeasurementDefinition::set_createdbyid(const char* value, size_t size) {
  
  createdbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_createdbyid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
  return createdbyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_createdbyid() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
  
  return createdbyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_createdbyid(::std::string* createdbyid) {
  if (createdbyid != nullptr) {
    
  } else {
    
  }
  createdbyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createdbyid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.createdById)
}

// .claros.common.core.ClarosDateTime createdOn = 12;
inline bool InstrumentMeasurementDefinition::has_createdon() const {
  return this != internal_default_instance() && createdon_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& InstrumentMeasurementDefinition::createdon() const {
  const ::claros::common::core::ClarosDateTime* p = createdon_;
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.createdOn)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* InstrumentMeasurementDefinition::release_createdon() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.createdOn)
  
  ::claros::common::core::ClarosDateTime* temp = createdon_;
  createdon_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* InstrumentMeasurementDefinition::mutable_createdon() {
  
  if (createdon_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    createdon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.createdOn)
  return createdon_;
}
inline void InstrumentMeasurementDefinition::set_allocated_createdon(::claros::common::core::ClarosDateTime* createdon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(createdon_);
  }
  if (createdon) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      createdon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, createdon, submessage_arena);
    }
    
  } else {
    
  }
  createdon_ = createdon;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.createdOn)
}

// string modifiedById = 13;
inline void InstrumentMeasurementDefinition::clear_modifiedbyid() {
  modifiedbyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurementDefinition::modifiedbyid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
  return modifiedbyid_.GetNoArena();
}
inline void InstrumentMeasurementDefinition::set_modifiedbyid(const ::std::string& value) {
  
  modifiedbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
}
#if LANG_CXX11
inline void InstrumentMeasurementDefinition::set_modifiedbyid(::std::string&& value) {
  
  modifiedbyid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
}
#endif
inline void InstrumentMeasurementDefinition::set_modifiedbyid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifiedbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
}
inline void InstrumentMeasurementDefinition::set_modifiedbyid(const char* value, size_t size) {
  
  modifiedbyid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
}
inline ::std::string* InstrumentMeasurementDefinition::mutable_modifiedbyid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
  return modifiedbyid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurementDefinition::release_modifiedbyid() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
  
  return modifiedbyid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurementDefinition::set_allocated_modifiedbyid(::std::string* modifiedbyid) {
  if (modifiedbyid != nullptr) {
    
  } else {
    
  }
  modifiedbyid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modifiedbyid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedById)
}

// .claros.common.core.ClarosDateTime modifiedOn = 14;
inline bool InstrumentMeasurementDefinition::has_modifiedon() const {
  return this != internal_default_instance() && modifiedon_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& InstrumentMeasurementDefinition::modifiedon() const {
  const ::claros::common::core::ClarosDateTime* p = modifiedon_;
  // @@protoc_insertion_point(field_get:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedOn)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* InstrumentMeasurementDefinition::release_modifiedon() {
  // @@protoc_insertion_point(field_release:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedOn)
  
  ::claros::common::core::ClarosDateTime* temp = modifiedon_;
  modifiedon_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* InstrumentMeasurementDefinition::mutable_modifiedon() {
  
  if (modifiedon_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    modifiedon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedOn)
  return modifiedon_;
}
inline void InstrumentMeasurementDefinition::set_allocated_modifiedon(::claros::common::core::ClarosDateTime* modifiedon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(modifiedon_);
  }
  if (modifiedon) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modifiedon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, modifiedon, submessage_arena);
    }
    
  } else {
    
  }
  modifiedon_ = modifiedon;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.measurement.InstrumentMeasurementDefinition.modifiedOn)
}

inline bool InstrumentMeasurementDefinition::has_binding() const {
  return binding_case() != BINDING_NOT_SET;
}
inline void InstrumentMeasurementDefinition::clear_has_binding() {
  _oneof_case_[0] = BINDING_NOT_SET;
}
inline InstrumentMeasurementDefinition::BindingCase InstrumentMeasurementDefinition::binding_case() const {
  return InstrumentMeasurementDefinition::BindingCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace measurement
}  // namespace instrument
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_5fdefinition_2eproto
