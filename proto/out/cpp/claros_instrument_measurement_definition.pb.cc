// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_definition.proto

#include "claros_instrument_measurement_definition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fclarosdatetime_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5flimit_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_5fmilliamp_5fbinding_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MilliAmpBinding_claros_5finstrument_5fmeasurement_5fmilliamp_5fbinding_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_5fscsensor_5fbinding_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SCSensorBinding_claros_5finstrument_5fmeasurement_5fscsensor_5fbinding_2eproto;
namespace claros {
namespace instrument {
class InstrumentMeasurementDefinitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InstrumentMeasurementDefinition> _instance;
  const ::claros::instrument::SCSensorBinding* scsensorbinding_;
  const ::claros::instrument::MilliAmpBinding* milliampbinding_;
} _InstrumentMeasurementDefinition_default_instance_;
}  // namespace instrument
}  // namespace claros
static void InitDefaultsInstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::instrument::_InstrumentMeasurementDefinition_default_instance_;
    new (ptr) ::claros::instrument::InstrumentMeasurementDefinition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::instrument::InstrumentMeasurementDefinition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_InstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsInstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto}, {
      &scc_info_SCSensorBinding_claros_5finstrument_5fmeasurement_5fscsensor_5fbinding_2eproto.base,
      &scc_info_MilliAmpBinding_claros_5finstrument_5fmeasurement_5fmilliamp_5fbinding_2eproto.base,
      &scc_info_Limit_claros_5fcommon_5fcore_5flimit_2eproto.base,
      &scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto.base,}};

void InitDefaults_claros_5finstrument_5fmeasurement_5fdefinition_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5finstrument_5fmeasurement_5fdefinition_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5finstrument_5fmeasurement_5fdefinition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, instrumentmeasurementid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, name_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, fusionid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, locationid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, parameterid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, displayunitid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, isvisible_),
  offsetof(::claros::instrument::InstrumentMeasurementDefinitionDefaultTypeInternal, scsensorbinding_),
  offsetof(::claros::instrument::InstrumentMeasurementDefinitionDefaultTypeInternal, milliampbinding_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, limits_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, createdbyid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, createdon_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, modifiedbyid_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, modifiedon_),
  PROTOBUF_FIELD_OFFSET(::claros::instrument::InstrumentMeasurementDefinition, binding_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::instrument::InstrumentMeasurementDefinition)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::instrument::_InstrumentMeasurementDefinition_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdefinition_2eproto = {
  {}, AddDescriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, "claros_instrument_measurement_definition.proto", schemas,
  file_default_instances, TableStruct_claros_5finstrument_5fmeasurement_5fdefinition_2eproto::offsets,
  file_level_metadata_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, 1, file_level_enum_descriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, file_level_service_descriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto,
};

const char descriptor_table_protodef_claros_5finstrument_5fmeasurement_5fdefinition_2eproto[] =
  "\n.claros_instrument_measurement_definiti"
  "on.proto\022\021claros.instrument\032\'claros_comm"
  "on_core_clarosdatetime.proto\0324claros_ins"
  "trument_measurement_milliamp_binding.pro"
  "to\0324claros_instrument_measurement_scsens"
  "or_binding.proto\032\036claros_common_core_lim"
  "it.proto\"\203\004\n\037InstrumentMeasurementDefini"
  "tion\022\037\n\027instrumentMeasurementId\030\001 \001(\t\022\014\n"
  "\004name\030\002 \001(\t\022\020\n\010fusionId\030\003 \001(\t\022\022\n\nlocatio"
  "nId\030\004 \001(\t\022\023\n\013parameterId\030\005 \001(\r\022\025\n\rdispla"
  "yUnitId\030\006 \001(\r\022\021\n\tisVisible\030\007 \001(\010\022=\n\017scSe"
  "nsorBinding\030\010 \001(\0132\".claros.instrument.SC"
  "SensorBindingH\000\022=\n\017milliAmpBinding\030\t \001(\013"
  "2\".claros.instrument.MilliAmpBindingH\000\022)"
  "\n\006limits\030\n \003(\0132\031.claros.common.core.Limi"
  "t\022\023\n\013createdById\030\013 \001(\t\0225\n\tcreatedOn\030\014 \001("
  "\0132\".claros.common.core.ClarosDateTime\022\024\n"
  "\014modifiedById\030\r \001(\t\0226\n\nmodifiedOn\030\016 \001(\0132"
  "\".claros.common.core.ClarosDateTimeB\t\n\007b"
  "indingb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5finstrument_5fmeasurement_5fdefinition_2eproto = {
  false, InitDefaults_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, 
  descriptor_table_protodef_claros_5finstrument_5fmeasurement_5fdefinition_2eproto,
  "claros_instrument_measurement_definition.proto", &assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, 774,
};

void AddDescriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto,
    ::AddDescriptors_claros_5finstrument_5fmeasurement_5fmilliamp_5fbinding_2eproto,
    ::AddDescriptors_claros_5finstrument_5fmeasurement_5fscsensor_5fbinding_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5flimit_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5finstrument_5fmeasurement_5fdefinition_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5finstrument_5fmeasurement_5fdefinition_2eproto = []() { AddDescriptors_claros_5finstrument_5fmeasurement_5fdefinition_2eproto(); return true; }();
namespace claros {
namespace instrument {

// ===================================================================

void InstrumentMeasurementDefinition::InitAsDefaultInstance() {
  ::claros::instrument::_InstrumentMeasurementDefinition_default_instance_.scsensorbinding_ = const_cast< ::claros::instrument::SCSensorBinding*>(
      ::claros::instrument::SCSensorBinding::internal_default_instance());
  ::claros::instrument::_InstrumentMeasurementDefinition_default_instance_.milliampbinding_ = const_cast< ::claros::instrument::MilliAmpBinding*>(
      ::claros::instrument::MilliAmpBinding::internal_default_instance());
  ::claros::instrument::_InstrumentMeasurementDefinition_default_instance_._instance.get_mutable()->createdon_ = const_cast< ::claros::common::core::ClarosDateTime*>(
      ::claros::common::core::ClarosDateTime::internal_default_instance());
  ::claros::instrument::_InstrumentMeasurementDefinition_default_instance_._instance.get_mutable()->modifiedon_ = const_cast< ::claros::common::core::ClarosDateTime*>(
      ::claros::common::core::ClarosDateTime::internal_default_instance());
}
class InstrumentMeasurementDefinition::HasBitSetters {
 public:
  static const ::claros::instrument::SCSensorBinding& scsensorbinding(const InstrumentMeasurementDefinition* msg);
  static const ::claros::instrument::MilliAmpBinding& milliampbinding(const InstrumentMeasurementDefinition* msg);
  static const ::claros::common::core::ClarosDateTime& createdon(const InstrumentMeasurementDefinition* msg);
  static const ::claros::common::core::ClarosDateTime& modifiedon(const InstrumentMeasurementDefinition* msg);
};

const ::claros::instrument::SCSensorBinding&
InstrumentMeasurementDefinition::HasBitSetters::scsensorbinding(const InstrumentMeasurementDefinition* msg) {
  return *msg->binding_.scsensorbinding_;
}
const ::claros::instrument::MilliAmpBinding&
InstrumentMeasurementDefinition::HasBitSetters::milliampbinding(const InstrumentMeasurementDefinition* msg) {
  return *msg->binding_.milliampbinding_;
}
const ::claros::common::core::ClarosDateTime&
InstrumentMeasurementDefinition::HasBitSetters::createdon(const InstrumentMeasurementDefinition* msg) {
  return *msg->createdon_;
}
const ::claros::common::core::ClarosDateTime&
InstrumentMeasurementDefinition::HasBitSetters::modifiedon(const InstrumentMeasurementDefinition* msg) {
  return *msg->modifiedon_;
}
void InstrumentMeasurementDefinition::set_allocated_scsensorbinding(::claros::instrument::SCSensorBinding* scsensorbinding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_binding();
  if (scsensorbinding) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scsensorbinding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scsensorbinding, submessage_arena);
    }
    set_has_scsensorbinding();
    binding_.scsensorbinding_ = scsensorbinding;
  }
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurementDefinition.scSensorBinding)
}
void InstrumentMeasurementDefinition::clear_scsensorbinding() {
  if (has_scsensorbinding()) {
    delete binding_.scsensorbinding_;
    clear_has_binding();
  }
}
void InstrumentMeasurementDefinition::set_allocated_milliampbinding(::claros::instrument::MilliAmpBinding* milliampbinding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_binding();
  if (milliampbinding) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      milliampbinding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, milliampbinding, submessage_arena);
    }
    set_has_milliampbinding();
    binding_.milliampbinding_ = milliampbinding;
  }
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurementDefinition.milliAmpBinding)
}
void InstrumentMeasurementDefinition::clear_milliampbinding() {
  if (has_milliampbinding()) {
    delete binding_.milliampbinding_;
    clear_has_binding();
  }
}
void InstrumentMeasurementDefinition::clear_limits() {
  limits_.Clear();
}
void InstrumentMeasurementDefinition::clear_createdon() {
  if (GetArenaNoVirtual() == nullptr && createdon_ != nullptr) {
    delete createdon_;
  }
  createdon_ = nullptr;
}
void InstrumentMeasurementDefinition::clear_modifiedon() {
  if (GetArenaNoVirtual() == nullptr && modifiedon_ != nullptr) {
    delete modifiedon_;
  }
  modifiedon_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstrumentMeasurementDefinition::kInstrumentMeasurementIdFieldNumber;
const int InstrumentMeasurementDefinition::kNameFieldNumber;
const int InstrumentMeasurementDefinition::kFusionIdFieldNumber;
const int InstrumentMeasurementDefinition::kLocationIdFieldNumber;
const int InstrumentMeasurementDefinition::kParameterIdFieldNumber;
const int InstrumentMeasurementDefinition::kDisplayUnitIdFieldNumber;
const int InstrumentMeasurementDefinition::kIsVisibleFieldNumber;
const int InstrumentMeasurementDefinition::kScSensorBindingFieldNumber;
const int InstrumentMeasurementDefinition::kMilliAmpBindingFieldNumber;
const int InstrumentMeasurementDefinition::kLimitsFieldNumber;
const int InstrumentMeasurementDefinition::kCreatedByIdFieldNumber;
const int InstrumentMeasurementDefinition::kCreatedOnFieldNumber;
const int InstrumentMeasurementDefinition::kModifiedByIdFieldNumber;
const int InstrumentMeasurementDefinition::kModifiedOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstrumentMeasurementDefinition::InstrumentMeasurementDefinition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.instrument.InstrumentMeasurementDefinition)
}
InstrumentMeasurementDefinition::InstrumentMeasurementDefinition(const InstrumentMeasurementDefinition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      limits_(from.limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instrumentmeasurementid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instrumentmeasurementid().size() > 0) {
    instrumentmeasurementid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentmeasurementid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fusionid().size() > 0) {
    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  locationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.locationid().size() > 0) {
    locationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locationid_);
  }
  createdbyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createdbyid().size() > 0) {
    createdbyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdbyid_);
  }
  modifiedbyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modifiedbyid().size() > 0) {
    modifiedbyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedbyid_);
  }
  if (from.has_createdon()) {
    createdon_ = new ::claros::common::core::ClarosDateTime(*from.createdon_);
  } else {
    createdon_ = nullptr;
  }
  if (from.has_modifiedon()) {
    modifiedon_ = new ::claros::common::core::ClarosDateTime(*from.modifiedon_);
  } else {
    modifiedon_ = nullptr;
  }
  ::memcpy(&parameterid_, &from.parameterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvisible_) -
    reinterpret_cast<char*>(&parameterid_)) + sizeof(isvisible_));
  clear_has_binding();
  switch (from.binding_case()) {
    case kScSensorBinding: {
      mutable_scsensorbinding()->::claros::instrument::SCSensorBinding::MergeFrom(from.scsensorbinding());
      break;
    }
    case kMilliAmpBinding: {
      mutable_milliampbinding()->::claros::instrument::MilliAmpBinding::MergeFrom(from.milliampbinding());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:claros.instrument.InstrumentMeasurementDefinition)
}

void InstrumentMeasurementDefinition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto.base);
  instrumentmeasurementid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locationid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdbyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedbyid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&createdon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvisible_) -
      reinterpret_cast<char*>(&createdon_)) + sizeof(isvisible_));
  clear_has_binding();
}

InstrumentMeasurementDefinition::~InstrumentMeasurementDefinition() {
  // @@protoc_insertion_point(destructor:claros.instrument.InstrumentMeasurementDefinition)
  SharedDtor();
}

void InstrumentMeasurementDefinition::SharedDtor() {
  instrumentmeasurementid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locationid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdbyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedbyid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete createdon_;
  if (this != internal_default_instance()) delete modifiedon_;
  if (has_binding()) {
    clear_binding();
  }
}

void InstrumentMeasurementDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentMeasurementDefinition& InstrumentMeasurementDefinition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InstrumentMeasurementDefinition_claros_5finstrument_5fmeasurement_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void InstrumentMeasurementDefinition::clear_binding() {
// @@protoc_insertion_point(one_of_clear_start:claros.instrument.InstrumentMeasurementDefinition)
  switch (binding_case()) {
    case kScSensorBinding: {
      delete binding_.scsensorbinding_;
      break;
    }
    case kMilliAmpBinding: {
      delete binding_.milliampbinding_;
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BINDING_NOT_SET;
}


void InstrumentMeasurementDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.instrument.InstrumentMeasurementDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_.Clear();
  instrumentmeasurementid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fusionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  createdbyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modifiedbyid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && createdon_ != nullptr) {
    delete createdon_;
  }
  createdon_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && modifiedon_ != nullptr) {
    delete modifiedon_;
  }
  modifiedon_ = nullptr;
  ::memset(&parameterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvisible_) -
      reinterpret_cast<char*>(&parameterid_)) + sizeof(isvisible_));
  clear_binding();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InstrumentMeasurementDefinition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InstrumentMeasurementDefinition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string instrumentMeasurementId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.instrumentMeasurementId");
        object = msg->mutable_instrumentmeasurementid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string fusionId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.fusionId");
        object = msg->mutable_fusionid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string locationId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.locationId");
        object = msg->mutable_locationid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 parameterId = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_parameterid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 displayUnitId = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_displayunitid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool isVisible = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_isvisible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .claros.instrument.SCSensorBinding scSensorBinding = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::SCSensorBinding::_InternalParse;
        object = msg->mutable_scsensorbinding();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.instrument.MilliAmpBinding milliAmpBinding = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::MilliAmpBinding::_InternalParse;
        object = msg->mutable_milliampbinding();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .claros.common.core.Limit limits = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::common::core::Limit::_InternalParse;
          object = msg->add_limits();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 82 && (ptr += 1));
        break;
      }
      // string createdById = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.createdById");
        object = msg->mutable_createdbyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.common.core.ClarosDateTime createdOn = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::ClarosDateTime::_InternalParse;
        object = msg->mutable_createdon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string modifiedById = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.instrument.InstrumentMeasurementDefinition.modifiedById");
        object = msg->mutable_modifiedbyid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.common.core.ClarosDateTime modifiedOn = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::ClarosDateTime::_InternalParse;
        object = msg->mutable_modifiedon();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InstrumentMeasurementDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.instrument.InstrumentMeasurementDefinition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string instrumentMeasurementId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentmeasurementid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.instrumentMeasurementId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fusionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fusionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fusionid().data(), static_cast<int>(this->fusionid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.fusionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string locationId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->locationid().data(), static_cast<int>(this->locationid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.locationId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parameterId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 displayUnitId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displayunitid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isVisible = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.SCSensorBinding scSensorBinding = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scsensorbinding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.MilliAmpBinding milliAmpBinding = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_milliampbinding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.common.core.Limit limits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createdById = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdbyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createdbyid().data(), static_cast<int>(this->createdbyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.createdById"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.ClarosDateTime createdOn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_createdon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string modifiedById = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifiedbyid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modifiedbyid().data(), static_cast<int>(this->modifiedbyid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.instrument.InstrumentMeasurementDefinition.modifiedById"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.ClarosDateTime modifiedOn = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_modifiedon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.instrument.InstrumentMeasurementDefinition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.instrument.InstrumentMeasurementDefinition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InstrumentMeasurementDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.instrument.InstrumentMeasurementDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.instrumentMeasurementId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instrumentmeasurementid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.fusionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fusionid(), output);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.locationId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locationid(), output);
  }

  // uint32 parameterId = 5;
  if (this->parameterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parameterid(), output);
  }

  // uint32 displayUnitId = 6;
  if (this->displayunitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->displayunitid(), output);
  }

  // bool isVisible = 7;
  if (this->isvisible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isvisible(), output);
  }

  // .claros.instrument.SCSensorBinding scSensorBinding = 8;
  if (has_scsensorbinding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::scsensorbinding(this), output);
  }

  // .claros.instrument.MilliAmpBinding milliAmpBinding = 9;
  if (has_milliampbinding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::milliampbinding(this), output);
  }

  // repeated .claros.common.core.Limit limits = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->limits(static_cast<int>(i)),
      output);
  }

  // string createdById = 11;
  if (this->createdbyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdbyid().data(), static_cast<int>(this->createdbyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.createdById");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->createdbyid(), output);
  }

  // .claros.common.core.ClarosDateTime createdOn = 12;
  if (this->has_createdon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::createdon(this), output);
  }

  // string modifiedById = 13;
  if (this->modifiedbyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedbyid().data(), static_cast<int>(this->modifiedbyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.modifiedById");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->modifiedbyid(), output);
  }

  // .claros.common.core.ClarosDateTime modifiedOn = 14;
  if (this->has_modifiedon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::modifiedon(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.instrument.InstrumentMeasurementDefinition)
}

::google::protobuf::uint8* InstrumentMeasurementDefinition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.instrument.InstrumentMeasurementDefinition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instrumentmeasurementid().data(), static_cast<int>(this->instrumentmeasurementid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.instrumentMeasurementId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentmeasurementid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fusionid().data(), static_cast<int>(this->fusionid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.fusionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fusionid(), target);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.locationId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->locationid(), target);
  }

  // uint32 parameterId = 5;
  if (this->parameterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parameterid(), target);
  }

  // uint32 displayUnitId = 6;
  if (this->displayunitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->displayunitid(), target);
  }

  // bool isVisible = 7;
  if (this->isvisible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isvisible(), target);
  }

  // .claros.instrument.SCSensorBinding scSensorBinding = 8;
  if (has_scsensorbinding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::scsensorbinding(this), target);
  }

  // .claros.instrument.MilliAmpBinding milliAmpBinding = 9;
  if (has_milliampbinding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::milliampbinding(this), target);
  }

  // repeated .claros.common.core.Limit limits = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->limits(static_cast<int>(i)), target);
  }

  // string createdById = 11;
  if (this->createdbyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createdbyid().data(), static_cast<int>(this->createdbyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.createdById");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->createdbyid(), target);
  }

  // .claros.common.core.ClarosDateTime createdOn = 12;
  if (this->has_createdon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::createdon(this), target);
  }

  // string modifiedById = 13;
  if (this->modifiedbyid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modifiedbyid().data(), static_cast<int>(this->modifiedbyid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.instrument.InstrumentMeasurementDefinition.modifiedById");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->modifiedbyid(), target);
  }

  // .claros.common.core.ClarosDateTime modifiedOn = 14;
  if (this->has_modifiedon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::modifiedon(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.instrument.InstrumentMeasurementDefinition)
  return target;
}

size_t InstrumentMeasurementDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.instrument.InstrumentMeasurementDefinition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.common.core.Limit limits = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->limits(static_cast<int>(i)));
    }
  }

  // string instrumentMeasurementId = 1;
  if (this->instrumentmeasurementid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instrumentmeasurementid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string fusionId = 3;
  if (this->fusionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fusionid());
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->locationid());
  }

  // string createdById = 11;
  if (this->createdbyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createdbyid());
  }

  // string modifiedById = 13;
  if (this->modifiedbyid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modifiedbyid());
  }

  // .claros.common.core.ClarosDateTime createdOn = 12;
  if (this->has_createdon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *createdon_);
  }

  // .claros.common.core.ClarosDateTime modifiedOn = 14;
  if (this->has_modifiedon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *modifiedon_);
  }

  // uint32 parameterId = 5;
  if (this->parameterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parameterid());
  }

  // uint32 displayUnitId = 6;
  if (this->displayunitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->displayunitid());
  }

  // bool isVisible = 7;
  if (this->isvisible() != 0) {
    total_size += 1 + 1;
  }

  switch (binding_case()) {
    // .claros.instrument.SCSensorBinding scSensorBinding = 8;
    case kScSensorBinding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *binding_.scsensorbinding_);
      break;
    }
    // .claros.instrument.MilliAmpBinding milliAmpBinding = 9;
    case kMilliAmpBinding: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *binding_.milliampbinding_);
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentMeasurementDefinition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.instrument.InstrumentMeasurementDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentMeasurementDefinition* source =
      ::google::protobuf::DynamicCastToGenerated<InstrumentMeasurementDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.instrument.InstrumentMeasurementDefinition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.instrument.InstrumentMeasurementDefinition)
    MergeFrom(*source);
  }
}

void InstrumentMeasurementDefinition::MergeFrom(const InstrumentMeasurementDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.instrument.InstrumentMeasurementDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_.MergeFrom(from.limits_);
  if (from.instrumentmeasurementid().size() > 0) {

    instrumentmeasurementid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instrumentmeasurementid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.fusionid().size() > 0) {

    fusionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusionid_);
  }
  if (from.locationid().size() > 0) {

    locationid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.locationid_);
  }
  if (from.createdbyid().size() > 0) {

    createdbyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createdbyid_);
  }
  if (from.modifiedbyid().size() > 0) {

    modifiedbyid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modifiedbyid_);
  }
  if (from.has_createdon()) {
    mutable_createdon()->::claros::common::core::ClarosDateTime::MergeFrom(from.createdon());
  }
  if (from.has_modifiedon()) {
    mutable_modifiedon()->::claros::common::core::ClarosDateTime::MergeFrom(from.modifiedon());
  }
  if (from.parameterid() != 0) {
    set_parameterid(from.parameterid());
  }
  if (from.displayunitid() != 0) {
    set_displayunitid(from.displayunitid());
  }
  if (from.isvisible() != 0) {
    set_isvisible(from.isvisible());
  }
  switch (from.binding_case()) {
    case kScSensorBinding: {
      mutable_scsensorbinding()->::claros::instrument::SCSensorBinding::MergeFrom(from.scsensorbinding());
      break;
    }
    case kMilliAmpBinding: {
      mutable_milliampbinding()->::claros::instrument::MilliAmpBinding::MergeFrom(from.milliampbinding());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
}

void InstrumentMeasurementDefinition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.instrument.InstrumentMeasurementDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentMeasurementDefinition::CopyFrom(const InstrumentMeasurementDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.instrument.InstrumentMeasurementDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentMeasurementDefinition::IsInitialized() const {
  return true;
}

void InstrumentMeasurementDefinition::Swap(InstrumentMeasurementDefinition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstrumentMeasurementDefinition::InternalSwap(InstrumentMeasurementDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&limits_)->InternalSwap(CastToBase(&other->limits_));
  instrumentmeasurementid_.Swap(&other->instrumentmeasurementid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fusionid_.Swap(&other->fusionid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locationid_.Swap(&other->locationid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  createdbyid_.Swap(&other->createdbyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modifiedbyid_.Swap(&other->modifiedbyid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(createdon_, other->createdon_);
  swap(modifiedon_, other->modifiedon_);
  swap(parameterid_, other->parameterid_);
  swap(displayunitid_, other->displayunitid_);
  swap(isvisible_, other->isvisible_);
  swap(binding_, other->binding_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata InstrumentMeasurementDefinition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5finstrument_5fmeasurement_5fdefinition_2eproto);
  return ::file_level_metadata_claros_5finstrument_5fmeasurement_5fdefinition_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::instrument::InstrumentMeasurementDefinition* Arena::CreateMaybeMessage< ::claros::instrument::InstrumentMeasurementDefinition >(Arena* arena) {
  return Arena::CreateInternal< ::claros::instrument::InstrumentMeasurementDefinition >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
