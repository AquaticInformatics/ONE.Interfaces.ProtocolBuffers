// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_spreadsheet_definition.proto

#ifndef PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto
#define PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_timewindow.pb.h"
#include "claros_common_core_timezone.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto();
namespace claros {
namespace operations {
namespace spreadsheet {
class SpreadsheetDefinition;
class SpreadsheetDefinitionDefaultTypeInternal;
extern SpreadsheetDefinitionDefaultTypeInternal _SpreadsheetDefinition_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::operations::spreadsheet::SpreadsheetDefinition* Arena::CreateMaybeMessage<::claros::operations::spreadsheet::SpreadsheetDefinition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

class SpreadsheetDefinition :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.operations.spreadsheet.SpreadsheetDefinition) */ {
 public:
  SpreadsheetDefinition();
  virtual ~SpreadsheetDefinition();

  SpreadsheetDefinition(const SpreadsheetDefinition& from);

  inline SpreadsheetDefinition& operator=(const SpreadsheetDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpreadsheetDefinition(SpreadsheetDefinition&& from) noexcept
    : SpreadsheetDefinition() {
    *this = ::std::move(from);
  }

  inline SpreadsheetDefinition& operator=(SpreadsheetDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SpreadsheetDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpreadsheetDefinition* internal_default_instance() {
    return reinterpret_cast<const SpreadsheetDefinition*>(
               &_SpreadsheetDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SpreadsheetDefinition* other);
  friend void swap(SpreadsheetDefinition& a, SpreadsheetDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpreadsheetDefinition* New() const final {
    return CreateMaybeMessage<SpreadsheetDefinition>(nullptr);
  }

  SpreadsheetDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpreadsheetDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpreadsheetDefinition& from);
  void MergeFrom(const SpreadsheetDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpreadsheetDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .claros.common.core.TimeWindow timewindow = 2;
  bool has_timewindow() const;
  void clear_timewindow();
  static const int kTimewindowFieldNumber = 2;
  const ::claros::common::core::TimeWindow& timewindow() const;
  ::claros::common::core::TimeWindow* release_timewindow();
  ::claros::common::core::TimeWindow* mutable_timewindow();
  void set_allocated_timewindow(::claros::common::core::TimeWindow* timewindow);

  // .claros.common.core.TimeZone timezone = 3;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 3;
  ::claros::common::core::TimeZone timezone() const;
  void set_timezone(::claros::common::core::TimeZone value);

  // uint32 timeWindowOffset = 4;
  void clear_timewindowoffset();
  static const int kTimeWindowOffsetFieldNumber = 4;
  ::google::protobuf::uint32 timewindowoffset() const;
  void set_timewindowoffset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.operations.spreadsheet.SpreadsheetDefinition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::claros::common::core::TimeWindow* timewindow_;
  int timezone_;
  ::google::protobuf::uint32 timewindowoffset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpreadsheetDefinition

// string version = 1;
inline void SpreadsheetDefinition::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SpreadsheetDefinition::version() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.SpreadsheetDefinition.version)
  return version_.GetNoArena();
}
inline void SpreadsheetDefinition::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.SpreadsheetDefinition.version)
}
#if LANG_CXX11
inline void SpreadsheetDefinition::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.SpreadsheetDefinition.version)
}
#endif
inline void SpreadsheetDefinition::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.SpreadsheetDefinition.version)
}
inline void SpreadsheetDefinition::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.SpreadsheetDefinition.version)
}
inline ::std::string* SpreadsheetDefinition::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.SpreadsheetDefinition.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SpreadsheetDefinition::release_version() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.SpreadsheetDefinition.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SpreadsheetDefinition::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.SpreadsheetDefinition.version)
}

// .claros.common.core.TimeWindow timewindow = 2;
inline bool SpreadsheetDefinition::has_timewindow() const {
  return this != internal_default_instance() && timewindow_ != nullptr;
}
inline const ::claros::common::core::TimeWindow& SpreadsheetDefinition::timewindow() const {
  const ::claros::common::core::TimeWindow* p = timewindow_;
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.SpreadsheetDefinition.timewindow)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::TimeWindow*>(
      &::claros::common::core::_TimeWindow_default_instance_);
}
inline ::claros::common::core::TimeWindow* SpreadsheetDefinition::release_timewindow() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.SpreadsheetDefinition.timewindow)
  
  ::claros::common::core::TimeWindow* temp = timewindow_;
  timewindow_ = nullptr;
  return temp;
}
inline ::claros::common::core::TimeWindow* SpreadsheetDefinition::mutable_timewindow() {
  
  if (timewindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::TimeWindow>(GetArenaNoVirtual());
    timewindow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.SpreadsheetDefinition.timewindow)
  return timewindow_;
}
inline void SpreadsheetDefinition::set_allocated_timewindow(::claros::common::core::TimeWindow* timewindow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timewindow_);
  }
  if (timewindow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timewindow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timewindow, submessage_arena);
    }
    
  } else {
    
  }
  timewindow_ = timewindow;
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.SpreadsheetDefinition.timewindow)
}

// .claros.common.core.TimeZone timezone = 3;
inline void SpreadsheetDefinition::clear_timezone() {
  timezone_ = 0;
}
inline ::claros::common::core::TimeZone SpreadsheetDefinition::timezone() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.SpreadsheetDefinition.timezone)
  return static_cast< ::claros::common::core::TimeZone >(timezone_);
}
inline void SpreadsheetDefinition::set_timezone(::claros::common::core::TimeZone value) {
  
  timezone_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.SpreadsheetDefinition.timezone)
}

// uint32 timeWindowOffset = 4;
inline void SpreadsheetDefinition::clear_timewindowoffset() {
  timewindowoffset_ = 0u;
}
inline ::google::protobuf::uint32 SpreadsheetDefinition::timewindowoffset() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.SpreadsheetDefinition.timeWindowOffset)
  return timewindowoffset_;
}
inline void SpreadsheetDefinition::set_timewindowoffset(::google::protobuf::uint32 value) {
  
  timewindowoffset_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.SpreadsheetDefinition.timeWindowOffset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fspreadsheet_5fdefinition_2eproto
