// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_celldata.proto

#include "claros_operations_spreadsheet_worksheet_celldata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fauditevent_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AuditEvent_claros_5fcommon_5fcore_5fauditevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5freportablequalifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReportableQualifier_claros_5fcommon_5fcore_5freportablequalifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_5fbinding_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_CellDataBinding_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_5fbinding_2eproto;
namespace claros {
namespace operations {
namespace spreadsheet {
class CellDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CellData> _instance;
} _CellData_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
static void InitDefaultsCellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::operations::spreadsheet::_CellData_default_instance_;
    new (ptr) ::claros::operations::spreadsheet::CellData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::operations::spreadsheet::CellData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto}, {
      &scc_info_ReportableQualifier_claros_5fcommon_5fcore_5freportablequalifier_2eproto.base,
      &scc_info_CellDataBinding_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_5fbinding_2eproto.base,
      &scc_info_AuditEvent_claros_5fcommon_5fcore_5fauditevent_2eproto.base,}};

void InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, value_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, stringvalue_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, islocked_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, unitid_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, justification_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, reportablequalifier_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, celldatabindings_),
  PROTOBUF_FIELD_OFFSET(::claros::operations::spreadsheet::CellData, auditevent_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::operations::spreadsheet::CellData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::operations::spreadsheet::_CellData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto = {
  {}, AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, "claros_operations_spreadsheet_worksheet_celldata.proto", schemas,
  file_default_instances, TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto::offsets,
  file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, 1, file_level_enum_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, file_level_service_descriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto,
};

const char descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto[] =
  "\n6claros_operations_spreadsheet_workshee"
  "t_celldata.proto\022\035claros.operations.spre"
  "adsheet\032,claros_common_core_reportablequ"
  "alifier.proto\032>claros_operations_spreads"
  "heet_worksheet_celldata_binding.proto\032#c"
  "laros_common_core_auditevent.proto\"\253\002\n\010C"
  "ellData\022\r\n\005value\030\001 \001(\001\022\023\n\013stringValue\030\002 "
  "\001(\t\022\020\n\010isLocked\030\003 \001(\010\022\016\n\006unitId\030\004 \001(\r\022\025\n"
  "\rjustification\030\005 \001(\t\022D\n\023reportableQualif"
  "ier\030\006 \001(\0132\'.claros.common.core.Reportabl"
  "eQualifier\022H\n\020cellDataBindings\030\007 \003(\0132..c"
  "laros.operations.spreadsheet.CellDataBin"
  "ding\0222\n\nauditEvent\030c \001(\0132\036.claros.common"
  ".core.AuditEventb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto = {
  false, InitDefaults_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, 
  descriptor_table_protodef_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto,
  "claros_operations_spreadsheet_worksheet_celldata.proto", &assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, 544,
};

void AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5freportablequalifier_2eproto,
    ::AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_5fbinding_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5fauditevent_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto = []() { AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto(); return true; }();
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

void CellData::InitAsDefaultInstance() {
  ::claros::operations::spreadsheet::_CellData_default_instance_._instance.get_mutable()->reportablequalifier_ = const_cast< ::claros::common::core::ReportableQualifier*>(
      ::claros::common::core::ReportableQualifier::internal_default_instance());
  ::claros::operations::spreadsheet::_CellData_default_instance_._instance.get_mutable()->auditevent_ = const_cast< ::claros::common::core::AuditEvent*>(
      ::claros::common::core::AuditEvent::internal_default_instance());
}
class CellData::HasBitSetters {
 public:
  static const ::claros::common::core::ReportableQualifier& reportablequalifier(const CellData* msg);
  static const ::claros::common::core::AuditEvent& auditevent(const CellData* msg);
};

const ::claros::common::core::ReportableQualifier&
CellData::HasBitSetters::reportablequalifier(const CellData* msg) {
  return *msg->reportablequalifier_;
}
const ::claros::common::core::AuditEvent&
CellData::HasBitSetters::auditevent(const CellData* msg) {
  return *msg->auditevent_;
}
void CellData::clear_reportablequalifier() {
  if (GetArenaNoVirtual() == nullptr && reportablequalifier_ != nullptr) {
    delete reportablequalifier_;
  }
  reportablequalifier_ = nullptr;
}
void CellData::clear_celldatabindings() {
  celldatabindings_.Clear();
}
void CellData::clear_auditevent() {
  if (GetArenaNoVirtual() == nullptr && auditevent_ != nullptr) {
    delete auditevent_;
  }
  auditevent_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CellData::kValueFieldNumber;
const int CellData::kStringValueFieldNumber;
const int CellData::kIsLockedFieldNumber;
const int CellData::kUnitIdFieldNumber;
const int CellData::kJustificationFieldNumber;
const int CellData::kReportableQualifierFieldNumber;
const int CellData::kCellDataBindingsFieldNumber;
const int CellData::kAuditEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CellData::CellData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.operations.spreadsheet.CellData)
}
CellData::CellData(const CellData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      celldatabindings_(from.celldatabindings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stringvalue().size() > 0) {
    stringvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stringvalue_);
  }
  justification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.justification().size() > 0) {
    justification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.justification_);
  }
  if (from.has_reportablequalifier()) {
    reportablequalifier_ = new ::claros::common::core::ReportableQualifier(*from.reportablequalifier_);
  } else {
    reportablequalifier_ = nullptr;
  }
  if (from.has_auditevent()) {
    auditevent_ = new ::claros::common::core::AuditEvent(*from.auditevent_);
  } else {
    auditevent_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unitid_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unitid_));
  // @@protoc_insertion_point(copy_constructor:claros.operations.spreadsheet.CellData)
}

void CellData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto.base);
  stringvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  justification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reportablequalifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unitid_) -
      reinterpret_cast<char*>(&reportablequalifier_)) + sizeof(unitid_));
}

CellData::~CellData() {
  // @@protoc_insertion_point(destructor:claros.operations.spreadsheet.CellData)
  SharedDtor();
}

void CellData::SharedDtor() {
  stringvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  justification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reportablequalifier_;
  if (this != internal_default_instance()) delete auditevent_;
}

void CellData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellData& CellData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CellData_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto.base);
  return *internal_default_instance();
}


void CellData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.operations.spreadsheet.CellData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  celldatabindings_.Clear();
  stringvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  justification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reportablequalifier_ != nullptr) {
    delete reportablequalifier_;
  }
  reportablequalifier_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auditevent_ != nullptr) {
    delete auditevent_;
  }
  auditevent_ = nullptr;
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unitid_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unitid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CellData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // string stringValue = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.operations.spreadsheet.CellData.stringValue");
        object = msg->mutable_stringvalue();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool isLocked = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_islocked(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 unitId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unitid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string justification = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.operations.spreadsheet.CellData.justification");
        object = msg->mutable_justification();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .claros.common.core.ReportableQualifier reportableQualifier = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::ReportableQualifier::_InternalParse;
        object = msg->mutable_reportablequalifier();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::claros::operations::spreadsheet::CellDataBinding::_InternalParse;
          object = msg->add_celldatabindings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // .claros.common.core.AuditEvent auditEvent = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::AuditEvent::_InternalParse;
        object = msg->mutable_auditevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.operations.spreadsheet.CellData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stringValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.operations.spreadsheet.CellData.stringValue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLocked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unitId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unitid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string justification = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_justification()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->justification().data(), static_cast<int>(this->justification().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.operations.spreadsheet.CellData.justification"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.ReportableQualifier reportableQualifier = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reportablequalifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_celldatabindings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.AuditEvent auditEvent = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (794 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auditevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.operations.spreadsheet.CellData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.operations.spreadsheet.CellData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.operations.spreadsheet.CellData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // string stringValue = 2;
  if (this->stringvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.CellData.stringValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stringvalue(), output);
  }

  // bool isLocked = 3;
  if (this->islocked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islocked(), output);
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unitid(), output);
  }

  // string justification = 5;
  if (this->justification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->justification().data(), static_cast<int>(this->justification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.CellData.justification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->justification(), output);
  }

  // .claros.common.core.ReportableQualifier reportableQualifier = 6;
  if (this->has_reportablequalifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::reportablequalifier(this), output);
  }

  // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celldatabindings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->celldatabindings(static_cast<int>(i)),
      output);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, HasBitSetters::auditevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.operations.spreadsheet.CellData)
}

::google::protobuf::uint8* CellData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.operations.spreadsheet.CellData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // string stringValue = 2;
  if (this->stringvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stringvalue().data(), static_cast<int>(this->stringvalue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.CellData.stringValue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stringvalue(), target);
  }

  // bool isLocked = 3;
  if (this->islocked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islocked(), target);
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unitid(), target);
  }

  // string justification = 5;
  if (this->justification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->justification().data(), static_cast<int>(this->justification().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.operations.spreadsheet.CellData.justification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->justification(), target);
  }

  // .claros.common.core.ReportableQualifier reportableQualifier = 6;
  if (this->has_reportablequalifier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::reportablequalifier(this), target);
  }

  // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->celldatabindings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->celldatabindings(static_cast<int>(i)), target);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        99, HasBitSetters::auditevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.operations.spreadsheet.CellData)
  return target;
}

size_t CellData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.operations.spreadsheet.CellData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.operations.spreadsheet.CellDataBinding cellDataBindings = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->celldatabindings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->celldatabindings(static_cast<int>(i)));
    }
  }

  // string stringValue = 2;
  if (this->stringvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stringvalue());
  }

  // string justification = 5;
  if (this->justification().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->justification());
  }

  // .claros.common.core.ReportableQualifier reportableQualifier = 6;
  if (this->has_reportablequalifier()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *reportablequalifier_);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auditevent_);
  }

  // double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // bool isLocked = 3;
  if (this->islocked() != 0) {
    total_size += 1 + 1;
  }

  // uint32 unitId = 4;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unitid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.operations.spreadsheet.CellData)
  GOOGLE_DCHECK_NE(&from, this);
  const CellData* source =
      ::google::protobuf::DynamicCastToGenerated<CellData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.operations.spreadsheet.CellData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.operations.spreadsheet.CellData)
    MergeFrom(*source);
  }
}

void CellData::MergeFrom(const CellData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.operations.spreadsheet.CellData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  celldatabindings_.MergeFrom(from.celldatabindings_);
  if (from.stringvalue().size() > 0) {

    stringvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stringvalue_);
  }
  if (from.justification().size() > 0) {

    justification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.justification_);
  }
  if (from.has_reportablequalifier()) {
    mutable_reportablequalifier()->::claros::common::core::ReportableQualifier::MergeFrom(from.reportablequalifier());
  }
  if (from.has_auditevent()) {
    mutable_auditevent()->::claros::common::core::AuditEvent::MergeFrom(from.auditevent());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.islocked() != 0) {
    set_islocked(from.islocked());
  }
  if (from.unitid() != 0) {
    set_unitid(from.unitid());
  }
}

void CellData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.operations.spreadsheet.CellData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellData::CopyFrom(const CellData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.operations.spreadsheet.CellData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellData::IsInitialized() const {
  return true;
}

void CellData::Swap(CellData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CellData::InternalSwap(CellData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&celldatabindings_)->InternalSwap(CastToBase(&other->celldatabindings_));
  stringvalue_.Swap(&other->stringvalue_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  justification_.Swap(&other->justification_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reportablequalifier_, other->reportablequalifier_);
  swap(auditevent_, other->auditevent_);
  swap(value_, other->value_);
  swap(islocked_, other->islocked_);
  swap(unitid_, other->unitid_);
}

::google::protobuf::Metadata CellData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto);
  return ::file_level_metadata_claros_5foperations_5fspreadsheet_5fworksheet_5fcelldata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::operations::spreadsheet::CellData* Arena::CreateMaybeMessage< ::claros::operations::spreadsheet::CellData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::operations::spreadsheet::CellData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
