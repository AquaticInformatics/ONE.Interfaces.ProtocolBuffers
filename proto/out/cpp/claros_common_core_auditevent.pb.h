// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_auditevent.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fauditevent_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fauditevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_auditevent_type.pb.h"
#include "claros_common_core_clarosdatetime.pb.h"
#include "claros_common_core_datasource_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fauditevent_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fcore_5fauditevent_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fcore_5fauditevent_2eproto();
namespace claros {
namespace common {
namespace core {
class AuditEvent;
class AuditEventDefaultTypeInternal;
extern AuditEventDefaultTypeInternal _AuditEvent_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::core::AuditEvent* Arena::CreateMaybeMessage<::claros::common::core::AuditEvent>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace core {

// ===================================================================

class AuditEvent :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.core.AuditEvent) */ {
 public:
  AuditEvent();
  virtual ~AuditEvent();

  AuditEvent(const AuditEvent& from);

  inline AuditEvent& operator=(const AuditEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEvent(AuditEvent&& from) noexcept
    : AuditEvent() {
    *this = ::std::move(from);
  }

  inline AuditEvent& operator=(AuditEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuditEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEvent* internal_default_instance() {
    return reinterpret_cast<const AuditEvent*>(
               &_AuditEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AuditEvent* other);
  friend void swap(AuditEvent& a, AuditEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEvent* New() const final {
    return CreateMaybeMessage<AuditEvent>(nullptr);
  }

  AuditEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEvent& from);
  void MergeFrom(const AuditEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string userId = 2;
  void clear_userid();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // .claros.common.core.ClarosDateTime timeStamp = 5;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimeStampFieldNumber = 5;
  const ::claros::common::core::ClarosDateTime& timestamp() const;
  ::claros::common::core::ClarosDateTime* release_timestamp();
  ::claros::common::core::ClarosDateTime* mutable_timestamp();
  void set_allocated_timestamp(::claros::common::core::ClarosDateTime* timestamp);

  // .claros.common.core.DataSourceType dataSourceType = 3;
  void clear_datasourcetype();
  static const int kDataSourceTypeFieldNumber = 3;
  ::claros::common::core::DataSourceType datasourcetype() const;
  void set_datasourcetype(::claros::common::core::DataSourceType value);

  // .claros.common.core.AuditEventType eventType = 4;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 4;
  ::claros::common::core::AuditEventType eventtype() const;
  void set_eventtype(::claros::common::core::AuditEventType value);

  // @@protoc_insertion_point(class_scope:claros.common.core.AuditEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::claros::common::core::ClarosDateTime* timestamp_;
  int datasourcetype_;
  int eventtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fcore_5fauditevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuditEvent

// string id = 1;
inline void AuditEvent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditEvent::id() const {
  // @@protoc_insertion_point(field_get:claros.common.core.AuditEvent.id)
  return id_.GetNoArena();
}
inline void AuditEvent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.core.AuditEvent.id)
}
#if LANG_CXX11
inline void AuditEvent::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.core.AuditEvent.id)
}
#endif
inline void AuditEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.core.AuditEvent.id)
}
inline void AuditEvent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.core.AuditEvent.id)
}
inline ::std::string* AuditEvent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.core.AuditEvent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditEvent::release_id() {
  // @@protoc_insertion_point(field_release:claros.common.core.AuditEvent.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditEvent::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.AuditEvent.id)
}

// string userId = 2;
inline void AuditEvent::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuditEvent::userid() const {
  // @@protoc_insertion_point(field_get:claros.common.core.AuditEvent.userId)
  return userid_.GetNoArena();
}
inline void AuditEvent::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.core.AuditEvent.userId)
}
#if LANG_CXX11
inline void AuditEvent::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.core.AuditEvent.userId)
}
#endif
inline void AuditEvent::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.core.AuditEvent.userId)
}
inline void AuditEvent::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.core.AuditEvent.userId)
}
inline ::std::string* AuditEvent::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.core.AuditEvent.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuditEvent::release_userid() {
  // @@protoc_insertion_point(field_release:claros.common.core.AuditEvent.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuditEvent::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.AuditEvent.userId)
}

// .claros.common.core.DataSourceType dataSourceType = 3;
inline void AuditEvent::clear_datasourcetype() {
  datasourcetype_ = 0;
}
inline ::claros::common::core::DataSourceType AuditEvent::datasourcetype() const {
  // @@protoc_insertion_point(field_get:claros.common.core.AuditEvent.dataSourceType)
  return static_cast< ::claros::common::core::DataSourceType >(datasourcetype_);
}
inline void AuditEvent::set_datasourcetype(::claros::common::core::DataSourceType value) {
  
  datasourcetype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.AuditEvent.dataSourceType)
}

// .claros.common.core.AuditEventType eventType = 4;
inline void AuditEvent::clear_eventtype() {
  eventtype_ = 0;
}
inline ::claros::common::core::AuditEventType AuditEvent::eventtype() const {
  // @@protoc_insertion_point(field_get:claros.common.core.AuditEvent.eventType)
  return static_cast< ::claros::common::core::AuditEventType >(eventtype_);
}
inline void AuditEvent::set_eventtype(::claros::common::core::AuditEventType value) {
  
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.AuditEvent.eventType)
}

// .claros.common.core.ClarosDateTime timeStamp = 5;
inline bool AuditEvent::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& AuditEvent::timestamp() const {
  const ::claros::common::core::ClarosDateTime* p = timestamp_;
  // @@protoc_insertion_point(field_get:claros.common.core.AuditEvent.timeStamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* AuditEvent::release_timestamp() {
  // @@protoc_insertion_point(field_release:claros.common.core.AuditEvent.timeStamp)
  
  ::claros::common::core::ClarosDateTime* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* AuditEvent::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.core.AuditEvent.timeStamp)
  return timestamp_;
}
inline void AuditEvent::set_allocated_timestamp(::claros::common::core::ClarosDateTime* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.AuditEvent.timeStamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fauditevent_2eproto
