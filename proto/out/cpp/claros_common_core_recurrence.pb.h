// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_recurrence.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5frecurrence_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5frecurrence_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_recurrence_type.pb.h"
#include "claros_common_core_clarosdatetime.pb.h"
#include "claros_common_core_dayofweek.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5frecurrence_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fcore_5frecurrence_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fcore_5frecurrence_2eproto();
namespace claros {
namespace common {
namespace core {
class Recurrence;
class RecurrenceDefaultTypeInternal;
extern RecurrenceDefaultTypeInternal _Recurrence_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::core::Recurrence* Arena::CreateMaybeMessage<::claros::common::core::Recurrence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace core {

// ===================================================================

class Recurrence :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.core.Recurrence) */ {
 public:
  Recurrence();
  virtual ~Recurrence();

  Recurrence(const Recurrence& from);

  inline Recurrence& operator=(const Recurrence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Recurrence(Recurrence&& from) noexcept
    : Recurrence() {
    *this = ::std::move(from);
  }

  inline Recurrence& operator=(Recurrence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Recurrence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Recurrence* internal_default_instance() {
    return reinterpret_cast<const Recurrence*>(
               &_Recurrence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Recurrence* other);
  friend void swap(Recurrence& a, Recurrence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Recurrence* New() const final {
    return CreateMaybeMessage<Recurrence>(nullptr);
  }

  Recurrence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Recurrence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Recurrence& from);
  void MergeFrom(const Recurrence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Recurrence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
  int daysofweek_size() const;
  void clear_daysofweek();
  static const int kDaysOfWeekFieldNumber = 4;
  ::claros::common::core::DayOfWeek daysofweek(int index) const;
  void set_daysofweek(int index, ::claros::common::core::DayOfWeek value);
  void add_daysofweek(::claros::common::core::DayOfWeek value);
  const ::google::protobuf::RepeatedField<int>& daysofweek() const;
  ::google::protobuf::RepeatedField<int>* mutable_daysofweek();

  // .claros.common.core.ClarosDateTime startDate = 2;
  bool has_startdate() const;
  void clear_startdate();
  static const int kStartDateFieldNumber = 2;
  const ::claros::common::core::ClarosDateTime& startdate() const;
  ::claros::common::core::ClarosDateTime* release_startdate();
  ::claros::common::core::ClarosDateTime* mutable_startdate();
  void set_allocated_startdate(::claros::common::core::ClarosDateTime* startdate);

  // .claros.common.core.RecurrenceType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::claros::common::core::RecurrenceType type() const;
  void set_type(::claros::common::core::RecurrenceType value);

  // uint32 minuteOffset = 3;
  void clear_minuteoffset();
  static const int kMinuteOffsetFieldNumber = 3;
  ::google::protobuf::uint32 minuteoffset() const;
  void set_minuteoffset(::google::protobuf::uint32 value);

  // uint32 duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.common.core.Recurrence)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> daysofweek_;
  mutable std::atomic<int> _daysofweek_cached_byte_size_;
  ::claros::common::core::ClarosDateTime* startdate_;
  int type_;
  ::google::protobuf::uint32 minuteoffset_;
  ::google::protobuf::uint32 duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fcore_5frecurrence_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Recurrence

// .claros.common.core.RecurrenceType type = 1;
inline void Recurrence::clear_type() {
  type_ = 0;
}
inline ::claros::common::core::RecurrenceType Recurrence::type() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Recurrence.type)
  return static_cast< ::claros::common::core::RecurrenceType >(type_);
}
inline void Recurrence::set_type(::claros::common::core::RecurrenceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Recurrence.type)
}

// .claros.common.core.ClarosDateTime startDate = 2;
inline bool Recurrence::has_startdate() const {
  return this != internal_default_instance() && startdate_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& Recurrence::startdate() const {
  const ::claros::common::core::ClarosDateTime* p = startdate_;
  // @@protoc_insertion_point(field_get:claros.common.core.Recurrence.startDate)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* Recurrence::release_startdate() {
  // @@protoc_insertion_point(field_release:claros.common.core.Recurrence.startDate)
  
  ::claros::common::core::ClarosDateTime* temp = startdate_;
  startdate_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* Recurrence::mutable_startdate() {
  
  if (startdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    startdate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.core.Recurrence.startDate)
  return startdate_;
}
inline void Recurrence::set_allocated_startdate(::claros::common::core::ClarosDateTime* startdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(startdate_);
  }
  if (startdate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      startdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, startdate, submessage_arena);
    }
    
  } else {
    
  }
  startdate_ = startdate;
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.Recurrence.startDate)
}

// uint32 minuteOffset = 3;
inline void Recurrence::clear_minuteoffset() {
  minuteoffset_ = 0u;
}
inline ::google::protobuf::uint32 Recurrence::minuteoffset() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Recurrence.minuteOffset)
  return minuteoffset_;
}
inline void Recurrence::set_minuteoffset(::google::protobuf::uint32 value) {
  
  minuteoffset_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Recurrence.minuteOffset)
}

// repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
inline int Recurrence::daysofweek_size() const {
  return daysofweek_.size();
}
inline void Recurrence::clear_daysofweek() {
  daysofweek_.Clear();
}
inline ::claros::common::core::DayOfWeek Recurrence::daysofweek(int index) const {
  // @@protoc_insertion_point(field_get:claros.common.core.Recurrence.daysOfWeek)
  return static_cast< ::claros::common::core::DayOfWeek >(daysofweek_.Get(index));
}
inline void Recurrence::set_daysofweek(int index, ::claros::common::core::DayOfWeek value) {
  daysofweek_.Set(index, value);
  // @@protoc_insertion_point(field_set:claros.common.core.Recurrence.daysOfWeek)
}
inline void Recurrence::add_daysofweek(::claros::common::core::DayOfWeek value) {
  daysofweek_.Add(value);
  // @@protoc_insertion_point(field_add:claros.common.core.Recurrence.daysOfWeek)
}
inline const ::google::protobuf::RepeatedField<int>&
Recurrence::daysofweek() const {
  // @@protoc_insertion_point(field_list:claros.common.core.Recurrence.daysOfWeek)
  return daysofweek_;
}
inline ::google::protobuf::RepeatedField<int>*
Recurrence::mutable_daysofweek() {
  // @@protoc_insertion_point(field_mutable_list:claros.common.core.Recurrence.daysOfWeek)
  return &daysofweek_;
}

// uint32 duration = 5;
inline void Recurrence::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 Recurrence::duration() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Recurrence.duration)
  return duration_;
}
inline void Recurrence::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Recurrence.duration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5frecurrence_2eproto
