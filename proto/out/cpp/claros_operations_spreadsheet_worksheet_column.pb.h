// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_column.proto

#ifndef PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto
#define PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_datasource_type.pb.h"
#include "claros_common_core_limit.pb.h"
#include "claros_instrument_measurement_binding.pb.h"
#include "claros_common_computation_binding.pb.h"
#include "claros_common_core_reportablequalifierdefinition.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto();
namespace claros {
namespace operations {
namespace spreadsheet {
class Column;
class ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::operations::spreadsheet::Column* Arena::CreateMaybeMessage<::claros::operations::spreadsheet::Column>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace operations {
namespace spreadsheet {

// ===================================================================

class Column :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.operations.spreadsheet.Column) */ {
 public:
  Column();
  virtual ~Column();

  Column(const Column& from);

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(Column&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Column& default_instance();

  enum BindingCase {
    kInstrumentMeasurementBinding = 10,
    kComputationBinding = 11,
    BINDING_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Column* other);
  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Column* New() const final {
    return CreateMaybeMessage<Column>(nullptr);
  }

  Column* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Column& from);
  void MergeFrom(const Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.common.core.Limit limits = 8;
  int limits_size() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 8;
  ::claros::common::core::Limit* mutable_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >*
      mutable_limits();
  const ::claros::common::core::Limit& limits(int index) const;
  ::claros::common::core::Limit* add_limits();
  const ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >&
      limits() const;

  // repeated .claros.common.core.ReportableQualifierDefinition reportableQualiferDefinition = 12;
  int reportablequaliferdefinition_size() const;
  void clear_reportablequaliferdefinition();
  static const int kReportableQualiferDefinitionFieldNumber = 12;
  ::claros::common::core::ReportableQualifierDefinition* mutable_reportablequaliferdefinition(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::ReportableQualifierDefinition >*
      mutable_reportablequaliferdefinition();
  const ::claros::common::core::ReportableQualifierDefinition& reportablequaliferdefinition(int index) const;
  ::claros::common::core::ReportableQualifierDefinition* add_reportablequaliferdefinition();
  const ::google::protobuf::RepeatedPtrField< ::claros::common::core::ReportableQualifierDefinition >&
      reportablequaliferdefinition() const;

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string locationId = 6;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 6;
  const ::std::string& locationid() const;
  void set_locationid(const ::std::string& value);
  #if LANG_CXX11
  void set_locationid(::std::string&& value);
  #endif
  void set_locationid(const char* value);
  void set_locationid(const char* value, size_t size);
  ::std::string* mutable_locationid();
  ::std::string* release_locationid();
  void set_allocated_locationid(::std::string* locationid);

  // uint32 columnNumber = 1;
  void clear_columnnumber();
  static const int kColumnNumberFieldNumber = 1;
  ::google::protobuf::uint32 columnnumber() const;
  void set_columnnumber(::google::protobuf::uint32 value);

  // uint32 parameterId = 4;
  void clear_parameterid();
  static const int kParameterIdFieldNumber = 4;
  ::google::protobuf::uint32 parameterid() const;
  void set_parameterid(::google::protobuf::uint32 value);

  // uint32 displayUnitId = 5;
  void clear_displayunitid();
  static const int kDisplayUnitIdFieldNumber = 5;
  ::google::protobuf::uint32 displayunitid() const;
  void set_displayunitid(::google::protobuf::uint32 value);

  // bool isActive = 7;
  void clear_isactive();
  static const int kIsActiveFieldNumber = 7;
  bool isactive() const;
  void set_isactive(bool value);

  // .claros.common.core.DataSourceType dataSourceType = 9;
  void clear_datasourcetype();
  static const int kDataSourceTypeFieldNumber = 9;
  ::claros::common::core::DataSourceType datasourcetype() const;
  void set_datasourcetype(::claros::common::core::DataSourceType value);

  // .claros.instrument.measurement.InstrumentMeasurementBinding instrumentMeasurementBinding = 10;
  bool has_instrumentmeasurementbinding() const;
  void clear_instrumentmeasurementbinding();
  static const int kInstrumentMeasurementBindingFieldNumber = 10;
  const ::claros::instrument::measurement::InstrumentMeasurementBinding& instrumentmeasurementbinding() const;
  ::claros::instrument::measurement::InstrumentMeasurementBinding* release_instrumentmeasurementbinding();
  ::claros::instrument::measurement::InstrumentMeasurementBinding* mutable_instrumentmeasurementbinding();
  void set_allocated_instrumentmeasurementbinding(::claros::instrument::measurement::InstrumentMeasurementBinding* instrumentmeasurementbinding);

  // .claros.common.computation.ComputationBinding computationBinding = 11;
  bool has_computationbinding() const;
  void clear_computationbinding();
  static const int kComputationBindingFieldNumber = 11;
  const ::claros::common::computation::ComputationBinding& computationbinding() const;
  ::claros::common::computation::ComputationBinding* release_computationbinding();
  ::claros::common::computation::ComputationBinding* mutable_computationbinding();
  void set_allocated_computationbinding(::claros::common::computation::ComputationBinding* computationbinding);

  void clear_binding();
  BindingCase binding_case() const;
  // @@protoc_insertion_point(class_scope:claros.operations.spreadsheet.Column)
 private:
  class HasBitSetters;
  void set_has_instrumentmeasurementbinding();
  void set_has_computationbinding();

  inline bool has_binding() const;
  inline void clear_has_binding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit > limits_;
  ::google::protobuf::RepeatedPtrField< ::claros::common::core::ReportableQualifierDefinition > reportablequaliferdefinition_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr locationid_;
  ::google::protobuf::uint32 columnnumber_;
  ::google::protobuf::uint32 parameterid_;
  ::google::protobuf::uint32 displayunitid_;
  bool isactive_;
  int datasourcetype_;
  union BindingUnion {
    BindingUnion() {}
    ::claros::instrument::measurement::InstrumentMeasurementBinding* instrumentmeasurementbinding_;
    ::claros::common::computation::ComputationBinding* computationbinding_;
  } binding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Column

// uint32 columnNumber = 1;
inline void Column::clear_columnnumber() {
  columnnumber_ = 0u;
}
inline ::google::protobuf::uint32 Column::columnnumber() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.columnNumber)
  return columnnumber_;
}
inline void Column::set_columnnumber(::google::protobuf::uint32 value) {
  
  columnnumber_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.columnNumber)
}

// string name = 2;
inline void Column::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.name)
  return name_.GetNoArena();
}
inline void Column::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.name)
}
#if LANG_CXX11
inline void Column::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.Column.name)
}
#endif
inline void Column::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.Column.name)
}
inline void Column::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.Column.name)
}
inline ::std::string* Column::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.Column.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.Column.name)
}

// string description = 3;
inline void Column::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::description() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.description)
  return description_.GetNoArena();
}
inline void Column::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.description)
}
#if LANG_CXX11
inline void Column::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.Column.description)
}
#endif
inline void Column::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.Column.description)
}
inline void Column::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.Column.description)
}
inline ::std::string* Column::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_description() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.Column.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.Column.description)
}

// uint32 parameterId = 4;
inline void Column::clear_parameterid() {
  parameterid_ = 0u;
}
inline ::google::protobuf::uint32 Column::parameterid() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.parameterId)
  return parameterid_;
}
inline void Column::set_parameterid(::google::protobuf::uint32 value) {
  
  parameterid_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.parameterId)
}

// uint32 displayUnitId = 5;
inline void Column::clear_displayunitid() {
  displayunitid_ = 0u;
}
inline ::google::protobuf::uint32 Column::displayunitid() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.displayUnitId)
  return displayunitid_;
}
inline void Column::set_displayunitid(::google::protobuf::uint32 value) {
  
  displayunitid_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.displayUnitId)
}

// string locationId = 6;
inline void Column::clear_locationid() {
  locationid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Column::locationid() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.locationId)
  return locationid_.GetNoArena();
}
inline void Column::set_locationid(const ::std::string& value) {
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.locationId)
}
#if LANG_CXX11
inline void Column::set_locationid(::std::string&& value) {
  
  locationid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.operations.spreadsheet.Column.locationId)
}
#endif
inline void Column::set_locationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.operations.spreadsheet.Column.locationId)
}
inline void Column::set_locationid(const char* value, size_t size) {
  
  locationid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.operations.spreadsheet.Column.locationId)
}
inline ::std::string* Column::mutable_locationid() {
  
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.locationId)
  return locationid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Column::release_locationid() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.Column.locationId)
  
  return locationid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Column::set_allocated_locationid(::std::string* locationid) {
  if (locationid != nullptr) {
    
  } else {
    
  }
  locationid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), locationid);
  // @@protoc_insertion_point(field_set_allocated:claros.operations.spreadsheet.Column.locationId)
}

// bool isActive = 7;
inline void Column::clear_isactive() {
  isactive_ = false;
}
inline bool Column::isactive() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.isActive)
  return isactive_;
}
inline void Column::set_isactive(bool value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.isActive)
}

// repeated .claros.common.core.Limit limits = 8;
inline int Column::limits_size() const {
  return limits_.size();
}
inline ::claros::common::core::Limit* Column::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.limits)
  return limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >*
Column::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:claros.operations.spreadsheet.Column.limits)
  return &limits_;
}
inline const ::claros::common::core::Limit& Column::limits(int index) const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.limits)
  return limits_.Get(index);
}
inline ::claros::common::core::Limit* Column::add_limits() {
  // @@protoc_insertion_point(field_add:claros.operations.spreadsheet.Column.limits)
  return limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::common::core::Limit >&
Column::limits() const {
  // @@protoc_insertion_point(field_list:claros.operations.spreadsheet.Column.limits)
  return limits_;
}

// .claros.common.core.DataSourceType dataSourceType = 9;
inline void Column::clear_datasourcetype() {
  datasourcetype_ = 0;
}
inline ::claros::common::core::DataSourceType Column::datasourcetype() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.dataSourceType)
  return static_cast< ::claros::common::core::DataSourceType >(datasourcetype_);
}
inline void Column::set_datasourcetype(::claros::common::core::DataSourceType value) {
  
  datasourcetype_ = value;
  // @@protoc_insertion_point(field_set:claros.operations.spreadsheet.Column.dataSourceType)
}

// .claros.instrument.measurement.InstrumentMeasurementBinding instrumentMeasurementBinding = 10;
inline bool Column::has_instrumentmeasurementbinding() const {
  return binding_case() == kInstrumentMeasurementBinding;
}
inline void Column::set_has_instrumentmeasurementbinding() {
  _oneof_case_[0] = kInstrumentMeasurementBinding;
}
inline ::claros::instrument::measurement::InstrumentMeasurementBinding* Column::release_instrumentmeasurementbinding() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.Column.instrumentMeasurementBinding)
  if (has_instrumentmeasurementbinding()) {
    clear_has_binding();
      ::claros::instrument::measurement::InstrumentMeasurementBinding* temp = binding_.instrumentmeasurementbinding_;
    binding_.instrumentmeasurementbinding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::instrument::measurement::InstrumentMeasurementBinding& Column::instrumentmeasurementbinding() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.instrumentMeasurementBinding)
  return has_instrumentmeasurementbinding()
      ? *binding_.instrumentmeasurementbinding_
      : *reinterpret_cast< ::claros::instrument::measurement::InstrumentMeasurementBinding*>(&::claros::instrument::measurement::_InstrumentMeasurementBinding_default_instance_);
}
inline ::claros::instrument::measurement::InstrumentMeasurementBinding* Column::mutable_instrumentmeasurementbinding() {
  if (!has_instrumentmeasurementbinding()) {
    clear_binding();
    set_has_instrumentmeasurementbinding();
    binding_.instrumentmeasurementbinding_ = CreateMaybeMessage< ::claros::instrument::measurement::InstrumentMeasurementBinding >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.instrumentMeasurementBinding)
  return binding_.instrumentmeasurementbinding_;
}

// .claros.common.computation.ComputationBinding computationBinding = 11;
inline bool Column::has_computationbinding() const {
  return binding_case() == kComputationBinding;
}
inline void Column::set_has_computationbinding() {
  _oneof_case_[0] = kComputationBinding;
}
inline ::claros::common::computation::ComputationBinding* Column::release_computationbinding() {
  // @@protoc_insertion_point(field_release:claros.operations.spreadsheet.Column.computationBinding)
  if (has_computationbinding()) {
    clear_has_binding();
      ::claros::common::computation::ComputationBinding* temp = binding_.computationbinding_;
    binding_.computationbinding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::common::computation::ComputationBinding& Column::computationbinding() const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.computationBinding)
  return has_computationbinding()
      ? *binding_.computationbinding_
      : *reinterpret_cast< ::claros::common::computation::ComputationBinding*>(&::claros::common::computation::_ComputationBinding_default_instance_);
}
inline ::claros::common::computation::ComputationBinding* Column::mutable_computationbinding() {
  if (!has_computationbinding()) {
    clear_binding();
    set_has_computationbinding();
    binding_.computationbinding_ = CreateMaybeMessage< ::claros::common::computation::ComputationBinding >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.computationBinding)
  return binding_.computationbinding_;
}

// repeated .claros.common.core.ReportableQualifierDefinition reportableQualiferDefinition = 12;
inline int Column::reportablequaliferdefinition_size() const {
  return reportablequaliferdefinition_.size();
}
inline ::claros::common::core::ReportableQualifierDefinition* Column::mutable_reportablequaliferdefinition(int index) {
  // @@protoc_insertion_point(field_mutable:claros.operations.spreadsheet.Column.reportableQualiferDefinition)
  return reportablequaliferdefinition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::common::core::ReportableQualifierDefinition >*
Column::mutable_reportablequaliferdefinition() {
  // @@protoc_insertion_point(field_mutable_list:claros.operations.spreadsheet.Column.reportableQualiferDefinition)
  return &reportablequaliferdefinition_;
}
inline const ::claros::common::core::ReportableQualifierDefinition& Column::reportablequaliferdefinition(int index) const {
  // @@protoc_insertion_point(field_get:claros.operations.spreadsheet.Column.reportableQualiferDefinition)
  return reportablequaliferdefinition_.Get(index);
}
inline ::claros::common::core::ReportableQualifierDefinition* Column::add_reportablequaliferdefinition() {
  // @@protoc_insertion_point(field_add:claros.operations.spreadsheet.Column.reportableQualiferDefinition)
  return reportablequaliferdefinition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::common::core::ReportableQualifierDefinition >&
Column::reportablequaliferdefinition() const {
  // @@protoc_insertion_point(field_list:claros.operations.spreadsheet.Column.reportableQualiferDefinition)
  return reportablequaliferdefinition_;
}

inline bool Column::has_binding() const {
  return binding_case() != BINDING_NOT_SET;
}
inline void Column::clear_has_binding() {
  _oneof_case_[0] = BINDING_NOT_SET;
}
inline Column::BindingCase Column::binding_case() const {
  return Column::BindingCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace spreadsheet
}  // namespace operations
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5foperations_5fspreadsheet_5fworksheet_5fcolumn_2eproto
