// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formindex.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformindex_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformindex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_timewindow.pb.h"
#include "claros_common_core_clarosdatetime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformindex_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fform_5fformindex_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fform_5fformindex_2eproto();
namespace claros {
namespace common {
namespace form {
class FormIndex;
class FormIndexDefaultTypeInternal;
extern FormIndexDefaultTypeInternal _FormIndex_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::form::FormIndex* Arena::CreateMaybeMessage<::claros::common::form::FormIndex>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace form {

// ===================================================================

class FormIndex :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.form.FormIndex) */ {
 public:
  FormIndex();
  virtual ~FormIndex();

  FormIndex(const FormIndex& from);

  inline FormIndex& operator=(const FormIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FormIndex(FormIndex&& from) noexcept
    : FormIndex() {
    *this = ::std::move(from);
  }

  inline FormIndex& operator=(FormIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FormIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FormIndex* internal_default_instance() {
    return reinterpret_cast<const FormIndex*>(
               &_FormIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FormIndex* other);
  friend void swap(FormIndex& a, FormIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FormIndex* New() const final {
    return CreateMaybeMessage<FormIndex>(nullptr);
  }

  FormIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FormIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FormIndex& from);
  void MergeFrom(const FormIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FormIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string templateId = 2;
  void clear_templateid();
  static const int kTemplateIdFieldNumber = 2;
  const ::std::string& templateid() const;
  void set_templateid(const ::std::string& value);
  #if LANG_CXX11
  void set_templateid(::std::string&& value);
  #endif
  void set_templateid(const char* value);
  void set_templateid(const char* value, size_t size);
  ::std::string* mutable_templateid();
  ::std::string* release_templateid();
  void set_allocated_templateid(::std::string* templateid);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string creatorId = 7;
  void clear_creatorid();
  static const int kCreatorIdFieldNumber = 7;
  const ::std::string& creatorid() const;
  void set_creatorid(const ::std::string& value);
  #if LANG_CXX11
  void set_creatorid(::std::string&& value);
  #endif
  void set_creatorid(const char* value);
  void set_creatorid(const char* value, size_t size);
  ::std::string* mutable_creatorid();
  ::std::string* release_creatorid();
  void set_allocated_creatorid(::std::string* creatorid);

  // .claros.common.core.TimeWindow timeWindow = 4;
  bool has_timewindow() const;
  void clear_timewindow();
  static const int kTimeWindowFieldNumber = 4;
  const ::claros::common::core::TimeWindow& timewindow() const;
  ::claros::common::core::TimeWindow* release_timewindow();
  ::claros::common::core::TimeWindow* mutable_timewindow();
  void set_allocated_timewindow(::claros::common::core::TimeWindow* timewindow);

  // .claros.common.core.ClarosDateTime lastModified = 5;
  bool has_lastmodified() const;
  void clear_lastmodified();
  static const int kLastModifiedFieldNumber = 5;
  const ::claros::common::core::ClarosDateTime& lastmodified() const;
  ::claros::common::core::ClarosDateTime* release_lastmodified();
  ::claros::common::core::ClarosDateTime* mutable_lastmodified();
  void set_allocated_lastmodified(::claros::common::core::ClarosDateTime* lastmodified);

  // uint32 templateVersion = 3;
  void clear_templateversion();
  static const int kTemplateVersionFieldNumber = 3;
  ::google::protobuf::uint32 templateversion() const;
  void set_templateversion(::google::protobuf::uint32 value);

  // bool isInSpeed = 8;
  void clear_isinspeed();
  static const int kIsInSpeedFieldNumber = 8;
  bool isinspeed() const;
  void set_isinspeed(bool value);

  // @@protoc_insertion_point(class_scope:claros.common.form.FormIndex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr templateid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr creatorid_;
  ::claros::common::core::TimeWindow* timewindow_;
  ::claros::common::core::ClarosDateTime* lastmodified_;
  ::google::protobuf::uint32 templateversion_;
  bool isinspeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fform_5fformindex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FormIndex

// string id = 1;
inline void FormIndex::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormIndex::id() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.id)
  return id_.GetNoArena();
}
inline void FormIndex::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.id)
}
#if LANG_CXX11
inline void FormIndex::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormIndex.id)
}
#endif
inline void FormIndex::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormIndex.id)
}
inline void FormIndex::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormIndex.id)
}
inline ::std::string* FormIndex::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormIndex::release_id() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormIndex::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.id)
}

// string templateId = 2;
inline void FormIndex::clear_templateid() {
  templateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormIndex::templateid() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.templateId)
  return templateid_.GetNoArena();
}
inline void FormIndex::set_templateid(const ::std::string& value) {
  
  templateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.templateId)
}
#if LANG_CXX11
inline void FormIndex::set_templateid(::std::string&& value) {
  
  templateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormIndex.templateId)
}
#endif
inline void FormIndex::set_templateid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  templateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormIndex.templateId)
}
inline void FormIndex::set_templateid(const char* value, size_t size) {
  
  templateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormIndex.templateId)
}
inline ::std::string* FormIndex::mutable_templateid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.templateId)
  return templateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormIndex::release_templateid() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.templateId)
  
  return templateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormIndex::set_allocated_templateid(::std::string* templateid) {
  if (templateid != nullptr) {
    
  } else {
    
  }
  templateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templateid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.templateId)
}

// uint32 templateVersion = 3;
inline void FormIndex::clear_templateversion() {
  templateversion_ = 0u;
}
inline ::google::protobuf::uint32 FormIndex::templateversion() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.templateVersion)
  return templateversion_;
}
inline void FormIndex::set_templateversion(::google::protobuf::uint32 value) {
  
  templateversion_ = value;
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.templateVersion)
}

// .claros.common.core.TimeWindow timeWindow = 4;
inline bool FormIndex::has_timewindow() const {
  return this != internal_default_instance() && timewindow_ != nullptr;
}
inline const ::claros::common::core::TimeWindow& FormIndex::timewindow() const {
  const ::claros::common::core::TimeWindow* p = timewindow_;
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.timeWindow)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::TimeWindow*>(
      &::claros::common::core::_TimeWindow_default_instance_);
}
inline ::claros::common::core::TimeWindow* FormIndex::release_timewindow() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.timeWindow)
  
  ::claros::common::core::TimeWindow* temp = timewindow_;
  timewindow_ = nullptr;
  return temp;
}
inline ::claros::common::core::TimeWindow* FormIndex::mutable_timewindow() {
  
  if (timewindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::TimeWindow>(GetArenaNoVirtual());
    timewindow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.timeWindow)
  return timewindow_;
}
inline void FormIndex::set_allocated_timewindow(::claros::common::core::TimeWindow* timewindow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timewindow_);
  }
  if (timewindow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timewindow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timewindow, submessage_arena);
    }
    
  } else {
    
  }
  timewindow_ = timewindow;
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.timeWindow)
}

// .claros.common.core.ClarosDateTime lastModified = 5;
inline bool FormIndex::has_lastmodified() const {
  return this != internal_default_instance() && lastmodified_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& FormIndex::lastmodified() const {
  const ::claros::common::core::ClarosDateTime* p = lastmodified_;
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.lastModified)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* FormIndex::release_lastmodified() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.lastModified)
  
  ::claros::common::core::ClarosDateTime* temp = lastmodified_;
  lastmodified_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* FormIndex::mutable_lastmodified() {
  
  if (lastmodified_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    lastmodified_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.lastModified)
  return lastmodified_;
}
inline void FormIndex::set_allocated_lastmodified(::claros::common::core::ClarosDateTime* lastmodified) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lastmodified_);
  }
  if (lastmodified) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lastmodified = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lastmodified, submessage_arena);
    }
    
  } else {
    
  }
  lastmodified_ = lastmodified;
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.lastModified)
}

// string name = 6;
inline void FormIndex::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormIndex::name() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.name)
  return name_.GetNoArena();
}
inline void FormIndex::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.name)
}
#if LANG_CXX11
inline void FormIndex::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormIndex.name)
}
#endif
inline void FormIndex::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormIndex.name)
}
inline void FormIndex::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormIndex.name)
}
inline ::std::string* FormIndex::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormIndex::release_name() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormIndex::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.name)
}

// string creatorId = 7;
inline void FormIndex::clear_creatorid() {
  creatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FormIndex::creatorid() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.creatorId)
  return creatorid_.GetNoArena();
}
inline void FormIndex::set_creatorid(const ::std::string& value) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.creatorId)
}
#if LANG_CXX11
inline void FormIndex::set_creatorid(::std::string&& value) {
  
  creatorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.FormIndex.creatorId)
}
#endif
inline void FormIndex::set_creatorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.FormIndex.creatorId)
}
inline void FormIndex::set_creatorid(const char* value, size_t size) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.FormIndex.creatorId)
}
inline ::std::string* FormIndex::mutable_creatorid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.FormIndex.creatorId)
  return creatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FormIndex::release_creatorid() {
  // @@protoc_insertion_point(field_release:claros.common.form.FormIndex.creatorId)
  
  return creatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FormIndex::set_allocated_creatorid(::std::string* creatorid) {
  if (creatorid != nullptr) {
    
  } else {
    
  }
  creatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creatorid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormIndex.creatorId)
}

// bool isInSpeed = 8;
inline void FormIndex::clear_isinspeed() {
  isinspeed_ = false;
}
inline bool FormIndex::isinspeed() const {
  // @@protoc_insertion_point(field_get:claros.common.form.FormIndex.isInSpeed)
  return isinspeed_;
}
inline void FormIndex::set_isinspeed(bool value) {
  
  isinspeed_ = value;
  // @@protoc_insertion_point(field_set:claros.common.form.FormIndex.isInSpeed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace form
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fformindex_2eproto
