// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_ledgercolumnformfield.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_recurrence_recurrence.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto();
namespace claros {
namespace common {
namespace form {
class LedgerColumnFormField;
class LedgerColumnFormFieldDefaultTypeInternal;
extern LedgerColumnFormFieldDefaultTypeInternal _LedgerColumnFormField_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::form::LedgerColumnFormField* Arena::CreateMaybeMessage<::claros::common::form::LedgerColumnFormField>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace form {

// ===================================================================

class LedgerColumnFormField :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.form.LedgerColumnFormField) */ {
 public:
  LedgerColumnFormField();
  virtual ~LedgerColumnFormField();

  LedgerColumnFormField(const LedgerColumnFormField& from);

  inline LedgerColumnFormField& operator=(const LedgerColumnFormField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LedgerColumnFormField(LedgerColumnFormField&& from) noexcept
    : LedgerColumnFormField() {
    *this = ::std::move(from);
  }

  inline LedgerColumnFormField& operator=(LedgerColumnFormField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LedgerColumnFormField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LedgerColumnFormField* internal_default_instance() {
    return reinterpret_cast<const LedgerColumnFormField*>(
               &_LedgerColumnFormField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LedgerColumnFormField* other);
  friend void swap(LedgerColumnFormField& a, LedgerColumnFormField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LedgerColumnFormField* New() const final {
    return CreateMaybeMessage<LedgerColumnFormField>(nullptr);
  }

  LedgerColumnFormField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LedgerColumnFormField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LedgerColumnFormField& from);
  void MergeFrom(const LedgerColumnFormField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LedgerColumnFormField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ledgerColumnGUID = 1;
  void clear_ledgercolumnguid();
  static const int kLedgerColumnGUIDFieldNumber = 1;
  const ::std::string& ledgercolumnguid() const;
  void set_ledgercolumnguid(const ::std::string& value);
  #if LANG_CXX11
  void set_ledgercolumnguid(::std::string&& value);
  #endif
  void set_ledgercolumnguid(const char* value);
  void set_ledgercolumnguid(const char* value, size_t size);
  ::std::string* mutable_ledgercolumnguid();
  ::std::string* release_ledgercolumnguid();
  void set_allocated_ledgercolumnguid(::std::string* ledgercolumnguid);

  // string unit = 2;
  void clear_unit();
  static const int kUnitFieldNumber = 2;
  const ::std::string& unit() const;
  void set_unit(const ::std::string& value);
  #if LANG_CXX11
  void set_unit(::std::string&& value);
  #endif
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  ::std::string* mutable_unit();
  ::std::string* release_unit();
  void set_allocated_unit(::std::string* unit);

  // string upLimit = 3;
  void clear_uplimit();
  static const int kUpLimitFieldNumber = 3;
  const ::std::string& uplimit() const;
  void set_uplimit(const ::std::string& value);
  #if LANG_CXX11
  void set_uplimit(::std::string&& value);
  #endif
  void set_uplimit(const char* value);
  void set_uplimit(const char* value, size_t size);
  ::std::string* mutable_uplimit();
  ::std::string* release_uplimit();
  void set_allocated_uplimit(::std::string* uplimit);

  // string lowLimit = 4;
  void clear_lowlimit();
  static const int kLowLimitFieldNumber = 4;
  const ::std::string& lowlimit() const;
  void set_lowlimit(const ::std::string& value);
  #if LANG_CXX11
  void set_lowlimit(::std::string&& value);
  #endif
  void set_lowlimit(const char* value);
  void set_lowlimit(const char* value, size_t size);
  ::std::string* mutable_lowlimit();
  ::std::string* release_lowlimit();
  void set_allocated_lowlimit(::std::string* lowlimit);

  // string parameter = 6;
  void clear_parameter();
  static const int kParameterFieldNumber = 6;
  const ::std::string& parameter() const;
  void set_parameter(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter(::std::string&& value);
  #endif
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  ::std::string* mutable_parameter();
  ::std::string* release_parameter();
  void set_allocated_parameter(::std::string* parameter);

  // .claros.common.recurrence.Recurrence timeWindow = 5;
  bool has_timewindow() const;
  void clear_timewindow();
  static const int kTimeWindowFieldNumber = 5;
  const ::claros::common::recurrence::Recurrence& timewindow() const;
  ::claros::common::recurrence::Recurrence* release_timewindow();
  ::claros::common::recurrence::Recurrence* mutable_timewindow();
  void set_allocated_timewindow(::claros::common::recurrence::Recurrence* timewindow);

  // @@protoc_insertion_point(class_scope:claros.common.form.LedgerColumnFormField)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ledgercolumnguid_;
  ::google::protobuf::internal::ArenaStringPtr unit_;
  ::google::protobuf::internal::ArenaStringPtr uplimit_;
  ::google::protobuf::internal::ArenaStringPtr lowlimit_;
  ::google::protobuf::internal::ArenaStringPtr parameter_;
  ::claros::common::recurrence::Recurrence* timewindow_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LedgerColumnFormField

// string ledgerColumnGUID = 1;
inline void LedgerColumnFormField::clear_ledgercolumnguid() {
  ledgercolumnguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerColumnFormField::ledgercolumnguid() const {
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
  return ledgercolumnguid_.GetNoArena();
}
inline void LedgerColumnFormField::set_ledgercolumnguid(const ::std::string& value) {
  
  ledgercolumnguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
}
#if LANG_CXX11
inline void LedgerColumnFormField::set_ledgercolumnguid(::std::string&& value) {
  
  ledgercolumnguid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
}
#endif
inline void LedgerColumnFormField::set_ledgercolumnguid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ledgercolumnguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
}
inline void LedgerColumnFormField::set_ledgercolumnguid(const char* value, size_t size) {
  
  ledgercolumnguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
}
inline ::std::string* LedgerColumnFormField::mutable_ledgercolumnguid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
  return ledgercolumnguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerColumnFormField::release_ledgercolumnguid() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
  
  return ledgercolumnguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerColumnFormField::set_allocated_ledgercolumnguid(::std::string* ledgercolumnguid) {
  if (ledgercolumnguid != nullptr) {
    
  } else {
    
  }
  ledgercolumnguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ledgercolumnguid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.ledgerColumnGUID)
}

// string unit = 2;
inline void LedgerColumnFormField::clear_unit() {
  unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerColumnFormField::unit() const {
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.unit)
  return unit_.GetNoArena();
}
inline void LedgerColumnFormField::set_unit(const ::std::string& value) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.LedgerColumnFormField.unit)
}
#if LANG_CXX11
inline void LedgerColumnFormField::set_unit(::std::string&& value) {
  
  unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.LedgerColumnFormField.unit)
}
#endif
inline void LedgerColumnFormField::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.LedgerColumnFormField.unit)
}
inline void LedgerColumnFormField::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.LedgerColumnFormField.unit)
}
inline ::std::string* LedgerColumnFormField::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.unit)
  return unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerColumnFormField::release_unit() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.unit)
  
  return unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerColumnFormField::set_allocated_unit(::std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.unit)
}

// string upLimit = 3;
inline void LedgerColumnFormField::clear_uplimit() {
  uplimit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerColumnFormField::uplimit() const {
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.upLimit)
  return uplimit_.GetNoArena();
}
inline void LedgerColumnFormField::set_uplimit(const ::std::string& value) {
  
  uplimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.LedgerColumnFormField.upLimit)
}
#if LANG_CXX11
inline void LedgerColumnFormField::set_uplimit(::std::string&& value) {
  
  uplimit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.LedgerColumnFormField.upLimit)
}
#endif
inline void LedgerColumnFormField::set_uplimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uplimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.LedgerColumnFormField.upLimit)
}
inline void LedgerColumnFormField::set_uplimit(const char* value, size_t size) {
  
  uplimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.LedgerColumnFormField.upLimit)
}
inline ::std::string* LedgerColumnFormField::mutable_uplimit() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.upLimit)
  return uplimit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerColumnFormField::release_uplimit() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.upLimit)
  
  return uplimit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerColumnFormField::set_allocated_uplimit(::std::string* uplimit) {
  if (uplimit != nullptr) {
    
  } else {
    
  }
  uplimit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uplimit);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.upLimit)
}

// string lowLimit = 4;
inline void LedgerColumnFormField::clear_lowlimit() {
  lowlimit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerColumnFormField::lowlimit() const {
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.lowLimit)
  return lowlimit_.GetNoArena();
}
inline void LedgerColumnFormField::set_lowlimit(const ::std::string& value) {
  
  lowlimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.LedgerColumnFormField.lowLimit)
}
#if LANG_CXX11
inline void LedgerColumnFormField::set_lowlimit(::std::string&& value) {
  
  lowlimit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.LedgerColumnFormField.lowLimit)
}
#endif
inline void LedgerColumnFormField::set_lowlimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lowlimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.LedgerColumnFormField.lowLimit)
}
inline void LedgerColumnFormField::set_lowlimit(const char* value, size_t size) {
  
  lowlimit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.LedgerColumnFormField.lowLimit)
}
inline ::std::string* LedgerColumnFormField::mutable_lowlimit() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.lowLimit)
  return lowlimit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerColumnFormField::release_lowlimit() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.lowLimit)
  
  return lowlimit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerColumnFormField::set_allocated_lowlimit(::std::string* lowlimit) {
  if (lowlimit != nullptr) {
    
  } else {
    
  }
  lowlimit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lowlimit);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.lowLimit)
}

// .claros.common.recurrence.Recurrence timeWindow = 5;
inline bool LedgerColumnFormField::has_timewindow() const {
  return this != internal_default_instance() && timewindow_ != nullptr;
}
inline const ::claros::common::recurrence::Recurrence& LedgerColumnFormField::timewindow() const {
  const ::claros::common::recurrence::Recurrence* p = timewindow_;
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.timeWindow)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::recurrence::Recurrence*>(
      &::claros::common::recurrence::_Recurrence_default_instance_);
}
inline ::claros::common::recurrence::Recurrence* LedgerColumnFormField::release_timewindow() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.timeWindow)
  
  ::claros::common::recurrence::Recurrence* temp = timewindow_;
  timewindow_ = nullptr;
  return temp;
}
inline ::claros::common::recurrence::Recurrence* LedgerColumnFormField::mutable_timewindow() {
  
  if (timewindow_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::recurrence::Recurrence>(GetArenaNoVirtual());
    timewindow_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.timeWindow)
  return timewindow_;
}
inline void LedgerColumnFormField::set_allocated_timewindow(::claros::common::recurrence::Recurrence* timewindow) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timewindow_);
  }
  if (timewindow) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timewindow = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timewindow, submessage_arena);
    }
    
  } else {
    
  }
  timewindow_ = timewindow;
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.timeWindow)
}

// string parameter = 6;
inline void LedgerColumnFormField::clear_parameter() {
  parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LedgerColumnFormField::parameter() const {
  // @@protoc_insertion_point(field_get:claros.common.form.LedgerColumnFormField.parameter)
  return parameter_.GetNoArena();
}
inline void LedgerColumnFormField::set_parameter(const ::std::string& value) {
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.form.LedgerColumnFormField.parameter)
}
#if LANG_CXX11
inline void LedgerColumnFormField::set_parameter(::std::string&& value) {
  
  parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.form.LedgerColumnFormField.parameter)
}
#endif
inline void LedgerColumnFormField::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.form.LedgerColumnFormField.parameter)
}
inline void LedgerColumnFormField::set_parameter(const char* value, size_t size) {
  
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.form.LedgerColumnFormField.parameter)
}
inline ::std::string* LedgerColumnFormField::mutable_parameter() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.form.LedgerColumnFormField.parameter)
  return parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LedgerColumnFormField::release_parameter() {
  // @@protoc_insertion_point(field_release:claros.common.form.LedgerColumnFormField.parameter)
  
  return parameter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LedgerColumnFormField::set_allocated_parameter(::std::string* parameter) {
  if (parameter != nullptr) {
    
  } else {
    
  }
  parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter);
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.LedgerColumnFormField.parameter)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace form
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fform_5fledgercolumnformfield_2eproto
