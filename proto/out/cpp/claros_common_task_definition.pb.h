// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_definition.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5fdefinition_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5fdefinition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_task_definition_binding_instrument_maintenance.pb.h"
#include "claros_common_task_definition_source.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5ftask_5fdefinition_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5ftask_5fdefinition_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5ftask_5fdefinition_2eproto();
namespace claros {
namespace common {
namespace task {
class TaskDefinition;
class TaskDefinitionDefaultTypeInternal;
extern TaskDefinitionDefaultTypeInternal _TaskDefinition_default_instance_;
}  // namespace task
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::task::TaskDefinition* Arena::CreateMaybeMessage<::claros::common::task::TaskDefinition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace task {

enum TaskDefinition_MaintenanceTriggerType {
  TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_UNKNOWN = 0,
  TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_SCHEDULED = 1,
  TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_PROGNOSYS = 2,
  TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_MANUAL = 3,
  TaskDefinition_MaintenanceTriggerType_TaskDefinition_MaintenanceTriggerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  TaskDefinition_MaintenanceTriggerType_TaskDefinition_MaintenanceTriggerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool TaskDefinition_MaintenanceTriggerType_IsValid(int value);
const TaskDefinition_MaintenanceTriggerType TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_MIN = TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_UNKNOWN;
const TaskDefinition_MaintenanceTriggerType TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_MAX = TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_MANUAL;
const int TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_ARRAYSIZE = TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskDefinition_MaintenanceTriggerType_descriptor();
inline const ::std::string& TaskDefinition_MaintenanceTriggerType_Name(TaskDefinition_MaintenanceTriggerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskDefinition_MaintenanceTriggerType_descriptor(), value);
}
inline bool TaskDefinition_MaintenanceTriggerType_Parse(
    const ::std::string& name, TaskDefinition_MaintenanceTriggerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskDefinition_MaintenanceTriggerType>(
    TaskDefinition_MaintenanceTriggerType_descriptor(), name, value);
}
// ===================================================================

class TaskDefinition :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.task.TaskDefinition) */ {
 public:
  TaskDefinition();
  virtual ~TaskDefinition();

  TaskDefinition(const TaskDefinition& from);

  inline TaskDefinition& operator=(const TaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskDefinition(TaskDefinition&& from) noexcept
    : TaskDefinition() {
    *this = ::std::move(from);
  }

  inline TaskDefinition& operator=(TaskDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskDefinition& default_instance();

  enum BindingCase {
    kBindingInstrumentMaintenance = 3,
    BINDING_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskDefinition* internal_default_instance() {
    return reinterpret_cast<const TaskDefinition*>(
               &_TaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskDefinition* other);
  friend void swap(TaskDefinition& a, TaskDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskDefinition* New() const final {
    return CreateMaybeMessage<TaskDefinition>(nullptr);
  }

  TaskDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskDefinition& from);
  void MergeFrom(const TaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskDefinition_MaintenanceTriggerType MaintenanceTriggerType;
  static const MaintenanceTriggerType MAINTENANCE_TRIGGER_UNKNOWN =
    TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_UNKNOWN;
  static const MaintenanceTriggerType MAINTENANCE_TRIGGER_SCHEDULED =
    TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_SCHEDULED;
  static const MaintenanceTriggerType MAINTENANCE_TRIGGER_PROGNOSYS =
    TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_PROGNOSYS;
  static const MaintenanceTriggerType MAINTENANCE_TRIGGER_MANUAL =
    TaskDefinition_MaintenanceTriggerType_MAINTENANCE_TRIGGER_MANUAL;
  static inline bool MaintenanceTriggerType_IsValid(int value) {
    return TaskDefinition_MaintenanceTriggerType_IsValid(value);
  }
  static const MaintenanceTriggerType MaintenanceTriggerType_MIN =
    TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_MIN;
  static const MaintenanceTriggerType MaintenanceTriggerType_MAX =
    TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_MAX;
  static const int MaintenanceTriggerType_ARRAYSIZE =
    TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MaintenanceTriggerType_descriptor() {
    return TaskDefinition_MaintenanceTriggerType_descriptor();
  }
  static inline const ::std::string& MaintenanceTriggerType_Name(MaintenanceTriggerType value) {
    return TaskDefinition_MaintenanceTriggerType_Name(value);
  }
  static inline bool MaintenanceTriggerType_Parse(const ::std::string& name,
      MaintenanceTriggerType* value) {
    return TaskDefinition_MaintenanceTriggerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .claros.common.task.TaskDefinitionSource taskSource = 1;
  int tasksource_size() const;
  void clear_tasksource();
  static const int kTaskSourceFieldNumber = 1;
  ::claros::common::task::TaskDefinitionSource* mutable_tasksource(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::common::task::TaskDefinitionSource >*
      mutable_tasksource();
  const ::claros::common::task::TaskDefinitionSource& tasksource(int index) const;
  ::claros::common::task::TaskDefinitionSource* add_tasksource();
  const ::google::protobuf::RepeatedPtrField< ::claros::common::task::TaskDefinitionSource >&
      tasksource() const;

  // .claros.common.task.TaskDefinition.MaintenanceTriggerType triggerType = 2;
  void clear_triggertype();
  static const int kTriggerTypeFieldNumber = 2;
  ::claros::common::task::TaskDefinition_MaintenanceTriggerType triggertype() const;
  void set_triggertype(::claros::common::task::TaskDefinition_MaintenanceTriggerType value);

  // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 3;
  bool has_bindinginstrumentmaintenance() const;
  void clear_bindinginstrumentmaintenance();
  static const int kBindingInstrumentMaintenanceFieldNumber = 3;
  const ::claros::common::task::BindingInstrumentMaintenance& bindinginstrumentmaintenance() const;
  ::claros::common::task::BindingInstrumentMaintenance* release_bindinginstrumentmaintenance();
  ::claros::common::task::BindingInstrumentMaintenance* mutable_bindinginstrumentmaintenance();
  void set_allocated_bindinginstrumentmaintenance(::claros::common::task::BindingInstrumentMaintenance* bindinginstrumentmaintenance);

  void clear_binding();
  BindingCase binding_case() const;
  // @@protoc_insertion_point(class_scope:claros.common.task.TaskDefinition)
 private:
  class HasBitSetters;
  void set_has_bindinginstrumentmaintenance();

  inline bool has_binding() const;
  inline void clear_has_binding();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::common::task::TaskDefinitionSource > tasksource_;
  int triggertype_;
  union BindingUnion {
    BindingUnion() {}
    ::claros::common::task::BindingInstrumentMaintenance* bindinginstrumentmaintenance_;
  } binding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_claros_5fcommon_5ftask_5fdefinition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskDefinition

// repeated .claros.common.task.TaskDefinitionSource taskSource = 1;
inline int TaskDefinition::tasksource_size() const {
  return tasksource_.size();
}
inline ::claros::common::task::TaskDefinitionSource* TaskDefinition::mutable_tasksource(int index) {
  // @@protoc_insertion_point(field_mutable:claros.common.task.TaskDefinition.taskSource)
  return tasksource_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::common::task::TaskDefinitionSource >*
TaskDefinition::mutable_tasksource() {
  // @@protoc_insertion_point(field_mutable_list:claros.common.task.TaskDefinition.taskSource)
  return &tasksource_;
}
inline const ::claros::common::task::TaskDefinitionSource& TaskDefinition::tasksource(int index) const {
  // @@protoc_insertion_point(field_get:claros.common.task.TaskDefinition.taskSource)
  return tasksource_.Get(index);
}
inline ::claros::common::task::TaskDefinitionSource* TaskDefinition::add_tasksource() {
  // @@protoc_insertion_point(field_add:claros.common.task.TaskDefinition.taskSource)
  return tasksource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::common::task::TaskDefinitionSource >&
TaskDefinition::tasksource() const {
  // @@protoc_insertion_point(field_list:claros.common.task.TaskDefinition.taskSource)
  return tasksource_;
}

// .claros.common.task.TaskDefinition.MaintenanceTriggerType triggerType = 2;
inline void TaskDefinition::clear_triggertype() {
  triggertype_ = 0;
}
inline ::claros::common::task::TaskDefinition_MaintenanceTriggerType TaskDefinition::triggertype() const {
  // @@protoc_insertion_point(field_get:claros.common.task.TaskDefinition.triggerType)
  return static_cast< ::claros::common::task::TaskDefinition_MaintenanceTriggerType >(triggertype_);
}
inline void TaskDefinition::set_triggertype(::claros::common::task::TaskDefinition_MaintenanceTriggerType value) {
  
  triggertype_ = value;
  // @@protoc_insertion_point(field_set:claros.common.task.TaskDefinition.triggerType)
}

// .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 3;
inline bool TaskDefinition::has_bindinginstrumentmaintenance() const {
  return binding_case() == kBindingInstrumentMaintenance;
}
inline void TaskDefinition::set_has_bindinginstrumentmaintenance() {
  _oneof_case_[0] = kBindingInstrumentMaintenance;
}
inline ::claros::common::task::BindingInstrumentMaintenance* TaskDefinition::release_bindinginstrumentmaintenance() {
  // @@protoc_insertion_point(field_release:claros.common.task.TaskDefinition.bindingInstrumentMaintenance)
  if (has_bindinginstrumentmaintenance()) {
    clear_has_binding();
      ::claros::common::task::BindingInstrumentMaintenance* temp = binding_.bindinginstrumentmaintenance_;
    binding_.bindinginstrumentmaintenance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::claros::common::task::BindingInstrumentMaintenance& TaskDefinition::bindinginstrumentmaintenance() const {
  // @@protoc_insertion_point(field_get:claros.common.task.TaskDefinition.bindingInstrumentMaintenance)
  return has_bindinginstrumentmaintenance()
      ? *binding_.bindinginstrumentmaintenance_
      : *reinterpret_cast< ::claros::common::task::BindingInstrumentMaintenance*>(&::claros::common::task::_BindingInstrumentMaintenance_default_instance_);
}
inline ::claros::common::task::BindingInstrumentMaintenance* TaskDefinition::mutable_bindinginstrumentmaintenance() {
  if (!has_bindinginstrumentmaintenance()) {
    clear_binding();
    set_has_bindinginstrumentmaintenance();
    binding_.bindinginstrumentmaintenance_ = CreateMaybeMessage< ::claros::common::task::BindingInstrumentMaintenance >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:claros.common.task.TaskDefinition.bindingInstrumentMaintenance)
  return binding_.bindinginstrumentmaintenance_;
}

inline bool TaskDefinition::has_binding() const {
  return binding_case() != BINDING_NOT_SET;
}
inline void TaskDefinition::clear_has_binding() {
  _oneof_case_[0] = BINDING_NOT_SET;
}
inline TaskDefinition::BindingCase TaskDefinition::binding_case() const {
  return TaskDefinition::BindingCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace common
}  // namespace claros

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::claros::common::task::TaskDefinition_MaintenanceTriggerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::claros::common::task::TaskDefinition_MaintenanceTriggerType>() {
  return ::claros::common::task::TaskDefinition_MaintenanceTriggerType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5ftask_5fdefinition_2eproto
