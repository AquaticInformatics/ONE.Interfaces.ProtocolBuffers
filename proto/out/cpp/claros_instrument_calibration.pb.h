// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_calibration.proto

#ifndef PROTOBUF_INCLUDED_claros_5finstrument_5fcalibration_2eproto
#define PROTOBUF_INCLUDED_claros_5finstrument_5fcalibration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_instrument_calibration_standard.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fcalibration_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5finstrument_5fcalibration_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5finstrument_5fcalibration_2eproto();
namespace claros {
namespace instrument {
class Calibration;
class CalibrationDefaultTypeInternal;
extern CalibrationDefaultTypeInternal _Calibration_default_instance_;
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::instrument::Calibration* Arena::CreateMaybeMessage<::claros::instrument::Calibration>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace instrument {

// ===================================================================

class Calibration :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.Calibration) */ {
 public:
  Calibration();
  virtual ~Calibration();

  Calibration(const Calibration& from);

  inline Calibration& operator=(const Calibration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Calibration(Calibration&& from) noexcept
    : Calibration() {
    *this = ::std::move(from);
  }

  inline Calibration& operator=(Calibration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Calibration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Calibration* internal_default_instance() {
    return reinterpret_cast<const Calibration*>(
               &_Calibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Calibration* other);
  friend void swap(Calibration& a, Calibration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Calibration* New() const final {
    return CreateMaybeMessage<Calibration>(nullptr);
  }

  Calibration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Calibration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Calibration& from);
  void MergeFrom(const Calibration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Calibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.instrument.CalibrationStandard calibrationStandards = 11;
  int calibrationstandards_size() const;
  void clear_calibrationstandards();
  static const int kCalibrationStandardsFieldNumber = 11;
  ::claros::instrument::CalibrationStandard* mutable_calibrationstandards(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::CalibrationStandard >*
      mutable_calibrationstandards();
  const ::claros::instrument::CalibrationStandard& calibrationstandards(int index) const;
  ::claros::instrument::CalibrationStandard* add_calibrationstandards();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::CalibrationStandard >&
      calibrationstandards() const;

  // string ID = 1;
  void clear_id();
  static const int kIDFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // uint64 time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // uint32 status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // uint32 offsetUnits = 5;
  void clear_offsetunits();
  static const int kOffsetUnitsFieldNumber = 5;
  ::google::protobuf::uint32 offsetunits() const;
  void set_offsetunits(::google::protobuf::uint32 value);

  // uint32 slopeUnits = 6;
  void clear_slopeunits();
  static const int kSlopeUnitsFieldNumber = 6;
  ::google::protobuf::uint32 slopeunits() const;
  void set_slopeunits(::google::protobuf::uint32 value);

  // float slope = 7;
  void clear_slope();
  static const int kSlopeFieldNumber = 7;
  float slope() const;
  void set_slope(float value);

  // float slopeAux = 8;
  void clear_slopeaux();
  static const int kSlopeAuxFieldNumber = 8;
  float slopeaux() const;
  void set_slopeaux(float value);

  // float offset = 9;
  void clear_offset();
  static const int kOffsetFieldNumber = 9;
  float offset() const;
  void set_offset(float value);

  // float r2 = 10;
  void clear_r2();
  static const int kR2FieldNumber = 10;
  float r2() const;
  void set_r2(float value);

  // @@protoc_insertion_point(class_scope:claros.instrument.Calibration)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::CalibrationStandard > calibrationstandards_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 offsetunits_;
  ::google::protobuf::uint32 slopeunits_;
  float slope_;
  float slopeaux_;
  float offset_;
  float r2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5finstrument_5fcalibration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Calibration

// string ID = 1;
inline void Calibration::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calibration::id() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.ID)
  return id_.GetNoArena();
}
inline void Calibration::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.ID)
}
#if LANG_CXX11
inline void Calibration::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.Calibration.ID)
}
#endif
inline void Calibration::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.Calibration.ID)
}
inline void Calibration::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.Calibration.ID)
}
inline ::std::string* Calibration::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.Calibration.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calibration::release_id() {
  // @@protoc_insertion_point(field_release:claros.instrument.Calibration.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calibration::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.Calibration.ID)
}

// string userID = 2;
inline void Calibration::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calibration::userid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.userID)
  return userid_.GetNoArena();
}
inline void Calibration::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.userID)
}
#if LANG_CXX11
inline void Calibration::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.Calibration.userID)
}
#endif
inline void Calibration::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.Calibration.userID)
}
inline void Calibration::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.Calibration.userID)
}
inline ::std::string* Calibration::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.Calibration.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calibration::release_userid() {
  // @@protoc_insertion_point(field_release:claros.instrument.Calibration.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calibration::set_allocated_userid(::std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.Calibration.userID)
}

// uint64 time = 3;
inline void Calibration::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Calibration::time() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.time)
  return time_;
}
inline void Calibration::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.time)
}

// uint32 status = 4;
inline void Calibration::clear_status() {
  status_ = 0u;
}
inline ::google::protobuf::uint32 Calibration::status() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.status)
  return status_;
}
inline void Calibration::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.status)
}

// uint32 offsetUnits = 5;
inline void Calibration::clear_offsetunits() {
  offsetunits_ = 0u;
}
inline ::google::protobuf::uint32 Calibration::offsetunits() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.offsetUnits)
  return offsetunits_;
}
inline void Calibration::set_offsetunits(::google::protobuf::uint32 value) {
  
  offsetunits_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.offsetUnits)
}

// uint32 slopeUnits = 6;
inline void Calibration::clear_slopeunits() {
  slopeunits_ = 0u;
}
inline ::google::protobuf::uint32 Calibration::slopeunits() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.slopeUnits)
  return slopeunits_;
}
inline void Calibration::set_slopeunits(::google::protobuf::uint32 value) {
  
  slopeunits_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.slopeUnits)
}

// float slope = 7;
inline void Calibration::clear_slope() {
  slope_ = 0;
}
inline float Calibration::slope() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.slope)
  return slope_;
}
inline void Calibration::set_slope(float value) {
  
  slope_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.slope)
}

// float slopeAux = 8;
inline void Calibration::clear_slopeaux() {
  slopeaux_ = 0;
}
inline float Calibration::slopeaux() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.slopeAux)
  return slopeaux_;
}
inline void Calibration::set_slopeaux(float value) {
  
  slopeaux_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.slopeAux)
}

// float offset = 9;
inline void Calibration::clear_offset() {
  offset_ = 0;
}
inline float Calibration::offset() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.offset)
  return offset_;
}
inline void Calibration::set_offset(float value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.offset)
}

// float r2 = 10;
inline void Calibration::clear_r2() {
  r2_ = 0;
}
inline float Calibration::r2() const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.r2)
  return r2_;
}
inline void Calibration::set_r2(float value) {
  
  r2_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.Calibration.r2)
}

// repeated .claros.instrument.CalibrationStandard calibrationStandards = 11;
inline int Calibration::calibrationstandards_size() const {
  return calibrationstandards_.size();
}
inline ::claros::instrument::CalibrationStandard* Calibration::mutable_calibrationstandards(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.Calibration.calibrationStandards)
  return calibrationstandards_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::CalibrationStandard >*
Calibration::mutable_calibrationstandards() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.Calibration.calibrationStandards)
  return &calibrationstandards_;
}
inline const ::claros::instrument::CalibrationStandard& Calibration::calibrationstandards(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.Calibration.calibrationStandards)
  return calibrationstandards_.Get(index);
}
inline ::claros::instrument::CalibrationStandard* Calibration::add_calibrationstandards() {
  // @@protoc_insertion_point(field_add:claros.instrument.Calibration.calibrationStandards)
  return calibrationstandards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::CalibrationStandard >&
Calibration::calibrationstandards() const {
  // @@protoc_insertion_point(field_list:claros.instrument.Calibration.calibrationStandards)
  return calibrationstandards_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace instrument
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5finstrument_5fcalibration_2eproto
