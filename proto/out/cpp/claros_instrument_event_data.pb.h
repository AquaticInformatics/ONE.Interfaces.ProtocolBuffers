// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_event_data.proto

#ifndef PROTOBUF_INCLUDED_claros_5finstrument_5fevent_5fdata_2eproto
#define PROTOBUF_INCLUDED_claros_5finstrument_5fevent_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_clarosdatetime.pb.h"
#include "claros_instrument_event_data_metadata.pb.h"
#include "claros_instrument_event_data_calibration.pb.h"
#include "claros_instrument_event_data_prognosys.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fevent_5fdata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5finstrument_5fevent_5fdata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5finstrument_5fevent_5fdata_2eproto();
namespace claros {
namespace instrument {
namespace event {
class InstrumentEventData;
class InstrumentEventDataDefaultTypeInternal;
extern InstrumentEventDataDefaultTypeInternal _InstrumentEventData_default_instance_;
}  // namespace event
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::instrument::event::InstrumentEventData* Arena::CreateMaybeMessage<::claros::instrument::event::InstrumentEventData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace instrument {
namespace event {

// ===================================================================

class InstrumentEventData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.event.InstrumentEventData) */ {
 public:
  InstrumentEventData();
  virtual ~InstrumentEventData();

  InstrumentEventData(const InstrumentEventData& from);

  inline InstrumentEventData& operator=(const InstrumentEventData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentEventData(InstrumentEventData&& from) noexcept
    : InstrumentEventData() {
    *this = ::std::move(from);
  }

  inline InstrumentEventData& operator=(InstrumentEventData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InstrumentEventData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentEventData* internal_default_instance() {
    return reinterpret_cast<const InstrumentEventData*>(
               &_InstrumentEventData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InstrumentEventData* other);
  friend void swap(InstrumentEventData& a, InstrumentEventData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentEventData* New() const final {
    return CreateMaybeMessage<InstrumentEventData>(nullptr);
  }

  InstrumentEventData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentEventData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentEventData& from);
  void MergeFrom(const InstrumentEventData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentEventData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .claros.instrument.event.EventDataCalibration calibrations = 1;
  int calibrations_size() const;
  void clear_calibrations();
  static const int kCalibrationsFieldNumber = 1;
  ::claros::instrument::event::EventDataCalibration* mutable_calibrations(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataCalibration >*
      mutable_calibrations();
  const ::claros::instrument::event::EventDataCalibration& calibrations(int index) const;
  ::claros::instrument::event::EventDataCalibration* add_calibrations();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataCalibration >&
      calibrations() const;

  // repeated .claros.instrument.event.EventDataMetaData errors = 2;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 2;
  ::claros::instrument::event::EventDataMetaData* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
      mutable_errors();
  const ::claros::instrument::event::EventDataMetaData& errors(int index) const;
  ::claros::instrument::event::EventDataMetaData* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
      errors() const;

  // repeated .claros.instrument.event.EventDataMetaData info = 3;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 3;
  ::claros::instrument::event::EventDataMetaData* mutable_info(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
      mutable_info();
  const ::claros::instrument::event::EventDataMetaData& info(int index) const;
  ::claros::instrument::event::EventDataMetaData* add_info();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
      info() const;

  // repeated .claros.instrument.event.EventDataMetaData limits = 4;
  int limits_size() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 4;
  ::claros::instrument::event::EventDataMetaData* mutable_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
      mutable_limits();
  const ::claros::instrument::event::EventDataMetaData& limits(int index) const;
  ::claros::instrument::event::EventDataMetaData* add_limits();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
      limits() const;

  // repeated .claros.instrument.event.EventDataMetaData reminders = 5;
  int reminders_size() const;
  void clear_reminders();
  static const int kRemindersFieldNumber = 5;
  ::claros::instrument::event::EventDataMetaData* mutable_reminders(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
      mutable_reminders();
  const ::claros::instrument::event::EventDataMetaData& reminders(int index) const;
  ::claros::instrument::event::EventDataMetaData* add_reminders();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
      reminders() const;

  // repeated .claros.instrument.event.EventDataMetaData warnings = 6;
  int warnings_size() const;
  void clear_warnings();
  static const int kWarningsFieldNumber = 6;
  ::claros::instrument::event::EventDataMetaData* mutable_warnings(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
      mutable_warnings();
  const ::claros::instrument::event::EventDataMetaData& warnings(int index) const;
  ::claros::instrument::event::EventDataMetaData* add_warnings();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
      warnings() const;

  // repeated .claros.instrument.event.EventDataPrognosys prognosys = 7;
  int prognosys_size() const;
  void clear_prognosys();
  static const int kPrognosysFieldNumber = 7;
  ::claros::instrument::event::EventDataPrognosys* mutable_prognosys(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataPrognosys >*
      mutable_prognosys();
  const ::claros::instrument::event::EventDataPrognosys& prognosys(int index) const;
  ::claros::instrument::event::EventDataPrognosys* add_prognosys();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataPrognosys >&
      prognosys() const;

  // .claros.common.core.ClarosDateTime eventDateTime = 8;
  bool has_eventdatetime() const;
  void clear_eventdatetime();
  static const int kEventDateTimeFieldNumber = 8;
  const ::claros::common::core::ClarosDateTime& eventdatetime() const;
  ::claros::common::core::ClarosDateTime* release_eventdatetime();
  ::claros::common::core::ClarosDateTime* mutable_eventdatetime();
  void set_allocated_eventdatetime(::claros::common::core::ClarosDateTime* eventdatetime);

  // @@protoc_insertion_point(class_scope:claros.instrument.event.InstrumentEventData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataCalibration > calibrations_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData > errors_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData > info_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData > limits_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData > reminders_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData > warnings_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataPrognosys > prognosys_;
  ::claros::common::core::ClarosDateTime* eventdatetime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5finstrument_5fevent_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentEventData

// repeated .claros.instrument.event.EventDataCalibration calibrations = 1;
inline int InstrumentEventData::calibrations_size() const {
  return calibrations_.size();
}
inline ::claros::instrument::event::EventDataCalibration* InstrumentEventData::mutable_calibrations(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.calibrations)
  return calibrations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataCalibration >*
InstrumentEventData::mutable_calibrations() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.calibrations)
  return &calibrations_;
}
inline const ::claros::instrument::event::EventDataCalibration& InstrumentEventData::calibrations(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.calibrations)
  return calibrations_.Get(index);
}
inline ::claros::instrument::event::EventDataCalibration* InstrumentEventData::add_calibrations() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.calibrations)
  return calibrations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataCalibration >&
InstrumentEventData::calibrations() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.calibrations)
  return calibrations_;
}

// repeated .claros.instrument.event.EventDataMetaData errors = 2;
inline int InstrumentEventData::errors_size() const {
  return errors_.size();
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
InstrumentEventData::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.errors)
  return &errors_;
}
inline const ::claros::instrument::event::EventDataMetaData& InstrumentEventData::errors(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.errors)
  return errors_.Get(index);
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::add_errors() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
InstrumentEventData::errors() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.errors)
  return errors_;
}

// repeated .claros.instrument.event.EventDataMetaData info = 3;
inline int InstrumentEventData::info_size() const {
  return info_.size();
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.info)
  return info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
InstrumentEventData::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.info)
  return &info_;
}
inline const ::claros::instrument::event::EventDataMetaData& InstrumentEventData::info(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.info)
  return info_.Get(index);
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::add_info() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
InstrumentEventData::info() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.info)
  return info_;
}

// repeated .claros.instrument.event.EventDataMetaData limits = 4;
inline int InstrumentEventData::limits_size() const {
  return limits_.size();
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.limits)
  return limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
InstrumentEventData::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.limits)
  return &limits_;
}
inline const ::claros::instrument::event::EventDataMetaData& InstrumentEventData::limits(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.limits)
  return limits_.Get(index);
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::add_limits() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.limits)
  return limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
InstrumentEventData::limits() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.limits)
  return limits_;
}

// repeated .claros.instrument.event.EventDataMetaData reminders = 5;
inline int InstrumentEventData::reminders_size() const {
  return reminders_.size();
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::mutable_reminders(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.reminders)
  return reminders_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
InstrumentEventData::mutable_reminders() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.reminders)
  return &reminders_;
}
inline const ::claros::instrument::event::EventDataMetaData& InstrumentEventData::reminders(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.reminders)
  return reminders_.Get(index);
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::add_reminders() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.reminders)
  return reminders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
InstrumentEventData::reminders() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.reminders)
  return reminders_;
}

// repeated .claros.instrument.event.EventDataMetaData warnings = 6;
inline int InstrumentEventData::warnings_size() const {
  return warnings_.size();
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::mutable_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.warnings)
  return warnings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >*
InstrumentEventData::mutable_warnings() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.warnings)
  return &warnings_;
}
inline const ::claros::instrument::event::EventDataMetaData& InstrumentEventData::warnings(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.warnings)
  return warnings_.Get(index);
}
inline ::claros::instrument::event::EventDataMetaData* InstrumentEventData::add_warnings() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.warnings)
  return warnings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataMetaData >&
InstrumentEventData::warnings() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.warnings)
  return warnings_;
}

// repeated .claros.instrument.event.EventDataPrognosys prognosys = 7;
inline int InstrumentEventData::prognosys_size() const {
  return prognosys_.size();
}
inline ::claros::instrument::event::EventDataPrognosys* InstrumentEventData::mutable_prognosys(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.prognosys)
  return prognosys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataPrognosys >*
InstrumentEventData::mutable_prognosys() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.event.InstrumentEventData.prognosys)
  return &prognosys_;
}
inline const ::claros::instrument::event::EventDataPrognosys& InstrumentEventData::prognosys(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.prognosys)
  return prognosys_.Get(index);
}
inline ::claros::instrument::event::EventDataPrognosys* InstrumentEventData::add_prognosys() {
  // @@protoc_insertion_point(field_add:claros.instrument.event.InstrumentEventData.prognosys)
  return prognosys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::event::EventDataPrognosys >&
InstrumentEventData::prognosys() const {
  // @@protoc_insertion_point(field_list:claros.instrument.event.InstrumentEventData.prognosys)
  return prognosys_;
}

// .claros.common.core.ClarosDateTime eventDateTime = 8;
inline bool InstrumentEventData::has_eventdatetime() const {
  return this != internal_default_instance() && eventdatetime_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& InstrumentEventData::eventdatetime() const {
  const ::claros::common::core::ClarosDateTime* p = eventdatetime_;
  // @@protoc_insertion_point(field_get:claros.instrument.event.InstrumentEventData.eventDateTime)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* InstrumentEventData::release_eventdatetime() {
  // @@protoc_insertion_point(field_release:claros.instrument.event.InstrumentEventData.eventDateTime)
  
  ::claros::common::core::ClarosDateTime* temp = eventdatetime_;
  eventdatetime_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* InstrumentEventData::mutable_eventdatetime() {
  
  if (eventdatetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    eventdatetime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.event.InstrumentEventData.eventDateTime)
  return eventdatetime_;
}
inline void InstrumentEventData::set_allocated_eventdatetime(::claros::common::core::ClarosDateTime* eventdatetime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(eventdatetime_);
  }
  if (eventdatetime) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eventdatetime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, eventdatetime, submessage_arena);
    }
    
  } else {
    
  }
  eventdatetime_ = eventdatetime;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.event.InstrumentEventData.eventDateTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace event
}  // namespace instrument
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5finstrument_5fevent_5fdata_2eproto
