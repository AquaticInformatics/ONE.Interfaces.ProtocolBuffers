// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_recurrence.proto

#include "claros_common_core_recurrence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fclarosdatetime_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto;
namespace claros {
namespace common {
namespace core {
class RecurrenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Recurrence> _instance;
} _Recurrence_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
static void InitDefaultsRecurrence_claros_5fcommon_5fcore_5frecurrence_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::core::_Recurrence_default_instance_;
    new (ptr) ::claros::common::core::Recurrence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::core::Recurrence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRecurrence_claros_5fcommon_5fcore_5frecurrence_2eproto}, {
      &scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fcore_5frecurrence_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fcore_5frecurrence_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fcore_5frecurrence_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fcore_5frecurrence_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fcore_5frecurrence_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, type_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, startdate_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, minuteoffset_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, daysofweek_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::Recurrence, duration_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::core::Recurrence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::core::_Recurrence_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fcore_5frecurrence_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fcore_5frecurrence_2eproto, "claros_common_core_recurrence.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fcore_5frecurrence_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fcore_5frecurrence_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fcore_5frecurrence_2eproto, file_level_service_descriptors_claros_5fcommon_5fcore_5frecurrence_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fcore_5frecurrence_2eproto[] =
  "\n#claros_common_core_recurrence.proto\022\022c"
  "laros.common.core\032(claros_common_core_re"
  "currence_type.proto\032\'claros_common_core_"
  "clarosdatetime.proto\032\"claros_common_core"
  "_dayofweek.proto\"\320\001\n\nRecurrence\0220\n\004type\030"
  "\001 \001(\0162\".claros.common.core.RecurrenceTyp"
  "e\0225\n\tstartDate\030\002 \001(\0132\".claros.common.cor"
  "e.ClarosDateTime\022\024\n\014minuteOffset\030\003 \001(\r\0221"
  "\n\ndaysOfWeek\030\004 \003(\0162\035.claros.common.core."
  "DayOfWeek\022\020\n\010duration\030\005 \001(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fcore_5frecurrence_2eproto = {
  false, InitDefaults_claros_5fcommon_5fcore_5frecurrence_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fcore_5frecurrence_2eproto,
  "claros_common_core_recurrence.proto", &assign_descriptors_table_claros_5fcommon_5fcore_5frecurrence_2eproto, 395,
};

void AddDescriptors_claros_5fcommon_5fcore_5frecurrence_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5frecurrence_5ftype_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5fdayofweek_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fcore_5frecurrence_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fcore_5frecurrence_2eproto = []() { AddDescriptors_claros_5fcommon_5fcore_5frecurrence_2eproto(); return true; }();
namespace claros {
namespace common {
namespace core {

// ===================================================================

void Recurrence::InitAsDefaultInstance() {
  ::claros::common::core::_Recurrence_default_instance_._instance.get_mutable()->startdate_ = const_cast< ::claros::common::core::ClarosDateTime*>(
      ::claros::common::core::ClarosDateTime::internal_default_instance());
}
class Recurrence::HasBitSetters {
 public:
  static const ::claros::common::core::ClarosDateTime& startdate(const Recurrence* msg);
};

const ::claros::common::core::ClarosDateTime&
Recurrence::HasBitSetters::startdate(const Recurrence* msg) {
  return *msg->startdate_;
}
void Recurrence::clear_startdate() {
  if (GetArenaNoVirtual() == nullptr && startdate_ != nullptr) {
    delete startdate_;
  }
  startdate_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Recurrence::kTypeFieldNumber;
const int Recurrence::kStartDateFieldNumber;
const int Recurrence::kMinuteOffsetFieldNumber;
const int Recurrence::kDaysOfWeekFieldNumber;
const int Recurrence::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Recurrence::Recurrence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.core.Recurrence)
}
Recurrence::Recurrence(const Recurrence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      daysofweek_(from.daysofweek_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_startdate()) {
    startdate_ = new ::claros::common::core::ClarosDateTime(*from.startdate_);
  } else {
    startdate_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&type_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:claros.common.core.Recurrence)
}

void Recurrence::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto.base);
  ::memset(&startdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&startdate_)) + sizeof(duration_));
}

Recurrence::~Recurrence() {
  // @@protoc_insertion_point(destructor:claros.common.core.Recurrence)
  SharedDtor();
}

void Recurrence::SharedDtor() {
  if (this != internal_default_instance()) delete startdate_;
}

void Recurrence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Recurrence& Recurrence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Recurrence_claros_5fcommon_5fcore_5frecurrence_2eproto.base);
  return *internal_default_instance();
}


void Recurrence::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.core.Recurrence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daysofweek_.Clear();
  if (GetArenaNoVirtual() == nullptr && startdate_ != nullptr) {
    delete startdate_;
  }
  startdate_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&type_)) + sizeof(duration_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Recurrence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Recurrence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.core.RecurrenceType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::claros::common::core::RecurrenceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .claros.common.core.ClarosDateTime startDate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::ClarosDateTime::_InternalParse;
        object = msg->mutable_startdate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 minuteOffset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_minuteoffset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_daysofweek();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_daysofweek(static_cast<::claros::common::core::DayOfWeek>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // uint32 duration = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Recurrence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.core.Recurrence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.core.RecurrenceType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::claros::common::core::RecurrenceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.ClarosDateTime startDate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_startdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 minuteOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minuteoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_daysofweek(static_cast< ::claros::common::core::DayOfWeek >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_daysofweek(static_cast< ::claros::common::core::DayOfWeek >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.core.Recurrence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.core.Recurrence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Recurrence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.core.Recurrence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.core.RecurrenceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .claros.common.core.ClarosDateTime startDate = 2;
  if (this->has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::startdate(this), output);
  }

  // uint32 minuteOffset = 3;
  if (this->minuteoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minuteoffset(), output);
  }

  // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
  if (this->daysofweek_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_daysofweek_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->daysofweek_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->daysofweek(i), output);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.core.Recurrence)
}

::google::protobuf::uint8* Recurrence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.core.Recurrence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.core.RecurrenceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .claros.common.core.ClarosDateTime startDate = 2;
  if (this->has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::startdate(this), target);
  }

  // uint32 minuteOffset = 3;
  if (this->minuteoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minuteoffset(), target);
  }

  // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
  if (this->daysofweek_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _daysofweek_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->daysofweek_, target);
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.core.Recurrence)
  return target;
}

size_t Recurrence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.core.Recurrence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .claros.common.core.DayOfWeek daysOfWeek = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->daysofweek_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->daysofweek(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _daysofweek_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .claros.common.core.ClarosDateTime startDate = 2;
  if (this->has_startdate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *startdate_);
  }

  // .claros.common.core.RecurrenceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 minuteOffset = 3;
  if (this->minuteoffset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minuteoffset());
  }

  // uint32 duration = 5;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Recurrence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.core.Recurrence)
  GOOGLE_DCHECK_NE(&from, this);
  const Recurrence* source =
      ::google::protobuf::DynamicCastToGenerated<Recurrence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.core.Recurrence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.core.Recurrence)
    MergeFrom(*source);
  }
}

void Recurrence::MergeFrom(const Recurrence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.core.Recurrence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  daysofweek_.MergeFrom(from.daysofweek_);
  if (from.has_startdate()) {
    mutable_startdate()->::claros::common::core::ClarosDateTime::MergeFrom(from.startdate());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.minuteoffset() != 0) {
    set_minuteoffset(from.minuteoffset());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void Recurrence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.core.Recurrence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recurrence::CopyFrom(const Recurrence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.core.Recurrence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recurrence::IsInitialized() const {
  return true;
}

void Recurrence::Swap(Recurrence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recurrence::InternalSwap(Recurrence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  daysofweek_.InternalSwap(&other->daysofweek_);
  swap(startdate_, other->startdate_);
  swap(type_, other->type_);
  swap(minuteoffset_, other->minuteoffset_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata Recurrence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fcore_5frecurrence_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fcore_5frecurrence_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::core::Recurrence* Arena::CreateMaybeMessage< ::claros::common::core::Recurrence >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::core::Recurrence >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
