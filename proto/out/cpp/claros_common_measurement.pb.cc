// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_measurement.proto

#include "claros_common_measurement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fdatetime_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto;
namespace claros {
namespace common {
class MeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measurement> _instance;
} _Measurement_default_instance_;
}  // namespace common
}  // namespace claros
static void InitDefaultsMeasurement_claros_5fcommon_5fmeasurement_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::_Measurement_default_instance_;
    new (ptr) ::claros::common::Measurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::Measurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Measurement_claros_5fcommon_5fmeasurement_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMeasurement_claros_5fcommon_5fmeasurement_2eproto}, {
      &scc_info_DateTime_claros_5fcommon_5fdatetime_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fmeasurement_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Measurement_claros_5fcommon_5fmeasurement_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fmeasurement_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fmeasurement_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fmeasurement_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fmeasurement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, timestamp_),
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, parameterid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, parameterguid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, unitid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, unitguid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::Measurement, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::Measurement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::_Measurement_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fmeasurement_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fmeasurement_2eproto, "claros_common_measurement.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fmeasurement_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fmeasurement_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fmeasurement_2eproto, file_level_service_descriptors_claros_5fcommon_5fmeasurement_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fmeasurement_2eproto[] =
  "\n\037claros_common_measurement.proto\022\rclaro"
  "s.common\032\034claros_common_datetime.proto\"\226"
  "\001\n\013Measurement\022*\n\ttimestamp\030\001 \001(\0132\027.clar"
  "os.common.DateTime\022\023\n\013parameterId\030\002 \001(\005\022"
  "\025\n\rparameterGuid\030\003 \001(\t\022\016\n\006unitId\030\004 \001(\005\022\020"
  "\n\010unitGuid\030\005 \001(\t\022\r\n\005value\030\006 \001(\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fmeasurement_2eproto = {
  false, InitDefaults_claros_5fcommon_5fmeasurement_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fmeasurement_2eproto,
  "claros_common_measurement.proto", &assign_descriptors_table_claros_5fcommon_5fmeasurement_2eproto, 239,
};

void AddDescriptors_claros_5fcommon_5fmeasurement_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_claros_5fcommon_5fdatetime_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fmeasurement_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fmeasurement_2eproto = []() { AddDescriptors_claros_5fcommon_5fmeasurement_2eproto(); return true; }();
namespace claros {
namespace common {

// ===================================================================

void Measurement::InitAsDefaultInstance() {
  ::claros::common::_Measurement_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::claros::common::DateTime*>(
      ::claros::common::DateTime::internal_default_instance());
}
class Measurement::HasBitSetters {
 public:
  static const ::claros::common::DateTime& timestamp(const Measurement* msg);
};

const ::claros::common::DateTime&
Measurement::HasBitSetters::timestamp(const Measurement* msg) {
  return *msg->timestamp_;
}
void Measurement::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kTimestampFieldNumber;
const int Measurement::kParameterIdFieldNumber;
const int Measurement::kParameterGuidFieldNumber;
const int Measurement::kUnitIdFieldNumber;
const int Measurement::kUnitGuidFieldNumber;
const int Measurement::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameterguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parameterguid().size() > 0) {
    parameterguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameterguid_);
  }
  unitguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unitguid().size() > 0) {
    unitguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitguid_);
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::claros::common::DateTime(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&parameterid_, &from.parameterid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&parameterid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:claros.common.Measurement)
}

void Measurement::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Measurement_claros_5fcommon_5fmeasurement_2eproto.base);
  parameterguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitguid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(value_));
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:claros.common.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
  parameterguid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitguid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Measurement& Measurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Measurement_claros_5fcommon_5fmeasurement_2eproto.base);
  return *internal_default_instance();
}


void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameterguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unitguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&parameterid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&parameterid_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Measurement::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Measurement*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.ClarosDateTime timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::DateTime::_InternalParse;
        object = msg->mutable_timestamp();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 parameterId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_parameterid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string parameterGuid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.Measurement.parameterGuid");
        object = msg->mutable_parameterguid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 unitId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_unitid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string unitGuid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.Measurement.unitGuid");
        object = msg->mutable_unitguid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // float value = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.Measurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.ClarosDateTime timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parameterId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parameterid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parameterGuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameterguid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parameterguid().data(), static_cast<int>(this->parameterguid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.Measurement.parameterGuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unitId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unitGuid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitguid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unitguid().data(), static_cast<int>(this->unitguid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.Measurement.unitGuid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.Measurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.ClarosDateTime timestamp = 1;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::timestamp(this), output);
  }

  // int32 parameterId = 2;
  if (this->parameterid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parameterid(), output);
  }

  // string parameterGuid = 3;
  if (this->parameterguid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameterguid().data(), static_cast<int>(this->parameterguid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.Measurement.parameterGuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameterguid(), output);
  }

  // int32 unitId = 4;
  if (this->unitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unitid(), output);
  }

  // string unitGuid = 5;
  if (this->unitguid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitguid().data(), static_cast<int>(this->unitguid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.Measurement.unitGuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->unitguid(), output);
  }

  // float value = 6;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.ClarosDateTime timestamp = 1;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::timestamp(this), target);
  }

  // int32 parameterId = 2;
  if (this->parameterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parameterid(), target);
  }

  // string parameterGuid = 3;
  if (this->parameterguid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parameterguid().data(), static_cast<int>(this->parameterguid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.Measurement.parameterGuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameterguid(), target);
  }

  // int32 unitId = 4;
  if (this->unitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unitid(), target);
  }

  // string unitGuid = 5;
  if (this->unitguid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unitguid().data(), static_cast<int>(this->unitguid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.Measurement.unitGuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unitguid(), target);
  }

  // float value = 6;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.Measurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parameterGuid = 3;
  if (this->parameterguid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parameterguid());
  }

  // string unitGuid = 5;
  if (this->unitguid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unitguid());
  }

  // .claros.common.ClarosDateTime timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 parameterId = 2;
  if (this->parameterid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parameterid());
  }

  // int32 unitId = 4;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unitid());
  }

  // float value = 6;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::google::protobuf::DynamicCastToGenerated<Measurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parameterguid().size() > 0) {

    parameterguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameterguid_);
  }
  if (from.unitguid().size() > 0) {

    unitguid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unitguid_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::claros::common::DateTime::MergeFrom(from.timestamp());
  }
  if (from.parameterid() != 0) {
    set_parameterid(from.parameterid());
  }
  if (from.unitid() != 0) {
    set_unitid(from.unitid());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameterguid_.Swap(&other->parameterguid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unitguid_.Swap(&other->unitguid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(parameterid_, other->parameterid_);
  swap(unitid_, other->unitid_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fmeasurement_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fmeasurement_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::Measurement* Arena::CreateMaybeMessage< ::claros::common::Measurement >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::Measurement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
