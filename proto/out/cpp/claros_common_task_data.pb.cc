// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_data.proto

#include "claros_common_task_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5ftask_5fdefinition_5fbinding_5finstrument_5fmaintenance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BindingInstrumentMaintenance_claros_5fcommon_5ftask_5fdefinition_5fbinding_5finstrument_5fmaintenance_2eproto;
namespace claros {
namespace common {
namespace task {
class TaskDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskData> _instance;
  const ::claros::common::task::BindingInstrumentMaintenance* bindinginstrumentmaintenance_;
} _TaskData_default_instance_;
}  // namespace task
}  // namespace common
}  // namespace claros
static void InitDefaultsTaskData_claros_5fcommon_5ftask_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::task::_TaskData_default_instance_;
    new (ptr) ::claros::common::task::TaskData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::task::TaskData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskData_claros_5fcommon_5ftask_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskData_claros_5fcommon_5ftask_5fdata_2eproto}, {
      &scc_info_BindingInstrumentMaintenance_claros_5fcommon_5ftask_5fdefinition_5fbinding_5finstrument_5fmaintenance_2eproto.base,}};

void InitDefaults_claros_5fcommon_5ftask_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TaskData_claros_5fcommon_5ftask_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5ftask_5fdata_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5ftask_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5ftask_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5ftask_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::task::TaskData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::claros::common::task::TaskData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::claros::common::task::TaskDataDefaultTypeInternal, bindinginstrumentmaintenance_),
  PROTOBUF_FIELD_OFFSET(::claros::common::task::TaskData, binding_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::task::TaskData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::task::_TaskData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5ftask_5fdata_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5ftask_5fdata_2eproto, "claros_common_task_data.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5ftask_5fdata_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5ftask_5fdata_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5ftask_5fdata_2eproto, file_level_service_descriptors_claros_5fcommon_5ftask_5fdata_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5ftask_5fdata_2eproto[] =
  "\n\035claros_common_task_data.proto\022\022claros."
  "common.task\032Bclaros_common_task_definiti"
  "on_binding_instrument_maintenance.proto\""
  "o\n\010TaskData\022X\n\034bindingInstrumentMaintena"
  "nce\030\001 \001(\01320.claros.common.task.BindingIn"
  "strumentMaintenanceH\000B\t\n\007bindingb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5ftask_5fdata_2eproto = {
  false, InitDefaults_claros_5fcommon_5ftask_5fdata_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5ftask_5fdata_2eproto,
  "claros_common_task_data.proto", &assign_descriptors_table_claros_5fcommon_5ftask_5fdata_2eproto, 240,
};

void AddDescriptors_claros_5fcommon_5ftask_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_claros_5fcommon_5ftask_5fdefinition_5fbinding_5finstrument_5fmaintenance_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5ftask_5fdata_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5ftask_5fdata_2eproto = []() { AddDescriptors_claros_5fcommon_5ftask_5fdata_2eproto(); return true; }();
namespace claros {
namespace common {
namespace task {

// ===================================================================

void TaskData::InitAsDefaultInstance() {
  ::claros::common::task::_TaskData_default_instance_.bindinginstrumentmaintenance_ = const_cast< ::claros::common::task::BindingInstrumentMaintenance*>(
      ::claros::common::task::BindingInstrumentMaintenance::internal_default_instance());
}
class TaskData::HasBitSetters {
 public:
  static const ::claros::common::task::BindingInstrumentMaintenance& bindinginstrumentmaintenance(const TaskData* msg);
};

const ::claros::common::task::BindingInstrumentMaintenance&
TaskData::HasBitSetters::bindinginstrumentmaintenance(const TaskData* msg) {
  return *msg->binding_.bindinginstrumentmaintenance_;
}
void TaskData::set_allocated_bindinginstrumentmaintenance(::claros::common::task::BindingInstrumentMaintenance* bindinginstrumentmaintenance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_binding();
  if (bindinginstrumentmaintenance) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bindinginstrumentmaintenance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bindinginstrumentmaintenance, submessage_arena);
    }
    set_has_bindinginstrumentmaintenance();
    binding_.bindinginstrumentmaintenance_ = bindinginstrumentmaintenance;
  }
  // @@protoc_insertion_point(field_set_allocated:claros.common.task.TaskData.bindingInstrumentMaintenance)
}
void TaskData::clear_bindinginstrumentmaintenance() {
  if (has_bindinginstrumentmaintenance()) {
    delete binding_.bindinginstrumentmaintenance_;
    clear_has_binding();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskData::kBindingInstrumentMaintenanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskData::TaskData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.task.TaskData)
}
TaskData::TaskData(const TaskData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_binding();
  switch (from.binding_case()) {
    case kBindingInstrumentMaintenance: {
      mutable_bindinginstrumentmaintenance()->::claros::common::task::BindingInstrumentMaintenance::MergeFrom(from.bindinginstrumentmaintenance());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:claros.common.task.TaskData)
}

void TaskData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskData_claros_5fcommon_5ftask_5fdata_2eproto.base);
  clear_has_binding();
}

TaskData::~TaskData() {
  // @@protoc_insertion_point(destructor:claros.common.task.TaskData)
  SharedDtor();
}

void TaskData::SharedDtor() {
  if (has_binding()) {
    clear_binding();
  }
}

void TaskData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskData& TaskData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskData_claros_5fcommon_5ftask_5fdata_2eproto.base);
  return *internal_default_instance();
}


void TaskData::clear_binding() {
// @@protoc_insertion_point(one_of_clear_start:claros.common.task.TaskData)
  switch (binding_case()) {
    case kBindingInstrumentMaintenance: {
      delete binding_.bindinginstrumentmaintenance_;
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BINDING_NOT_SET;
}


void TaskData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.task.TaskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_binding();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::task::BindingInstrumentMaintenance::_InternalParse;
        object = msg->mutable_bindinginstrumentmaintenance();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.task.TaskData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bindinginstrumentmaintenance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.task.TaskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.task.TaskData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.task.TaskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 1;
  if (has_bindinginstrumentmaintenance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::bindinginstrumentmaintenance(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.task.TaskData)
}

::google::protobuf::uint8* TaskData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.task.TaskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 1;
  if (has_bindinginstrumentmaintenance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::bindinginstrumentmaintenance(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.task.TaskData)
  return target;
}

size_t TaskData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.task.TaskData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (binding_case()) {
    // .claros.common.task.BindingInstrumentMaintenance bindingInstrumentMaintenance = 1;
    case kBindingInstrumentMaintenance: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *binding_.bindinginstrumentmaintenance_);
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.task.TaskData)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskData* source =
      ::google::protobuf::DynamicCastToGenerated<TaskData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.task.TaskData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.task.TaskData)
    MergeFrom(*source);
  }
}

void TaskData::MergeFrom(const TaskData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.task.TaskData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.binding_case()) {
    case kBindingInstrumentMaintenance: {
      mutable_bindinginstrumentmaintenance()->::claros::common::task::BindingInstrumentMaintenance::MergeFrom(from.bindinginstrumentmaintenance());
      break;
    }
    case BINDING_NOT_SET: {
      break;
    }
  }
}

void TaskData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.task.TaskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskData::CopyFrom(const TaskData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.task.TaskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskData::IsInitialized() const {
  return true;
}

void TaskData::Swap(TaskData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskData::InternalSwap(TaskData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(binding_, other->binding_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata TaskData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5ftask_5fdata_2eproto);
  return ::file_level_metadata_claros_5fcommon_5ftask_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace task
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::task::TaskData* Arena::CreateMaybeMessage< ::claros::common::task::TaskData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::task::TaskData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
