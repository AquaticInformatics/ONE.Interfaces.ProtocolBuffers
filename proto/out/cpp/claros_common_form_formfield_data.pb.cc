// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formfield_data.proto

#include "claros_common_form_formfield_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fauditevent_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AuditEvent_claros_5fcommon_5fcore_5fauditevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fdata_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto;
namespace claros {
namespace common {
namespace form {
class FormFieldDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FormFieldData> _instance;
  const ::claros::operations::spreadsheet::Cell* cell_;
} _FormFieldData_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
static void InitDefaultsFormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::form::_FormFieldData_default_instance_;
    new (ptr) ::claros::common::form::FormFieldData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::form::FormFieldData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_FormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsFormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto}, {
      &scc_info_Cell_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto.base,
      &scc_info_InstrumentData_claros_5finstrument_5fdata_2eproto.base,
      &scc_info_AuditEvent_claros_5fcommon_5fcore_5fauditevent_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fform_5fformfield_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fform_5fformfield_5fdata_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fform_5fformfield_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormFieldData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormFieldData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::claros::common::form::FormFieldDataDefaultTypeInternal, cell_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormFieldData, instrumentdata_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormFieldData, auditevent_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormFieldData, fieldDataBinding_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::form::FormFieldData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::form::_FormFieldData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fform_5fformfield_5fdata_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, "claros_common_form_formfield_data.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fform_5fformfield_5fdata_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, file_level_service_descriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fform_5fformfield_5fdata_2eproto[] =
  "\n\'claros_common_form_formfield_data.prot"
  "o\022\022claros.common.form\0322claros_operations"
  "_spreadsheet_worksheet_cell.proto\032\034claro"
  "s_instrument_data.proto\032#claros_common_c"
  "ore_auditevent.proto\"\307\001\n\rFormFieldData\0223"
  "\n\004cell\030\001 \001(\0132#.claros.operations.spreads"
  "heet.CellH\000\0229\n\016instrumentData\030\002 \001(\0132!.cl"
  "aros.instrument.InstrumentData\0222\n\nauditE"
  "vent\030c \001(\0132\036.claros.common.core.AuditEve"
  "ntB\022\n\020fieldDataBindingb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fform_5fformfield_5fdata_2eproto = {
  false, InitDefaults_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fform_5fformfield_5fdata_2eproto,
  "claros_common_form_formfield_data.proto", &assign_descriptors_table_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, 390,
};

void AddDescriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_claros_5foperations_5fspreadsheet_5fworksheet_5fcell_2eproto,
    ::AddDescriptors_claros_5finstrument_5fdata_2eproto,
    ::AddDescriptors_claros_5fcommon_5fcore_5fauditevent_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fform_5fformfield_5fdata_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fform_5fformfield_5fdata_2eproto = []() { AddDescriptors_claros_5fcommon_5fform_5fformfield_5fdata_2eproto(); return true; }();
namespace claros {
namespace common {
namespace form {

// ===================================================================

void FormFieldData::InitAsDefaultInstance() {
  ::claros::common::form::_FormFieldData_default_instance_.cell_ = const_cast< ::claros::operations::spreadsheet::Cell*>(
      ::claros::operations::spreadsheet::Cell::internal_default_instance());
  ::claros::common::form::_FormFieldData_default_instance_._instance.get_mutable()->instrumentdata_ = const_cast< ::claros::instrument::InstrumentData*>(
      ::claros::instrument::InstrumentData::internal_default_instance());
  ::claros::common::form::_FormFieldData_default_instance_._instance.get_mutable()->auditevent_ = const_cast< ::claros::common::core::AuditEvent*>(
      ::claros::common::core::AuditEvent::internal_default_instance());
}
class FormFieldData::HasBitSetters {
 public:
  static const ::claros::operations::spreadsheet::Cell& cell(const FormFieldData* msg);
  static const ::claros::instrument::InstrumentData& instrumentdata(const FormFieldData* msg);
  static const ::claros::common::core::AuditEvent& auditevent(const FormFieldData* msg);
};

const ::claros::operations::spreadsheet::Cell&
FormFieldData::HasBitSetters::cell(const FormFieldData* msg) {
  return *msg->fieldDataBinding_.cell_;
}
const ::claros::instrument::InstrumentData&
FormFieldData::HasBitSetters::instrumentdata(const FormFieldData* msg) {
  return *msg->instrumentdata_;
}
const ::claros::common::core::AuditEvent&
FormFieldData::HasBitSetters::auditevent(const FormFieldData* msg) {
  return *msg->auditevent_;
}
void FormFieldData::set_allocated_cell(::claros::operations::spreadsheet::Cell* cell) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_fieldDataBinding();
  if (cell) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cell = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    set_has_cell();
    fieldDataBinding_.cell_ = cell;
  }
  // @@protoc_insertion_point(field_set_allocated:claros.common.form.FormFieldData.cell)
}
void FormFieldData::clear_cell() {
  if (has_cell()) {
    delete fieldDataBinding_.cell_;
    clear_has_fieldDataBinding();
  }
}
void FormFieldData::clear_instrumentdata() {
  if (GetArenaNoVirtual() == nullptr && instrumentdata_ != nullptr) {
    delete instrumentdata_;
  }
  instrumentdata_ = nullptr;
}
void FormFieldData::clear_auditevent() {
  if (GetArenaNoVirtual() == nullptr && auditevent_ != nullptr) {
    delete auditevent_;
  }
  auditevent_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FormFieldData::kCellFieldNumber;
const int FormFieldData::kInstrumentDataFieldNumber;
const int FormFieldData::kAuditEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FormFieldData::FormFieldData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.form.FormFieldData)
}
FormFieldData::FormFieldData(const FormFieldData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instrumentdata()) {
    instrumentdata_ = new ::claros::instrument::InstrumentData(*from.instrumentdata_);
  } else {
    instrumentdata_ = nullptr;
  }
  if (from.has_auditevent()) {
    auditevent_ = new ::claros::common::core::AuditEvent(*from.auditevent_);
  } else {
    auditevent_ = nullptr;
  }
  clear_has_fieldDataBinding();
  switch (from.fieldDataBinding_case()) {
    case kCell: {
      mutable_cell()->::claros::operations::spreadsheet::Cell::MergeFrom(from.cell());
      break;
    }
    case FIELDDATABINDING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:claros.common.form.FormFieldData)
}

void FormFieldData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto.base);
  ::memset(&instrumentdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auditevent_) -
      reinterpret_cast<char*>(&instrumentdata_)) + sizeof(auditevent_));
  clear_has_fieldDataBinding();
}

FormFieldData::~FormFieldData() {
  // @@protoc_insertion_point(destructor:claros.common.form.FormFieldData)
  SharedDtor();
}

void FormFieldData::SharedDtor() {
  if (this != internal_default_instance()) delete instrumentdata_;
  if (this != internal_default_instance()) delete auditevent_;
  if (has_fieldDataBinding()) {
    clear_fieldDataBinding();
  }
}

void FormFieldData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FormFieldData& FormFieldData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FormFieldData_claros_5fcommon_5fform_5fformfield_5fdata_2eproto.base);
  return *internal_default_instance();
}


void FormFieldData::clear_fieldDataBinding() {
// @@protoc_insertion_point(one_of_clear_start:claros.common.form.FormFieldData)
  switch (fieldDataBinding_case()) {
    case kCell: {
      delete fieldDataBinding_.cell_;
      break;
    }
    case FIELDDATABINDING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FIELDDATABINDING_NOT_SET;
}


void FormFieldData::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.form.FormFieldData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && instrumentdata_ != nullptr) {
    delete instrumentdata_;
  }
  instrumentdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auditevent_ != nullptr) {
    delete auditevent_;
  }
  auditevent_ = nullptr;
  clear_fieldDataBinding();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FormFieldData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FormFieldData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.operations.spreadsheet.Cell cell = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::operations::spreadsheet::Cell::_InternalParse;
        object = msg->mutable_cell();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.instrument.InstrumentData instrumentData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::instrument::InstrumentData::_InternalParse;
        object = msg->mutable_instrumentdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .claros.common.core.AuditEvent auditEvent = 99;
      case 99: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::AuditEvent::_InternalParse;
        object = msg->mutable_auditevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FormFieldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.form.FormFieldData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.operations.spreadsheet.Cell cell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.instrument.InstrumentData instrumentData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instrumentdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.core.AuditEvent auditEvent = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (794 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auditevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.form.FormFieldData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.form.FormFieldData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FormFieldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.form.FormFieldData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.operations.spreadsheet.Cell cell = 1;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cell(this), output);
  }

  // .claros.instrument.InstrumentData instrumentData = 2;
  if (this->has_instrumentdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::instrumentdata(this), output);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, HasBitSetters::auditevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.form.FormFieldData)
}

::google::protobuf::uint8* FormFieldData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.form.FormFieldData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.operations.spreadsheet.Cell cell = 1;
  if (has_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cell(this), target);
  }

  // .claros.instrument.InstrumentData instrumentData = 2;
  if (this->has_instrumentdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::instrumentdata(this), target);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        99, HasBitSetters::auditevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.form.FormFieldData)
  return target;
}

size_t FormFieldData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.form.FormFieldData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .claros.instrument.InstrumentData instrumentData = 2;
  if (this->has_instrumentdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *instrumentdata_);
  }

  // .claros.common.core.AuditEvent auditEvent = 99;
  if (this->has_auditevent()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auditevent_);
  }

  switch (fieldDataBinding_case()) {
    // .claros.operations.spreadsheet.Cell cell = 1;
    case kCell: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fieldDataBinding_.cell_);
      break;
    }
    case FIELDDATABINDING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormFieldData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.form.FormFieldData)
  GOOGLE_DCHECK_NE(&from, this);
  const FormFieldData* source =
      ::google::protobuf::DynamicCastToGenerated<FormFieldData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.form.FormFieldData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.form.FormFieldData)
    MergeFrom(*source);
  }
}

void FormFieldData::MergeFrom(const FormFieldData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.form.FormFieldData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_instrumentdata()) {
    mutable_instrumentdata()->::claros::instrument::InstrumentData::MergeFrom(from.instrumentdata());
  }
  if (from.has_auditevent()) {
    mutable_auditevent()->::claros::common::core::AuditEvent::MergeFrom(from.auditevent());
  }
  switch (from.fieldDataBinding_case()) {
    case kCell: {
      mutable_cell()->::claros::operations::spreadsheet::Cell::MergeFrom(from.cell());
      break;
    }
    case FIELDDATABINDING_NOT_SET: {
      break;
    }
  }
}

void FormFieldData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.form.FormFieldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormFieldData::CopyFrom(const FormFieldData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.form.FormFieldData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormFieldData::IsInitialized() const {
  return true;
}

void FormFieldData::Swap(FormFieldData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FormFieldData::InternalSwap(FormFieldData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(instrumentdata_, other->instrumentdata_);
  swap(auditevent_, other->auditevent_);
  swap(fieldDataBinding_, other->fieldDataBinding_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FormFieldData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fform_5fformfield_5fdata_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fform_5fformfield_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::form::FormFieldData* Arena::CreateMaybeMessage< ::claros::common::form::FormFieldData >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::form::FormFieldData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
