// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formtemplate.proto

#include "claros_common_form_formtemplate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fconfiguration_5frights_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rights_claros_5fcommon_5fconfiguration_5frights_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformtemplate_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fform_5fformtemplateconfiguration_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_FormTemplateConfiguration_claros_5fcommon_5fform_5fformtemplateconfiguration_2eproto;
namespace claros {
namespace common {
namespace form {
class FormTemplate_PrivilegesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FormTemplate_PrivilegesEntry_DoNotUse> _instance;
} _FormTemplate_PrivilegesEntry_DoNotUse_default_instance_;
class FormTemplateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FormTemplate> _instance;
} _FormTemplate_default_instance_;
}  // namespace form
}  // namespace common
}  // namespace claros
static void InitDefaultsFormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::form::_FormTemplate_PrivilegesEntry_DoNotUse_default_instance_;
    new (ptr) ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse();
  }
  ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto}, {
      &scc_info_Rights_claros_5fcommon_5fconfiguration_5frights_2eproto.base,}};

static void InitDefaultsFormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::form::_FormTemplate_default_instance_;
    new (ptr) ::claros::common::form::FormTemplate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::form::FormTemplate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto}, {
      &scc_info_FormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto.base,
      &scc_info_FormTemplateConfiguration_claros_5fcommon_5fform_5fformtemplateconfiguration_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fform_5fformtemplate_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FormTemplate_PrivilegesEntry_DoNotUse_claros_5fcommon_5fform_5fformtemplate_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fform_5fformtemplate_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fform_5fformtemplate_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fform_5fformtemplate_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fform_5fformtemplate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, id_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, ownerid_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, public__),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, version_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, privileges_),
  PROTOBUF_FIELD_OFFSET(::claros::common::form::FormTemplate, formtemplateconfiguration_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse)},
  { 9, -1, sizeof(::claros::common::form::FormTemplate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::form::_FormTemplate_PrivilegesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::form::_FormTemplate_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fform_5fformtemplate_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fform_5fformtemplate_2eproto, "claros_common_form_formtemplate.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fform_5fformtemplate_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fform_5fformtemplate_2eproto, 2, file_level_enum_descriptors_claros_5fcommon_5fform_5fformtemplate_2eproto, file_level_service_descriptors_claros_5fcommon_5fform_5fformtemplate_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fform_5fformtemplate_2eproto[] =
  "\n%claros_common_form_formtemplate.proto\022"
  "\022claros.common.form\0322claros_common_form_"
  "formtemplateconfiguration.proto\032(claros_"
  "common_configuration_rights.proto\"\274\002\n\014Fo"
  "rmTemplate\022\n\n\002id\030\001 \001(\t\022\017\n\007ownerId\030\002 \001(\t\022"
  "\016\n\006public\030\003 \001(\010\022\017\n\007version\030\004 \001(\r\022D\n\npriv"
  "ileges\030\005 \003(\01320.claros.common.form.FormTe"
  "mplate.PrivilegesEntry\022P\n\031formTemplateCo"
  "nfiguration\030\006 \001(\0132-.claros.common.form.F"
  "ormTemplateConfiguration\032V\n\017PrivilegesEn"
  "try\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.claros"
  ".common.configuration.Rights:\0028\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fform_5fformtemplate_2eproto = {
  false, InitDefaults_claros_5fcommon_5fform_5fformtemplate_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fform_5fformtemplate_2eproto,
  "claros_common_form_formtemplate.proto", &assign_descriptors_table_claros_5fcommon_5fform_5fformtemplate_2eproto, 480,
};

void AddDescriptors_claros_5fcommon_5fform_5fformtemplate_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_claros_5fcommon_5fform_5fformtemplateconfiguration_2eproto,
    ::AddDescriptors_claros_5fcommon_5fconfiguration_5frights_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fform_5fformtemplate_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fform_5fformtemplate_2eproto = []() { AddDescriptors_claros_5fcommon_5fform_5fformtemplate_2eproto(); return true; }();
namespace claros {
namespace common {
namespace form {

// ===================================================================

FormTemplate_PrivilegesEntry_DoNotUse::FormTemplate_PrivilegesEntry_DoNotUse() {}
FormTemplate_PrivilegesEntry_DoNotUse::FormTemplate_PrivilegesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void FormTemplate_PrivilegesEntry_DoNotUse::MergeFrom(const FormTemplate_PrivilegesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata FormTemplate_PrivilegesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fform_5fformtemplate_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fform_5fformtemplate_2eproto[0];
}
void FormTemplate_PrivilegesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FormTemplate_PrivilegesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      FormTemplate_PrivilegesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "claros.common.form.FormTemplate.PrivilegesEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void FormTemplate::InitAsDefaultInstance() {
  ::claros::common::form::_FormTemplate_default_instance_._instance.get_mutable()->formtemplateconfiguration_ = const_cast< ::claros::common::form::FormTemplateConfiguration*>(
      ::claros::common::form::FormTemplateConfiguration::internal_default_instance());
}
class FormTemplate::HasBitSetters {
 public:
  static const ::claros::common::form::FormTemplateConfiguration& formtemplateconfiguration(const FormTemplate* msg);
};

const ::claros::common::form::FormTemplateConfiguration&
FormTemplate::HasBitSetters::formtemplateconfiguration(const FormTemplate* msg) {
  return *msg->formtemplateconfiguration_;
}
void FormTemplate::clear_privileges() {
  privileges_.Clear();
}
void FormTemplate::clear_formtemplateconfiguration() {
  if (GetArenaNoVirtual() == nullptr && formtemplateconfiguration_ != nullptr) {
    delete formtemplateconfiguration_;
  }
  formtemplateconfiguration_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FormTemplate::kIdFieldNumber;
const int FormTemplate::kOwnerIdFieldNumber;
const int FormTemplate::kPublicFieldNumber;
const int FormTemplate::kVersionFieldNumber;
const int FormTemplate::kPrivilegesFieldNumber;
const int FormTemplate::kFormTemplateConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FormTemplate::FormTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.form.FormTemplate)
}
FormTemplate::FormTemplate(const FormTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  privileges_.MergeFrom(from.privileges_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ownerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ownerid().size() > 0) {
    ownerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownerid_);
  }
  if (from.has_formtemplateconfiguration()) {
    formtemplateconfiguration_ = new ::claros::common::form::FormTemplateConfiguration(*from.formtemplateconfiguration_);
  } else {
    formtemplateconfiguration_ = nullptr;
  }
  ::memcpy(&public__, &from.public__,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&public__)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:claros.common.form.FormTemplate)
}

void FormTemplate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&formtemplateconfiguration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&formtemplateconfiguration_)) + sizeof(version_));
}

FormTemplate::~FormTemplate() {
  // @@protoc_insertion_point(destructor:claros.common.form.FormTemplate)
  SharedDtor();
}

void FormTemplate::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete formtemplateconfiguration_;
}

void FormTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FormTemplate& FormTemplate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FormTemplate_claros_5fcommon_5fform_5fformtemplate_2eproto.base);
  return *internal_default_instance();
}


void FormTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.form.FormTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privileges_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && formtemplateconfiguration_ != nullptr) {
    delete formtemplateconfiguration_;
  }
  formtemplateconfiguration_ = nullptr;
  ::memset(&public__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&public__)) + sizeof(version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FormTemplate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FormTemplate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.form.FormTemplate.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string ownerId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.form.FormTemplate.ownerId");
        object = msg->mutable_ownerid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bool public = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_public_(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, .claros.common.configuration.Rights> privileges = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->privileges_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // .claros.common.form.FormTemplateConfiguration formTemplateConfiguration = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::form::FormTemplateConfiguration::_InternalParse;
        object = msg->mutable_formtemplateconfiguration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FormTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.form.FormTemplate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.form.FormTemplate.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ownerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ownerid().data(), static_cast<int>(this->ownerid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.form.FormTemplate.ownerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool public = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &public__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .claros.common.configuration.Rights> privileges = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          FormTemplate_PrivilegesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              FormTemplate_PrivilegesEntry_DoNotUse,
              ::std::string, ::claros::common::configuration::Rights,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights > > parser(&privileges_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.form.FormTemplate.PrivilegesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .claros.common.form.FormTemplateConfiguration formTemplateConfiguration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_formtemplateconfiguration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.form.FormTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.form.FormTemplate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FormTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.form.FormTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.form.FormTemplate.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string ownerId = 2;
  if (this->ownerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerid().data(), static_cast<int>(this->ownerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.form.FormTemplate.ownerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ownerid(), output);
  }

  // bool public = 3;
  if (this->public_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->public_(), output);
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // map<string, .claros.common.configuration.Rights> privileges = 5;
  if (!this->privileges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.common.form.FormTemplate.PrivilegesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->privileges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->privileges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_iterator
          it = this->privileges().begin();
          it != this->privileges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FormTemplate_PrivilegesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(privileges_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<FormTemplate_PrivilegesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_iterator
          it = this->privileges().begin();
          it != this->privileges().end(); ++it) {
        entry.reset(privileges_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .claros.common.form.FormTemplateConfiguration formTemplateConfiguration = 6;
  if (this->has_formtemplateconfiguration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::formtemplateconfiguration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.form.FormTemplate)
}

::google::protobuf::uint8* FormTemplate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.form.FormTemplate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.form.FormTemplate.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string ownerId = 2;
  if (this->ownerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerid().data(), static_cast<int>(this->ownerid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.form.FormTemplate.ownerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ownerid(), target);
  }

  // bool public = 3;
  if (this->public_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->public_(), target);
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // map<string, .claros.common.configuration.Rights> privileges = 5;
  if (!this->privileges().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "claros.common.form.FormTemplate.PrivilegesEntry.key");
      }
    };

    if (false &&
        this->privileges().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->privileges().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_iterator
          it = this->privileges().begin();
          it != this->privileges().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<FormTemplate_PrivilegesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(privileges_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<FormTemplate_PrivilegesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_iterator
          it = this->privileges().begin();
          it != this->privileges().end(); ++it) {
        entry.reset(privileges_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(5, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .claros.common.form.FormTemplateConfiguration formTemplateConfiguration = 6;
  if (this->has_formtemplateconfiguration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::formtemplateconfiguration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.form.FormTemplate)
  return target;
}

size_t FormTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.form.FormTemplate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .claros.common.configuration.Rights> privileges = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->privileges_size());
  {
    ::std::unique_ptr<FormTemplate_PrivilegesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::claros::common::configuration::Rights >::const_iterator
        it = this->privileges().begin();
        it != this->privileges().end(); ++it) {
      entry.reset(privileges_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string ownerId = 2;
  if (this->ownerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ownerid());
  }

  // .claros.common.form.FormTemplateConfiguration formTemplateConfiguration = 6;
  if (this->has_formtemplateconfiguration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *formtemplateconfiguration_);
  }

  // bool public = 3;
  if (this->public_() != 0) {
    total_size += 1 + 1;
  }

  // uint32 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.form.FormTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const FormTemplate* source =
      ::google::protobuf::DynamicCastToGenerated<FormTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.form.FormTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.form.FormTemplate)
    MergeFrom(*source);
  }
}

void FormTemplate::MergeFrom(const FormTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.form.FormTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  privileges_.MergeFrom(from.privileges_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.ownerid().size() > 0) {

    ownerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownerid_);
  }
  if (from.has_formtemplateconfiguration()) {
    mutable_formtemplateconfiguration()->::claros::common::form::FormTemplateConfiguration::MergeFrom(from.formtemplateconfiguration());
  }
  if (from.public_() != 0) {
    set_public_(from.public_());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void FormTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.form.FormTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormTemplate::CopyFrom(const FormTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.form.FormTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormTemplate::IsInitialized() const {
  return true;
}

void FormTemplate::Swap(FormTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FormTemplate::InternalSwap(FormTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  privileges_.Swap(&other->privileges_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ownerid_.Swap(&other->ownerid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(formtemplateconfiguration_, other->formtemplateconfiguration_);
  swap(public__, other->public__);
  swap(version_, other->version_);
}

::google::protobuf::Metadata FormTemplate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fform_5fformtemplate_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fform_5fformtemplate_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace form
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse* Arena::CreateMaybeMessage< ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::form::FormTemplate_PrivilegesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::claros::common::form::FormTemplate* Arena::CreateMaybeMessage< ::claros::common::form::FormTemplate >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::form::FormTemplate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
