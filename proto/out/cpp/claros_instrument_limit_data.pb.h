// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_limit_data.proto

#ifndef PROTOBUF_INCLUDED_claros_5finstrument_5flimit_5fdata_2eproto
#define PROTOBUF_INCLUDED_claros_5finstrument_5flimit_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5flimit_5fdata_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5finstrument_5flimit_5fdata_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5finstrument_5flimit_5fdata_2eproto();
namespace claros {
namespace instrument {
class LimitData;
class LimitDataDefaultTypeInternal;
extern LimitDataDefaultTypeInternal _LimitData_default_instance_;
class LimitData_Limit;
class LimitData_LimitDefaultTypeInternal;
extern LimitData_LimitDefaultTypeInternal _LimitData_Limit_default_instance_;
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::instrument::LimitData* Arena::CreateMaybeMessage<::claros::instrument::LimitData>(Arena*);
template<> ::claros::instrument::LimitData_Limit* Arena::CreateMaybeMessage<::claros::instrument::LimitData_Limit>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace instrument {

// ===================================================================

class LimitData_Limit :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.LimitData.Limit) */ {
 public:
  LimitData_Limit();
  virtual ~LimitData_Limit();

  LimitData_Limit(const LimitData_Limit& from);

  inline LimitData_Limit& operator=(const LimitData_Limit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LimitData_Limit(LimitData_Limit&& from) noexcept
    : LimitData_Limit() {
    *this = ::std::move(from);
  }

  inline LimitData_Limit& operator=(LimitData_Limit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LimitData_Limit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitData_Limit* internal_default_instance() {
    return reinterpret_cast<const LimitData_Limit*>(
               &_LimitData_Limit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LimitData_Limit* other);
  friend void swap(LimitData_Limit& a, LimitData_Limit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LimitData_Limit* New() const final {
    return CreateMaybeMessage<LimitData_Limit>(nullptr);
  }

  LimitData_Limit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LimitData_Limit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LimitData_Limit& from);
  void MergeFrom(const LimitData_Limit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitData_Limit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string i18nKey = 3;
  void clear_i18nkey();
  static const int kI18NKeyFieldNumber = 3;
  const ::std::string& i18nkey() const;
  void set_i18nkey(const ::std::string& value);
  #if LANG_CXX11
  void set_i18nkey(::std::string&& value);
  #endif
  void set_i18nkey(const char* value);
  void set_i18nkey(const char* value, size_t size);
  ::std::string* mutable_i18nkey();
  ::std::string* release_i18nkey();
  void set_allocated_i18nkey(::std::string* i18nkey);

  // uint32 severity = 1;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::google::protobuf::uint32 severity() const;
  void set_severity(::google::protobuf::uint32 value);

  // uint32 polarity = 2;
  void clear_polarity();
  static const int kPolarityFieldNumber = 2;
  ::google::protobuf::uint32 polarity() const;
  void set_polarity(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:claros.instrument.LimitData.Limit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr i18nkey_;
  ::google::protobuf::uint32 severity_;
  ::google::protobuf::uint32 polarity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5finstrument_5flimit_5fdata_2eproto;
};
// -------------------------------------------------------------------

class LimitData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.LimitData) */ {
 public:
  LimitData();
  virtual ~LimitData();

  LimitData(const LimitData& from);

  inline LimitData& operator=(const LimitData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LimitData(LimitData&& from) noexcept
    : LimitData() {
    *this = ::std::move(from);
  }

  inline LimitData& operator=(LimitData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LimitData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LimitData* internal_default_instance() {
    return reinterpret_cast<const LimitData*>(
               &_LimitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LimitData* other);
  friend void swap(LimitData& a, LimitData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LimitData* New() const final {
    return CreateMaybeMessage<LimitData>(nullptr);
  }

  LimitData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LimitData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LimitData& from);
  void MergeFrom(const LimitData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LimitData_Limit Limit;

  // accessors -------------------------------------------------------

  // repeated .claros.instrument.LimitData.Limit limits = 1;
  int limits_size() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 1;
  ::claros::instrument::LimitData_Limit* mutable_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::LimitData_Limit >*
      mutable_limits();
  const ::claros::instrument::LimitData_Limit& limits(int index) const;
  ::claros::instrument::LimitData_Limit* add_limits();
  const ::google::protobuf::RepeatedPtrField< ::claros::instrument::LimitData_Limit >&
      limits() const;

  // @@protoc_insertion_point(class_scope:claros.instrument.LimitData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::claros::instrument::LimitData_Limit > limits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5finstrument_5flimit_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LimitData_Limit

// uint32 severity = 1;
inline void LimitData_Limit::clear_severity() {
  severity_ = 0u;
}
inline ::google::protobuf::uint32 LimitData_Limit::severity() const {
  // @@protoc_insertion_point(field_get:claros.instrument.LimitData.Limit.severity)
  return severity_;
}
inline void LimitData_Limit::set_severity(::google::protobuf::uint32 value) {
  
  severity_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.LimitData.Limit.severity)
}

// uint32 polarity = 2;
inline void LimitData_Limit::clear_polarity() {
  polarity_ = 0u;
}
inline ::google::protobuf::uint32 LimitData_Limit::polarity() const {
  // @@protoc_insertion_point(field_get:claros.instrument.LimitData.Limit.polarity)
  return polarity_;
}
inline void LimitData_Limit::set_polarity(::google::protobuf::uint32 value) {
  
  polarity_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.LimitData.Limit.polarity)
}

// string i18nKey = 3;
inline void LimitData_Limit::clear_i18nkey() {
  i18nkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LimitData_Limit::i18nkey() const {
  // @@protoc_insertion_point(field_get:claros.instrument.LimitData.Limit.i18nKey)
  return i18nkey_.GetNoArena();
}
inline void LimitData_Limit::set_i18nkey(const ::std::string& value) {
  
  i18nkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.LimitData.Limit.i18nKey)
}
#if LANG_CXX11
inline void LimitData_Limit::set_i18nkey(::std::string&& value) {
  
  i18nkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.LimitData.Limit.i18nKey)
}
#endif
inline void LimitData_Limit::set_i18nkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  i18nkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.LimitData.Limit.i18nKey)
}
inline void LimitData_Limit::set_i18nkey(const char* value, size_t size) {
  
  i18nkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.LimitData.Limit.i18nKey)
}
inline ::std::string* LimitData_Limit::mutable_i18nkey() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.LimitData.Limit.i18nKey)
  return i18nkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LimitData_Limit::release_i18nkey() {
  // @@protoc_insertion_point(field_release:claros.instrument.LimitData.Limit.i18nKey)
  
  return i18nkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitData_Limit::set_allocated_i18nkey(::std::string* i18nkey) {
  if (i18nkey != nullptr) {
    
  } else {
    
  }
  i18nkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), i18nkey);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.LimitData.Limit.i18nKey)
}

// -------------------------------------------------------------------

// LimitData

// repeated .claros.instrument.LimitData.Limit limits = 1;
inline int LimitData::limits_size() const {
  return limits_.size();
}
inline void LimitData::clear_limits() {
  limits_.Clear();
}
inline ::claros::instrument::LimitData_Limit* LimitData::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:claros.instrument.LimitData.limits)
  return limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::claros::instrument::LimitData_Limit >*
LimitData::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:claros.instrument.LimitData.limits)
  return &limits_;
}
inline const ::claros::instrument::LimitData_Limit& LimitData::limits(int index) const {
  // @@protoc_insertion_point(field_get:claros.instrument.LimitData.limits)
  return limits_.Get(index);
}
inline ::claros::instrument::LimitData_Limit* LimitData::add_limits() {
  // @@protoc_insertion_point(field_add:claros.instrument.LimitData.limits)
  return limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::claros::instrument::LimitData_Limit >&
LimitData::limits() const {
  // @@protoc_insertion_point(field_list:claros.instrument.LimitData.limits)
  return limits_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instrument
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5finstrument_5flimit_5fdata_2eproto
