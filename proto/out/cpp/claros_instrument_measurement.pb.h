// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement.proto

#ifndef PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_2eproto
#define PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_measurement.pb.h"
#include "claros_instrument_event.pb.h"
#include "claros_common_gis_gis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5finstrument_5fmeasurement_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5finstrument_5fmeasurement_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5finstrument_5fmeasurement_2eproto();
namespace claros {
namespace instrument {
class InstrumentMeasurement;
class InstrumentMeasurementDefaultTypeInternal;
extern InstrumentMeasurementDefaultTypeInternal _InstrumentMeasurement_default_instance_;
}  // namespace instrument
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::instrument::InstrumentMeasurement* Arena::CreateMaybeMessage<::claros::instrument::InstrumentMeasurement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace instrument {

// ===================================================================

class InstrumentMeasurement :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.instrument.InstrumentMeasurement) */ {
 public:
  InstrumentMeasurement();
  virtual ~InstrumentMeasurement();

  InstrumentMeasurement(const InstrumentMeasurement& from);

  inline InstrumentMeasurement& operator=(const InstrumentMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstrumentMeasurement(InstrumentMeasurement&& from) noexcept
    : InstrumentMeasurement() {
    *this = ::std::move(from);
  }

  inline InstrumentMeasurement& operator=(InstrumentMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const InstrumentMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentMeasurement* internal_default_instance() {
    return reinterpret_cast<const InstrumentMeasurement*>(
               &_InstrumentMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InstrumentMeasurement* other);
  friend void swap(InstrumentMeasurement& a, InstrumentMeasurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstrumentMeasurement* New() const final {
    return CreateMaybeMessage<InstrumentMeasurement>(nullptr);
  }

  InstrumentMeasurement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentMeasurement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstrumentMeasurement& from);
  void MergeFrom(const InstrumentMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentMeasurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instrumentMeasurementId = 1;
  void clear_instrumentmeasurementid();
  static const int kInstrumentMeasurementIdFieldNumber = 1;
  const ::std::string& instrumentmeasurementid() const;
  void set_instrumentmeasurementid(const ::std::string& value);
  #if LANG_CXX11
  void set_instrumentmeasurementid(::std::string&& value);
  #endif
  void set_instrumentmeasurementid(const char* value);
  void set_instrumentmeasurementid(const char* value, size_t size);
  ::std::string* mutable_instrumentmeasurementid();
  ::std::string* release_instrumentmeasurementid();
  void set_allocated_instrumentmeasurementid(::std::string* instrumentmeasurementid);

  // string fusionId = 3;
  void clear_fusionid();
  static const int kFusionIdFieldNumber = 3;
  const ::std::string& fusionid() const;
  void set_fusionid(const ::std::string& value);
  #if LANG_CXX11
  void set_fusionid(::std::string&& value);
  #endif
  void set_fusionid(const char* value);
  void set_fusionid(const char* value, size_t size);
  ::std::string* mutable_fusionid();
  ::std::string* release_fusionid();
  void set_allocated_fusionid(::std::string* fusionid);

  // string measurementDataExtended = 7;
  void clear_measurementdataextended();
  static const int kMeasurementDataExtendedFieldNumber = 7;
  const ::std::string& measurementdataextended() const;
  void set_measurementdataextended(const ::std::string& value);
  #if LANG_CXX11
  void set_measurementdataextended(::std::string&& value);
  #endif
  void set_measurementdataextended(const char* value);
  void set_measurementdataextended(const char* value, size_t size);
  ::std::string* mutable_measurementdataextended();
  ::std::string* release_measurementdataextended();
  void set_allocated_measurementdataextended(::std::string* measurementdataextended);

  // .claros.common.core.Measurement measurement = 4;
  bool has_measurement() const;
  void clear_measurement();
  static const int kMeasurementFieldNumber = 4;
  const ::claros::common::core::Measurement& measurement() const;
  ::claros::common::core::Measurement* release_measurement();
  ::claros::common::core::Measurement* mutable_measurement();
  void set_allocated_measurement(::claros::common::core::Measurement* measurement);

  // .claros.instrument.InstrumentMeasurement supportingMeasurements = 5;
  bool has_supportingmeasurements() const;
  void clear_supportingmeasurements();
  static const int kSupportingMeasurementsFieldNumber = 5;
  const ::claros::instrument::InstrumentMeasurement& supportingmeasurements() const;
  ::claros::instrument::InstrumentMeasurement* release_supportingmeasurements();
  ::claros::instrument::InstrumentMeasurement* mutable_supportingmeasurements();
  void set_allocated_supportingmeasurements(::claros::instrument::InstrumentMeasurement* supportingmeasurements);

  // .claros.common.gis.GIS gis = 6;
  bool has_gis() const;
  void clear_gis();
  static const int kGisFieldNumber = 6;
  const ::claros::common::gis::GIS& gis() const;
  ::claros::common::gis::GIS* release_gis();
  ::claros::common::gis::GIS* mutable_gis();
  void set_allocated_gis(::claros::common::gis::GIS* gis);

  // .claros.instrument.InstrumentEvent measurementEvent = 8;
  bool has_measurementevent() const;
  void clear_measurementevent();
  static const int kMeasurementEventFieldNumber = 8;
  const ::claros::instrument::InstrumentEvent& measurementevent() const;
  ::claros::instrument::InstrumentEvent* release_measurementevent();
  ::claros::instrument::InstrumentEvent* mutable_measurementevent();
  void set_allocated_measurementevent(::claros::instrument::InstrumentEvent* measurementevent);

  // int32 channel = 2;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::int32 channel() const;
  void set_channel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:claros.instrument.InstrumentMeasurement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr instrumentmeasurementid_;
  ::google::protobuf::internal::ArenaStringPtr fusionid_;
  ::google::protobuf::internal::ArenaStringPtr measurementdataextended_;
  ::claros::common::core::Measurement* measurement_;
  ::claros::instrument::InstrumentMeasurement* supportingmeasurements_;
  ::claros::common::gis::GIS* gis_;
  ::claros::instrument::InstrumentEvent* measurementevent_;
  ::google::protobuf::int32 channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5finstrument_5fmeasurement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentMeasurement

// string instrumentMeasurementId = 1;
inline void InstrumentMeasurement::clear_instrumentmeasurementid() {
  instrumentmeasurementid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurement::instrumentmeasurementid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
  return instrumentmeasurementid_.GetNoArena();
}
inline void InstrumentMeasurement::set_instrumentmeasurementid(const ::std::string& value) {
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
}
#if LANG_CXX11
inline void InstrumentMeasurement::set_instrumentmeasurementid(::std::string&& value) {
  
  instrumentmeasurementid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
}
#endif
inline void InstrumentMeasurement::set_instrumentmeasurementid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
}
inline void InstrumentMeasurement::set_instrumentmeasurementid(const char* value, size_t size) {
  
  instrumentmeasurementid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
}
inline ::std::string* InstrumentMeasurement::mutable_instrumentmeasurementid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
  return instrumentmeasurementid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurement::release_instrumentmeasurementid() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
  
  return instrumentmeasurementid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurement::set_allocated_instrumentmeasurementid(::std::string* instrumentmeasurementid) {
  if (instrumentmeasurementid != nullptr) {
    
  } else {
    
  }
  instrumentmeasurementid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instrumentmeasurementid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.instrumentMeasurementId)
}

// int32 channel = 2;
inline void InstrumentMeasurement::clear_channel() {
  channel_ = 0;
}
inline ::google::protobuf::int32 InstrumentMeasurement::channel() const {
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.channel)
  return channel_;
}
inline void InstrumentMeasurement::set_channel(::google::protobuf::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:claros.instrument.InstrumentMeasurement.channel)
}

// string fusionId = 3;
inline void InstrumentMeasurement::clear_fusionid() {
  fusionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurement::fusionid() const {
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.fusionId)
  return fusionid_.GetNoArena();
}
inline void InstrumentMeasurement::set_fusionid(const ::std::string& value) {
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.InstrumentMeasurement.fusionId)
}
#if LANG_CXX11
inline void InstrumentMeasurement::set_fusionid(::std::string&& value) {
  
  fusionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.InstrumentMeasurement.fusionId)
}
#endif
inline void InstrumentMeasurement::set_fusionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.InstrumentMeasurement.fusionId)
}
inline void InstrumentMeasurement::set_fusionid(const char* value, size_t size) {
  
  fusionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.InstrumentMeasurement.fusionId)
}
inline ::std::string* InstrumentMeasurement::mutable_fusionid() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.fusionId)
  return fusionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurement::release_fusionid() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.fusionId)
  
  return fusionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurement::set_allocated_fusionid(::std::string* fusionid) {
  if (fusionid != nullptr) {
    
  } else {
    
  }
  fusionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fusionid);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.fusionId)
}

// .claros.common.core.Measurement measurement = 4;
inline bool InstrumentMeasurement::has_measurement() const {
  return this != internal_default_instance() && measurement_ != nullptr;
}
inline const ::claros::common::core::Measurement& InstrumentMeasurement::measurement() const {
  const ::claros::common::core::Measurement* p = measurement_;
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.measurement)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::Measurement*>(
      &::claros::common::core::_Measurement_default_instance_);
}
inline ::claros::common::core::Measurement* InstrumentMeasurement::release_measurement() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.measurement)
  
  ::claros::common::core::Measurement* temp = measurement_;
  measurement_ = nullptr;
  return temp;
}
inline ::claros::common::core::Measurement* InstrumentMeasurement::mutable_measurement() {
  
  if (measurement_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::Measurement>(GetArenaNoVirtual());
    measurement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.measurement)
  return measurement_;
}
inline void InstrumentMeasurement::set_allocated_measurement(::claros::common::core::Measurement* measurement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(measurement_);
  }
  if (measurement) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measurement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, measurement, submessage_arena);
    }
    
  } else {
    
  }
  measurement_ = measurement;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.measurement)
}

// .claros.instrument.InstrumentMeasurement supportingMeasurements = 5;
inline bool InstrumentMeasurement::has_supportingmeasurements() const {
  return this != internal_default_instance() && supportingmeasurements_ != nullptr;
}
inline void InstrumentMeasurement::clear_supportingmeasurements() {
  if (GetArenaNoVirtual() == nullptr && supportingmeasurements_ != nullptr) {
    delete supportingmeasurements_;
  }
  supportingmeasurements_ = nullptr;
}
inline const ::claros::instrument::InstrumentMeasurement& InstrumentMeasurement::supportingmeasurements() const {
  const ::claros::instrument::InstrumentMeasurement* p = supportingmeasurements_;
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.supportingMeasurements)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::instrument::InstrumentMeasurement*>(
      &::claros::instrument::_InstrumentMeasurement_default_instance_);
}
inline ::claros::instrument::InstrumentMeasurement* InstrumentMeasurement::release_supportingmeasurements() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.supportingMeasurements)
  
  ::claros::instrument::InstrumentMeasurement* temp = supportingmeasurements_;
  supportingmeasurements_ = nullptr;
  return temp;
}
inline ::claros::instrument::InstrumentMeasurement* InstrumentMeasurement::mutable_supportingmeasurements() {
  
  if (supportingmeasurements_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::instrument::InstrumentMeasurement>(GetArenaNoVirtual());
    supportingmeasurements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.supportingMeasurements)
  return supportingmeasurements_;
}
inline void InstrumentMeasurement::set_allocated_supportingmeasurements(::claros::instrument::InstrumentMeasurement* supportingmeasurements) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete supportingmeasurements_;
  }
  if (supportingmeasurements) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      supportingmeasurements = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, supportingmeasurements, submessage_arena);
    }
    
  } else {
    
  }
  supportingmeasurements_ = supportingmeasurements;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.supportingMeasurements)
}

// .claros.common.gis.GIS gis = 6;
inline bool InstrumentMeasurement::has_gis() const {
  return this != internal_default_instance() && gis_ != nullptr;
}
inline const ::claros::common::gis::GIS& InstrumentMeasurement::gis() const {
  const ::claros::common::gis::GIS* p = gis_;
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.gis)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::gis::GIS*>(
      &::claros::common::gis::_GIS_default_instance_);
}
inline ::claros::common::gis::GIS* InstrumentMeasurement::release_gis() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.gis)
  
  ::claros::common::gis::GIS* temp = gis_;
  gis_ = nullptr;
  return temp;
}
inline ::claros::common::gis::GIS* InstrumentMeasurement::mutable_gis() {
  
  if (gis_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::gis::GIS>(GetArenaNoVirtual());
    gis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.gis)
  return gis_;
}
inline void InstrumentMeasurement::set_allocated_gis(::claros::common::gis::GIS* gis) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(gis_);
  }
  if (gis) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gis = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gis, submessage_arena);
    }
    
  } else {
    
  }
  gis_ = gis;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.gis)
}

// string measurementDataExtended = 7;
inline void InstrumentMeasurement::clear_measurementdataextended() {
  measurementdataextended_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstrumentMeasurement::measurementdataextended() const {
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.measurementDataExtended)
  return measurementdataextended_.GetNoArena();
}
inline void InstrumentMeasurement::set_measurementdataextended(const ::std::string& value) {
  
  measurementdataextended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.instrument.InstrumentMeasurement.measurementDataExtended)
}
#if LANG_CXX11
inline void InstrumentMeasurement::set_measurementdataextended(::std::string&& value) {
  
  measurementdataextended_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.instrument.InstrumentMeasurement.measurementDataExtended)
}
#endif
inline void InstrumentMeasurement::set_measurementdataextended(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  measurementdataextended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.instrument.InstrumentMeasurement.measurementDataExtended)
}
inline void InstrumentMeasurement::set_measurementdataextended(const char* value, size_t size) {
  
  measurementdataextended_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.instrument.InstrumentMeasurement.measurementDataExtended)
}
inline ::std::string* InstrumentMeasurement::mutable_measurementdataextended() {
  
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.measurementDataExtended)
  return measurementdataextended_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstrumentMeasurement::release_measurementdataextended() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.measurementDataExtended)
  
  return measurementdataextended_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstrumentMeasurement::set_allocated_measurementdataextended(::std::string* measurementdataextended) {
  if (measurementdataextended != nullptr) {
    
  } else {
    
  }
  measurementdataextended_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), measurementdataextended);
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.measurementDataExtended)
}

// .claros.instrument.InstrumentEvent measurementEvent = 8;
inline bool InstrumentMeasurement::has_measurementevent() const {
  return this != internal_default_instance() && measurementevent_ != nullptr;
}
inline const ::claros::instrument::InstrumentEvent& InstrumentMeasurement::measurementevent() const {
  const ::claros::instrument::InstrumentEvent* p = measurementevent_;
  // @@protoc_insertion_point(field_get:claros.instrument.InstrumentMeasurement.measurementEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::instrument::InstrumentEvent*>(
      &::claros::instrument::_InstrumentEvent_default_instance_);
}
inline ::claros::instrument::InstrumentEvent* InstrumentMeasurement::release_measurementevent() {
  // @@protoc_insertion_point(field_release:claros.instrument.InstrumentMeasurement.measurementEvent)
  
  ::claros::instrument::InstrumentEvent* temp = measurementevent_;
  measurementevent_ = nullptr;
  return temp;
}
inline ::claros::instrument::InstrumentEvent* InstrumentMeasurement::mutable_measurementevent() {
  
  if (measurementevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::instrument::InstrumentEvent>(GetArenaNoVirtual());
    measurementevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.instrument.InstrumentMeasurement.measurementEvent)
  return measurementevent_;
}
inline void InstrumentMeasurement::set_allocated_measurementevent(::claros::instrument::InstrumentEvent* measurementevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(measurementevent_);
  }
  if (measurementevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      measurementevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, measurementevent, submessage_arena);
    }
    
  } else {
    
  }
  measurementevent_ = measurementevent;
  // @@protoc_insertion_point(field_set_allocated:claros.instrument.InstrumentMeasurement.measurementEvent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace instrument
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5finstrument_5fmeasurement_2eproto
