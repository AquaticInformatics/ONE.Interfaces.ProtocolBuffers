// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_measurement.proto

#ifndef PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fmeasurement_2eproto
#define PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fmeasurement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "claros_common_core_clarosdatetime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fmeasurement_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_claros_5fcommon_5fcore_5fmeasurement_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_claros_5fcommon_5fcore_5fmeasurement_2eproto();
namespace claros {
namespace common {
namespace core {
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> ::claros::common::core::Measurement* Arena::CreateMaybeMessage<::claros::common::core::Measurement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace claros {
namespace common {
namespace core {

// ===================================================================

class Measurement :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:claros.common.core.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Measurement* other);
  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return CreateMaybeMessage<Measurement>(nullptr);
  }

  Measurement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parameterGuid = 3;
  void clear_parameterguid();
  static const int kParameterGuidFieldNumber = 3;
  const ::std::string& parameterguid() const;
  void set_parameterguid(const ::std::string& value);
  #if LANG_CXX11
  void set_parameterguid(::std::string&& value);
  #endif
  void set_parameterguid(const char* value);
  void set_parameterguid(const char* value, size_t size);
  ::std::string* mutable_parameterguid();
  ::std::string* release_parameterguid();
  void set_allocated_parameterguid(::std::string* parameterguid);

  // string unitGuid = 5;
  void clear_unitguid();
  static const int kUnitGuidFieldNumber = 5;
  const ::std::string& unitguid() const;
  void set_unitguid(const ::std::string& value);
  #if LANG_CXX11
  void set_unitguid(::std::string&& value);
  #endif
  void set_unitguid(const char* value);
  void set_unitguid(const char* value, size_t size);
  ::std::string* mutable_unitguid();
  ::std::string* release_unitguid();
  void set_allocated_unitguid(::std::string* unitguid);

  // .claros.common.core.ClarosDateTime timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::claros::common::core::ClarosDateTime& timestamp() const;
  ::claros::common::core::ClarosDateTime* release_timestamp();
  ::claros::common::core::ClarosDateTime* mutable_timestamp();
  void set_allocated_timestamp(::claros::common::core::ClarosDateTime* timestamp);

  // int32 parameterId = 2;
  void clear_parameterid();
  static const int kParameterIdFieldNumber = 2;
  ::google::protobuf::int32 parameterid() const;
  void set_parameterid(::google::protobuf::int32 value);

  // int32 unitId = 4;
  void clear_unitid();
  static const int kUnitIdFieldNumber = 4;
  ::google::protobuf::int32 unitid() const;
  void set_unitid(::google::protobuf::int32 value);

  // float value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:claros.common.core.Measurement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parameterguid_;
  ::google::protobuf::internal::ArenaStringPtr unitguid_;
  ::claros::common::core::ClarosDateTime* timestamp_;
  ::google::protobuf::int32 parameterid_;
  ::google::protobuf::int32 unitid_;
  float value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_claros_5fcommon_5fcore_5fmeasurement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Measurement

// .claros.common.core.ClarosDateTime timestamp = 1;
inline bool Measurement::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::claros::common::core::ClarosDateTime& Measurement::timestamp() const {
  const ::claros::common::core::ClarosDateTime* p = timestamp_;
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::claros::common::core::ClarosDateTime*>(
      &::claros::common::core::_ClarosDateTime_default_instance_);
}
inline ::claros::common::core::ClarosDateTime* Measurement::release_timestamp() {
  // @@protoc_insertion_point(field_release:claros.common.core.Measurement.timestamp)
  
  ::claros::common::core::ClarosDateTime* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::claros::common::core::ClarosDateTime* Measurement::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::claros::common::core::ClarosDateTime>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:claros.common.core.Measurement.timestamp)
  return timestamp_;
}
inline void Measurement::set_allocated_timestamp(::claros::common::core::ClarosDateTime* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.Measurement.timestamp)
}

// int32 parameterId = 2;
inline void Measurement::clear_parameterid() {
  parameterid_ = 0;
}
inline ::google::protobuf::int32 Measurement::parameterid() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.parameterId)
  return parameterid_;
}
inline void Measurement::set_parameterid(::google::protobuf::int32 value) {
  
  parameterid_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Measurement.parameterId)
}

// string parameterGuid = 3;
inline void Measurement::clear_parameterguid() {
  parameterguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measurement::parameterguid() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.parameterGuid)
  return parameterguid_.GetNoArena();
}
inline void Measurement::set_parameterguid(const ::std::string& value) {
  
  parameterguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.core.Measurement.parameterGuid)
}
#if LANG_CXX11
inline void Measurement::set_parameterguid(::std::string&& value) {
  
  parameterguid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.core.Measurement.parameterGuid)
}
#endif
inline void Measurement::set_parameterguid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameterguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.core.Measurement.parameterGuid)
}
inline void Measurement::set_parameterguid(const char* value, size_t size) {
  
  parameterguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.core.Measurement.parameterGuid)
}
inline ::std::string* Measurement::mutable_parameterguid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.core.Measurement.parameterGuid)
  return parameterguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measurement::release_parameterguid() {
  // @@protoc_insertion_point(field_release:claros.common.core.Measurement.parameterGuid)
  
  return parameterguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_parameterguid(::std::string* parameterguid) {
  if (parameterguid != nullptr) {
    
  } else {
    
  }
  parameterguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameterguid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.Measurement.parameterGuid)
}

// int32 unitId = 4;
inline void Measurement::clear_unitid() {
  unitid_ = 0;
}
inline ::google::protobuf::int32 Measurement::unitid() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.unitId)
  return unitid_;
}
inline void Measurement::set_unitid(::google::protobuf::int32 value) {
  
  unitid_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Measurement.unitId)
}

// string unitGuid = 5;
inline void Measurement::clear_unitguid() {
  unitguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Measurement::unitguid() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.unitGuid)
  return unitguid_.GetNoArena();
}
inline void Measurement::set_unitguid(const ::std::string& value) {
  
  unitguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:claros.common.core.Measurement.unitGuid)
}
#if LANG_CXX11
inline void Measurement::set_unitguid(::std::string&& value) {
  
  unitguid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:claros.common.core.Measurement.unitGuid)
}
#endif
inline void Measurement::set_unitguid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unitguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:claros.common.core.Measurement.unitGuid)
}
inline void Measurement::set_unitguid(const char* value, size_t size) {
  
  unitguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:claros.common.core.Measurement.unitGuid)
}
inline ::std::string* Measurement::mutable_unitguid() {
  
  // @@protoc_insertion_point(field_mutable:claros.common.core.Measurement.unitGuid)
  return unitguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Measurement::release_unitguid() {
  // @@protoc_insertion_point(field_release:claros.common.core.Measurement.unitGuid)
  
  return unitguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Measurement::set_allocated_unitguid(::std::string* unitguid) {
  if (unitguid != nullptr) {
    
  } else {
    
  }
  unitguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unitguid);
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.Measurement.unitGuid)
}

// float value = 6;
inline void Measurement::clear_value() {
  value_ = 0;
}
inline float Measurement::value() const {
  // @@protoc_insertion_point(field_get:claros.common.core.Measurement.value)
  return value_;
}
inline void Measurement::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:claros.common.core.Measurement.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace common
}  // namespace claros

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_claros_5fcommon_5fcore_5fmeasurement_2eproto
