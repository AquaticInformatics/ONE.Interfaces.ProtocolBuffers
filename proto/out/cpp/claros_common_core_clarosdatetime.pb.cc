// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_clarosdatetime.proto

#include "claros_common_core_clarosdatetime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_claros_5fcommon_5fcore_5fmobiledatetime_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MobileDateTime_claros_5fcommon_5fcore_5fmobiledatetime_2eproto;
namespace claros {
namespace common {
namespace core {
class ClarosDateTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClarosDateTime> _instance;
  const ::claros::common::core::MobileDateTime* mobiledatetime_;
  ::google::protobuf::internal::ArenaStringPtr jsondatetime_;
  ::google::protobuf::uint64 ticks_;
} _ClarosDateTime_default_instance_;
}  // namespace core
}  // namespace common
}  // namespace claros
static void InitDefaultsClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::claros::common::core::_ClarosDateTime_default_instance_;
    new (ptr) ::claros::common::core::ClarosDateTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::claros::common::core::ClarosDateTime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto}, {
      &scc_info_MobileDateTime_claros_5fcommon_5fcore_5fmobiledatetime_2eproto.base,}};

void InitDefaults_claros_5fcommon_5fcore_5fclarosdatetime_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_claros_5fcommon_5fcore_5fclarosdatetime_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_claros_5fcommon_5fcore_5fclarosdatetime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::ClarosDateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::claros::common::core::ClarosDateTime, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::claros::common::core::ClarosDateTimeDefaultTypeInternal, mobiledatetime_),
  offsetof(::claros::common::core::ClarosDateTimeDefaultTypeInternal, jsondatetime_),
  offsetof(::claros::common::core::ClarosDateTimeDefaultTypeInternal, ticks_),
  PROTOBUF_FIELD_OFFSET(::claros::common::core::ClarosDateTime, clarosDateTime_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::claros::common::core::ClarosDateTime)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::claros::common::core::_ClarosDateTime_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_claros_5fcommon_5fcore_5fclarosdatetime_2eproto = {
  {}, AddDescriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, "claros_common_core_clarosdatetime.proto", schemas,
  file_default_instances, TableStruct_claros_5fcommon_5fcore_5fclarosdatetime_2eproto::offsets,
  file_level_metadata_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, 1, file_level_enum_descriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, file_level_service_descriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto,
};

const char descriptor_table_protodef_claros_5fcommon_5fcore_5fclarosdatetime_2eproto[] =
  "\n\'claros_common_core_clarosdatetime.prot"
  "o\022\022claros.common.core\032\'claros_common_cor"
  "e_mobiledatetime.proto\"\211\001\n\016ClarosDateTim"
  "e\022<\n\016mobileDateTime\030\001 \001(\0132\".claros.commo"
  "n.core.MobileDateTimeH\000\022\026\n\014jsonDateTime\030"
  "\002 \001(\tH\000\022\017\n\005ticks\030\003 \001(\004H\000B\020\n\016clarosDateTi"
  "meb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_claros_5fcommon_5fcore_5fclarosdatetime_2eproto = {
  false, InitDefaults_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, 
  descriptor_table_protodef_claros_5fcommon_5fcore_5fclarosdatetime_2eproto,
  "claros_common_core_clarosdatetime.proto", &assign_descriptors_table_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, 250,
};

void AddDescriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_claros_5fcommon_5fcore_5fmobiledatetime_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_claros_5fcommon_5fcore_5fclarosdatetime_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_claros_5fcommon_5fcore_5fclarosdatetime_2eproto = []() { AddDescriptors_claros_5fcommon_5fcore_5fclarosdatetime_2eproto(); return true; }();
namespace claros {
namespace common {
namespace core {

// ===================================================================

void ClarosDateTime::InitAsDefaultInstance() {
  ::claros::common::core::_ClarosDateTime_default_instance_.mobiledatetime_ = const_cast< ::claros::common::core::MobileDateTime*>(
      ::claros::common::core::MobileDateTime::internal_default_instance());
  ::claros::common::core::_ClarosDateTime_default_instance_.jsondatetime_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::claros::common::core::_ClarosDateTime_default_instance_.ticks_ = PROTOBUF_ULONGLONG(0);
}
class ClarosDateTime::HasBitSetters {
 public:
  static const ::claros::common::core::MobileDateTime& mobiledatetime(const ClarosDateTime* msg);
};

const ::claros::common::core::MobileDateTime&
ClarosDateTime::HasBitSetters::mobiledatetime(const ClarosDateTime* msg) {
  return *msg->clarosDateTime_.mobiledatetime_;
}
void ClarosDateTime::set_allocated_mobiledatetime(::claros::common::core::MobileDateTime* mobiledatetime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_clarosDateTime();
  if (mobiledatetime) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mobiledatetime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mobiledatetime, submessage_arena);
    }
    set_has_mobiledatetime();
    clarosDateTime_.mobiledatetime_ = mobiledatetime;
  }
  // @@protoc_insertion_point(field_set_allocated:claros.common.core.ClarosDateTime.mobileDateTime)
}
void ClarosDateTime::clear_mobiledatetime() {
  if (has_mobiledatetime()) {
    delete clarosDateTime_.mobiledatetime_;
    clear_has_clarosDateTime();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClarosDateTime::kMobileDateTimeFieldNumber;
const int ClarosDateTime::kJsonDateTimeFieldNumber;
const int ClarosDateTime::kTicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClarosDateTime::ClarosDateTime()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:claros.common.core.ClarosDateTime)
}
ClarosDateTime::ClarosDateTime(const ClarosDateTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_clarosDateTime();
  switch (from.clarosDateTime_case()) {
    case kMobileDateTime: {
      mutable_mobiledatetime()->::claros::common::core::MobileDateTime::MergeFrom(from.mobiledatetime());
      break;
    }
    case kJsonDateTime: {
      set_jsondatetime(from.jsondatetime());
      break;
    }
    case kTicks: {
      set_ticks(from.ticks());
      break;
    }
    case CLAROSDATETIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:claros.common.core.ClarosDateTime)
}

void ClarosDateTime::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto.base);
  clear_has_clarosDateTime();
}

ClarosDateTime::~ClarosDateTime() {
  // @@protoc_insertion_point(destructor:claros.common.core.ClarosDateTime)
  SharedDtor();
}

void ClarosDateTime::SharedDtor() {
  if (has_clarosDateTime()) {
    clear_clarosDateTime();
  }
}

void ClarosDateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClarosDateTime& ClarosDateTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClarosDateTime_claros_5fcommon_5fcore_5fclarosdatetime_2eproto.base);
  return *internal_default_instance();
}


void ClarosDateTime::clear_clarosDateTime() {
// @@protoc_insertion_point(one_of_clear_start:claros.common.core.ClarosDateTime)
  switch (clarosDateTime_case()) {
    case kMobileDateTime: {
      delete clarosDateTime_.mobiledatetime_;
      break;
    }
    case kJsonDateTime: {
      clarosDateTime_.jsondatetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTicks: {
      // No need to clear
      break;
    }
    case CLAROSDATETIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLAROSDATETIME_NOT_SET;
}


void ClarosDateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:claros.common.core.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_clarosDateTime();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClarosDateTime::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClarosDateTime*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .claros.common.core.MobileDateTime mobileDateTime = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::claros::common::core::MobileDateTime::_InternalParse;
        object = msg->mutable_mobiledatetime();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string jsonDateTime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("claros.common.core.ClarosDateTime.jsonDateTime");
        object = msg->mutable_jsondatetime();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 ticks = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_ticks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClarosDateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:claros.common.core.ClarosDateTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .claros.common.core.MobileDateTime mobileDateTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mobiledatetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string jsonDateTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsondatetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->jsondatetime().data(), static_cast<int>(this->jsondatetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "claros.common.core.ClarosDateTime.jsonDateTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 ticks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          clear_clarosDateTime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clarosDateTime_.ticks_)));
          set_has_ticks();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:claros.common.core.ClarosDateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:claros.common.core.ClarosDateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClarosDateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:claros.common.core.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.core.MobileDateTime mobileDateTime = 1;
  if (has_mobiledatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::mobiledatetime(this), output);
  }

  // string jsonDateTime = 2;
  if (has_jsondatetime()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondatetime().data(), static_cast<int>(this->jsondatetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.core.ClarosDateTime.jsonDateTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->jsondatetime(), output);
  }

  // uint64 ticks = 3;
  if (has_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ticks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:claros.common.core.ClarosDateTime)
}

::google::protobuf::uint8* ClarosDateTime::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:claros.common.core.ClarosDateTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .claros.common.core.MobileDateTime mobileDateTime = 1;
  if (has_mobiledatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::mobiledatetime(this), target);
  }

  // string jsonDateTime = 2;
  if (has_jsondatetime()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->jsondatetime().data(), static_cast<int>(this->jsondatetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "claros.common.core.ClarosDateTime.jsonDateTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->jsondatetime(), target);
  }

  // uint64 ticks = 3;
  if (has_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ticks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:claros.common.core.ClarosDateTime)
  return target;
}

size_t ClarosDateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:claros.common.core.ClarosDateTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (clarosDateTime_case()) {
    // .claros.common.core.MobileDateTime mobileDateTime = 1;
    case kMobileDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *clarosDateTime_.mobiledatetime_);
      break;
    }
    // string jsonDateTime = 2;
    case kJsonDateTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsondatetime());
      break;
    }
    // uint64 ticks = 3;
    case kTicks: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticks());
      break;
    }
    case CLAROSDATETIME_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClarosDateTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:claros.common.core.ClarosDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ClarosDateTime* source =
      ::google::protobuf::DynamicCastToGenerated<ClarosDateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:claros.common.core.ClarosDateTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:claros.common.core.ClarosDateTime)
    MergeFrom(*source);
  }
}

void ClarosDateTime::MergeFrom(const ClarosDateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:claros.common.core.ClarosDateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.clarosDateTime_case()) {
    case kMobileDateTime: {
      mutable_mobiledatetime()->::claros::common::core::MobileDateTime::MergeFrom(from.mobiledatetime());
      break;
    }
    case kJsonDateTime: {
      set_jsondatetime(from.jsondatetime());
      break;
    }
    case kTicks: {
      set_ticks(from.ticks());
      break;
    }
    case CLAROSDATETIME_NOT_SET: {
      break;
    }
  }
}

void ClarosDateTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:claros.common.core.ClarosDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClarosDateTime::CopyFrom(const ClarosDateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:claros.common.core.ClarosDateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClarosDateTime::IsInitialized() const {
  return true;
}

void ClarosDateTime::Swap(ClarosDateTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClarosDateTime::InternalSwap(ClarosDateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clarosDateTime_, other->clarosDateTime_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata ClarosDateTime::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_claros_5fcommon_5fcore_5fclarosdatetime_2eproto);
  return ::file_level_metadata_claros_5fcommon_5fcore_5fclarosdatetime_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace common
}  // namespace claros
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::claros::common::core::ClarosDateTime* Arena::CreateMaybeMessage< ::claros::common::core::ClarosDateTime >(Arena* arena) {
  return Arena::CreateInternal< ::claros::common::core::ClarosDateTime >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
