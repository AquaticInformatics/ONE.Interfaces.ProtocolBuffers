/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.instrument.measurement.InstrumentMeasurementData');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.claros.common.core.Measurement');
goog.require('proto.claros.common.gis.GIS');
goog.require('proto.claros.instrument.event.InstrumentEventData');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.instrument.measurement.InstrumentMeasurementData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.claros.instrument.measurement.InstrumentMeasurementData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.instrument.measurement.InstrumentMeasurementData.displayName = 'proto.claros.instrument.measurement.InstrumentMeasurementData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.instrument.measurement.InstrumentMeasurementData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.instrument.measurement.InstrumentMeasurementData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrumentmeasurementid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fusionid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    measurement: (f = msg.getMeasurement()) && proto.claros.common.core.Measurement.toObject(includeInstance, f),
    supportingmeasurements: (f = msg.getSupportingmeasurements()) && proto.claros.instrument.measurement.InstrumentMeasurementData.toObject(includeInstance, f),
    gis: (f = msg.getGis()) && proto.claros.common.gis.GIS.toObject(includeInstance, f),
    measurementdataextended: jspb.Message.getFieldWithDefault(msg, 7, ""),
    measurementevent: (f = msg.getMeasurementevent()) && proto.claros.instrument.event.InstrumentEventData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.instrument.measurement.InstrumentMeasurementData}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.instrument.measurement.InstrumentMeasurementData;
  return proto.claros.instrument.measurement.InstrumentMeasurementData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.instrument.measurement.InstrumentMeasurementData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.instrument.measurement.InstrumentMeasurementData}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrumentmeasurementid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFusionid(value);
      break;
    case 4:
      var value = new proto.claros.common.core.Measurement;
      reader.readMessage(value,proto.claros.common.core.Measurement.deserializeBinaryFromReader);
      msg.setMeasurement(value);
      break;
    case 5:
      var value = new proto.claros.instrument.measurement.InstrumentMeasurementData;
      reader.readMessage(value,proto.claros.instrument.measurement.InstrumentMeasurementData.deserializeBinaryFromReader);
      msg.setSupportingmeasurements(value);
      break;
    case 6:
      var value = new proto.claros.common.gis.GIS;
      reader.readMessage(value,proto.claros.common.gis.GIS.deserializeBinaryFromReader);
      msg.setGis(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMeasurementdataextended(value);
      break;
    case 8:
      var value = new proto.claros.instrument.event.InstrumentEventData;
      reader.readMessage(value,proto.claros.instrument.event.InstrumentEventData.deserializeBinaryFromReader);
      msg.setMeasurementevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.instrument.measurement.InstrumentMeasurementData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.instrument.measurement.InstrumentMeasurementData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentmeasurementid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFusionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMeasurement();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.claros.common.core.Measurement.serializeBinaryToWriter
    );
  }
  f = message.getSupportingmeasurements();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.claros.instrument.measurement.InstrumentMeasurementData.serializeBinaryToWriter
    );
  }
  f = message.getGis();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.claros.common.gis.GIS.serializeBinaryToWriter
    );
  }
  f = message.getMeasurementdataextended();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMeasurementevent();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.claros.instrument.event.InstrumentEventData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string instrumentMeasurementId = 1;
 * @return {string}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getInstrumentmeasurementid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setInstrumentmeasurementid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 channel = 2;
 * @return {number}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string fusionId = 3;
 * @return {string}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getFusionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setFusionid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional claros.common.core.Measurement measurement = 4;
 * @return {?proto.claros.common.core.Measurement}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getMeasurement = function() {
  return /** @type{?proto.claros.common.core.Measurement} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.core.Measurement, 4));
};


/** @param {?proto.claros.common.core.Measurement|undefined} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setMeasurement = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.clearMeasurement = function() {
  this.setMeasurement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.hasMeasurement = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InstrumentMeasurementData supportingMeasurements = 5;
 * @return {?proto.claros.instrument.measurement.InstrumentMeasurementData}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getSupportingmeasurements = function() {
  return /** @type{?proto.claros.instrument.measurement.InstrumentMeasurementData} */ (
    jspb.Message.getWrapperField(this, proto.claros.instrument.measurement.InstrumentMeasurementData, 5));
};


/** @param {?proto.claros.instrument.measurement.InstrumentMeasurementData|undefined} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setSupportingmeasurements = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.clearSupportingmeasurements = function() {
  this.setSupportingmeasurements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.hasSupportingmeasurements = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional claros.common.gis.GIS gis = 6;
 * @return {?proto.claros.common.gis.GIS}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getGis = function() {
  return /** @type{?proto.claros.common.gis.GIS} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.gis.GIS, 6));
};


/** @param {?proto.claros.common.gis.GIS|undefined} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setGis = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.clearGis = function() {
  this.setGis(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.hasGis = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string measurementDataExtended = 7;
 * @return {string}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getMeasurementdataextended = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setMeasurementdataextended = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional claros.instrument.event.InstrumentEventData measurementEvent = 8;
 * @return {?proto.claros.instrument.event.InstrumentEventData}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.getMeasurementevent = function() {
  return /** @type{?proto.claros.instrument.event.InstrumentEventData} */ (
    jspb.Message.getWrapperField(this, proto.claros.instrument.event.InstrumentEventData, 8));
};


/** @param {?proto.claros.instrument.event.InstrumentEventData|undefined} value */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.setMeasurementevent = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.clearMeasurementevent = function() {
  this.setMeasurementevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.measurement.InstrumentMeasurementData.prototype.hasMeasurementevent = function() {
  return jspb.Message.getField(this, 8) != null;
};


