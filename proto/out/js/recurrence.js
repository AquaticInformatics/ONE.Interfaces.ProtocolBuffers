/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.common.recurrence.Recurrence');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.claros.common.core.ClarosDateTime');
goog.require('proto.claros.common.recurrence.PatternDaily');
goog.require('proto.claros.common.recurrence.PatternMonthly');
goog.require('proto.claros.common.recurrence.PatternWeekly');
goog.require('proto.claros.common.recurrence.PatternYearly');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.common.recurrence.Recurrence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.claros.common.recurrence.Recurrence.oneofGroups_);
};
goog.inherits(proto.claros.common.recurrence.Recurrence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.common.recurrence.Recurrence.displayName = 'proto.claros.common.recurrence.Recurrence';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.claros.common.recurrence.Recurrence.oneofGroups_ = [[1,2,3,4],[6,7,8]];

/**
 * @enum {number}
 */
proto.claros.common.recurrence.Recurrence.RecurrencepatternCase = {
  RECURRENCEPATTERN_NOT_SET: 0,
  DAILY: 1,
  WEEKLY: 2,
  MONTHLY: 3,
  YEARLY: 4
};

/**
 * @return {proto.claros.common.recurrence.Recurrence.RecurrencepatternCase}
 */
proto.claros.common.recurrence.Recurrence.prototype.getRecurrencepatternCase = function() {
  return /** @type {proto.claros.common.recurrence.Recurrence.RecurrencepatternCase} */(jspb.Message.computeOneofCase(this, proto.claros.common.recurrence.Recurrence.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.claros.common.recurrence.Recurrence.RecurrenceendCase = {
  RECURRENCEEND_NOT_SET: 0,
  NOEND: 6,
  NUMBEROFOCCURANCES: 7,
  ENDDATE: 8
};

/**
 * @return {proto.claros.common.recurrence.Recurrence.RecurrenceendCase}
 */
proto.claros.common.recurrence.Recurrence.prototype.getRecurrenceendCase = function() {
  return /** @type {proto.claros.common.recurrence.Recurrence.RecurrenceendCase} */(jspb.Message.computeOneofCase(this, proto.claros.common.recurrence.Recurrence.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.common.recurrence.Recurrence.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.common.recurrence.Recurrence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.common.recurrence.Recurrence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.recurrence.Recurrence.toObject = function(includeInstance, msg) {
  var f, obj = {
    daily: (f = msg.getDaily()) && proto.claros.common.recurrence.PatternDaily.toObject(includeInstance, f),
    weekly: (f = msg.getWeekly()) && proto.claros.common.recurrence.PatternWeekly.toObject(includeInstance, f),
    monthly: (f = msg.getMonthly()) && proto.claros.common.recurrence.PatternMonthly.toObject(includeInstance, f),
    yearly: (f = msg.getYearly()) && proto.claros.common.recurrence.PatternYearly.toObject(includeInstance, f),
    recurrencestartdate: (f = msg.getRecurrencestartdate()) && proto.claros.common.core.ClarosDateTime.toObject(includeInstance, f),
    noend: jspb.Message.getFieldWithDefault(msg, 6, false),
    numberofoccurances: jspb.Message.getFieldWithDefault(msg, 7, 0),
    enddate: (f = msg.getEnddate()) && proto.claros.common.core.ClarosDateTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.common.recurrence.Recurrence}
 */
proto.claros.common.recurrence.Recurrence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.common.recurrence.Recurrence;
  return proto.claros.common.recurrence.Recurrence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.common.recurrence.Recurrence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.common.recurrence.Recurrence}
 */
proto.claros.common.recurrence.Recurrence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.claros.common.recurrence.PatternDaily;
      reader.readMessage(value,proto.claros.common.recurrence.PatternDaily.deserializeBinaryFromReader);
      msg.setDaily(value);
      break;
    case 2:
      var value = new proto.claros.common.recurrence.PatternWeekly;
      reader.readMessage(value,proto.claros.common.recurrence.PatternWeekly.deserializeBinaryFromReader);
      msg.setWeekly(value);
      break;
    case 3:
      var value = new proto.claros.common.recurrence.PatternMonthly;
      reader.readMessage(value,proto.claros.common.recurrence.PatternMonthly.deserializeBinaryFromReader);
      msg.setMonthly(value);
      break;
    case 4:
      var value = new proto.claros.common.recurrence.PatternYearly;
      reader.readMessage(value,proto.claros.common.recurrence.PatternYearly.deserializeBinaryFromReader);
      msg.setYearly(value);
      break;
    case 5:
      var value = new proto.claros.common.core.ClarosDateTime;
      reader.readMessage(value,proto.claros.common.core.ClarosDateTime.deserializeBinaryFromReader);
      msg.setRecurrencestartdate(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoend(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumberofoccurances(value);
      break;
    case 8:
      var value = new proto.claros.common.core.ClarosDateTime;
      reader.readMessage(value,proto.claros.common.core.ClarosDateTime.deserializeBinaryFromReader);
      msg.setEnddate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.common.recurrence.Recurrence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.common.recurrence.Recurrence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.common.recurrence.Recurrence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.recurrence.Recurrence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDaily();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.claros.common.recurrence.PatternDaily.serializeBinaryToWriter
    );
  }
  f = message.getWeekly();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.claros.common.recurrence.PatternWeekly.serializeBinaryToWriter
    );
  }
  f = message.getMonthly();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.claros.common.recurrence.PatternMonthly.serializeBinaryToWriter
    );
  }
  f = message.getYearly();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.claros.common.recurrence.PatternYearly.serializeBinaryToWriter
    );
  }
  f = message.getRecurrencestartdate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.claros.common.core.ClarosDateTime.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getEnddate();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.claros.common.core.ClarosDateTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional PatternDaily daily = 1;
 * @return {?proto.claros.common.recurrence.PatternDaily}
 */
proto.claros.common.recurrence.Recurrence.prototype.getDaily = function() {
  return /** @type{?proto.claros.common.recurrence.PatternDaily} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.recurrence.PatternDaily, 1));
};


/** @param {?proto.claros.common.recurrence.PatternDaily|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setDaily = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.claros.common.recurrence.Recurrence.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearDaily = function() {
  this.setDaily(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasDaily = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PatternWeekly weekly = 2;
 * @return {?proto.claros.common.recurrence.PatternWeekly}
 */
proto.claros.common.recurrence.Recurrence.prototype.getWeekly = function() {
  return /** @type{?proto.claros.common.recurrence.PatternWeekly} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.recurrence.PatternWeekly, 2));
};


/** @param {?proto.claros.common.recurrence.PatternWeekly|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setWeekly = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.claros.common.recurrence.Recurrence.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearWeekly = function() {
  this.setWeekly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasWeekly = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PatternMonthly monthly = 3;
 * @return {?proto.claros.common.recurrence.PatternMonthly}
 */
proto.claros.common.recurrence.Recurrence.prototype.getMonthly = function() {
  return /** @type{?proto.claros.common.recurrence.PatternMonthly} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.recurrence.PatternMonthly, 3));
};


/** @param {?proto.claros.common.recurrence.PatternMonthly|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setMonthly = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.claros.common.recurrence.Recurrence.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearMonthly = function() {
  this.setMonthly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasMonthly = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PatternYearly yearly = 4;
 * @return {?proto.claros.common.recurrence.PatternYearly}
 */
proto.claros.common.recurrence.Recurrence.prototype.getYearly = function() {
  return /** @type{?proto.claros.common.recurrence.PatternYearly} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.recurrence.PatternYearly, 4));
};


/** @param {?proto.claros.common.recurrence.PatternYearly|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setYearly = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.claros.common.recurrence.Recurrence.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearYearly = function() {
  this.setYearly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasYearly = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional claros.common.core.ClarosDateTime recurrenceStartDate = 5;
 * @return {?proto.claros.common.core.ClarosDateTime}
 */
proto.claros.common.recurrence.Recurrence.prototype.getRecurrencestartdate = function() {
  return /** @type{?proto.claros.common.core.ClarosDateTime} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.core.ClarosDateTime, 5));
};


/** @param {?proto.claros.common.core.ClarosDateTime|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setRecurrencestartdate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearRecurrencestartdate = function() {
  this.setRecurrencestartdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasRecurrencestartdate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool noEnd = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.getNoend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.claros.common.recurrence.Recurrence.prototype.setNoend = function(value) {
  jspb.Message.setOneofField(this, 6, proto.claros.common.recurrence.Recurrence.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearNoend = function() {
  jspb.Message.setOneofField(this, 6, proto.claros.common.recurrence.Recurrence.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasNoend = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 numberOfOccurances = 7;
 * @return {number}
 */
proto.claros.common.recurrence.Recurrence.prototype.getNumberofoccurances = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.claros.common.recurrence.Recurrence.prototype.setNumberofoccurances = function(value) {
  jspb.Message.setOneofField(this, 7, proto.claros.common.recurrence.Recurrence.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearNumberofoccurances = function() {
  jspb.Message.setOneofField(this, 7, proto.claros.common.recurrence.Recurrence.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasNumberofoccurances = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional claros.common.core.ClarosDateTime endDate = 8;
 * @return {?proto.claros.common.core.ClarosDateTime}
 */
proto.claros.common.recurrence.Recurrence.prototype.getEnddate = function() {
  return /** @type{?proto.claros.common.core.ClarosDateTime} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.core.ClarosDateTime, 8));
};


/** @param {?proto.claros.common.core.ClarosDateTime|undefined} value */
proto.claros.common.recurrence.Recurrence.prototype.setEnddate = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.claros.common.recurrence.Recurrence.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.recurrence.Recurrence.prototype.clearEnddate = function() {
  this.setEnddate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.recurrence.Recurrence.prototype.hasEnddate = function() {
  return jspb.Message.getField(this, 8) != null;
};


