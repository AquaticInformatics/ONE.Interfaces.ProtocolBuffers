/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.common.computation.Computation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.claros.common.computation.ExpressionLine');
goog.require('proto.claros.common.computation.Variable');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.common.computation.Computation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.claros.common.computation.Computation.repeatedFields_, proto.claros.common.computation.Computation.oneofGroups_);
};
goog.inherits(proto.claros.common.computation.Computation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.common.computation.Computation.displayName = 'proto.claros.common.computation.Computation';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.claros.common.computation.Computation.repeatedFields_ = [4,5,6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.claros.common.computation.Computation.oneofGroups_ = [[9,10]];

/**
 * @enum {number}
 */
proto.claros.common.computation.Computation.BindingCase = {
  BINDING_NOT_SET: 0,
  LEDGERID: 9,
  FORMID: 10
};

/**
 * @return {proto.claros.common.computation.Computation.BindingCase}
 */
proto.claros.common.computation.Computation.prototype.getBindingCase = function() {
  return /** @type {proto.claros.common.computation.Computation.BindingCase} */(jspb.Message.computeOneofCase(this, proto.claros.common.computation.Computation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.common.computation.Computation.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.common.computation.Computation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.common.computation.Computation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.computation.Computation.toObject = function(includeInstance, msg) {
  var f, obj = {
    i18nkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputvariablesList: jspb.Message.toObjectList(msg.getInputvariablesList(),
    proto.claros.common.computation.Variable.toObject, includeInstance),
    outputvariablesList: jspb.Message.toObjectList(msg.getOutputvariablesList(),
    proto.claros.common.computation.Variable.toObject, includeInstance),
    expressionlinesList: jspb.Message.toObjectList(msg.getExpressionlinesList(),
    proto.claros.common.computation.ExpressionLine.toObject, includeInstance),
    isactive: jspb.Message.getFieldWithDefault(msg, 7, false),
    isvalid: jspb.Message.getFieldWithDefault(msg, 8, false),
    ledgerid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    formid: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.common.computation.Computation}
 */
proto.claros.common.computation.Computation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.common.computation.Computation;
  return proto.claros.common.computation.Computation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.common.computation.Computation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.common.computation.Computation}
 */
proto.claros.common.computation.Computation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setI18nkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.claros.common.computation.Variable;
      reader.readMessage(value,proto.claros.common.computation.Variable.deserializeBinaryFromReader);
      msg.addInputvariables(value);
      break;
    case 5:
      var value = new proto.claros.common.computation.Variable;
      reader.readMessage(value,proto.claros.common.computation.Variable.deserializeBinaryFromReader);
      msg.addOutputvariables(value);
      break;
    case 6:
      var value = new proto.claros.common.computation.ExpressionLine;
      reader.readMessage(value,proto.claros.common.computation.ExpressionLine.deserializeBinaryFromReader);
      msg.addExpressionlines(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvalid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedgerid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.common.computation.Computation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.common.computation.Computation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.common.computation.Computation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.computation.Computation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI18nkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputvariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.claros.common.computation.Variable.serializeBinaryToWriter
    );
  }
  f = message.getOutputvariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.claros.common.computation.Variable.serializeBinaryToWriter
    );
  }
  f = message.getExpressionlinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.claros.common.computation.ExpressionLine.serializeBinaryToWriter
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsvalid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string i18nKey = 1;
 * @return {string}
 */
proto.claros.common.computation.Computation.prototype.getI18nkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.claros.common.computation.Computation.prototype.setI18nkey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.claros.common.computation.Computation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.claros.common.computation.Computation.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.claros.common.computation.Computation.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.claros.common.computation.Computation.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Variable inputVariables = 4;
 * @return {!Array<!proto.claros.common.computation.Variable>}
 */
proto.claros.common.computation.Computation.prototype.getInputvariablesList = function() {
  return /** @type{!Array<!proto.claros.common.computation.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.claros.common.computation.Variable, 4));
};


/** @param {!Array<!proto.claros.common.computation.Variable>} value */
proto.claros.common.computation.Computation.prototype.setInputvariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.claros.common.computation.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.claros.common.computation.Variable}
 */
proto.claros.common.computation.Computation.prototype.addInputvariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.claros.common.computation.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.claros.common.computation.Computation.prototype.clearInputvariablesList = function() {
  this.setInputvariablesList([]);
};


/**
 * repeated Variable outputVariables = 5;
 * @return {!Array<!proto.claros.common.computation.Variable>}
 */
proto.claros.common.computation.Computation.prototype.getOutputvariablesList = function() {
  return /** @type{!Array<!proto.claros.common.computation.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.claros.common.computation.Variable, 5));
};


/** @param {!Array<!proto.claros.common.computation.Variable>} value */
proto.claros.common.computation.Computation.prototype.setOutputvariablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.claros.common.computation.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.claros.common.computation.Variable}
 */
proto.claros.common.computation.Computation.prototype.addOutputvariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.claros.common.computation.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.claros.common.computation.Computation.prototype.clearOutputvariablesList = function() {
  this.setOutputvariablesList([]);
};


/**
 * repeated ExpressionLine expressionLines = 6;
 * @return {!Array<!proto.claros.common.computation.ExpressionLine>}
 */
proto.claros.common.computation.Computation.prototype.getExpressionlinesList = function() {
  return /** @type{!Array<!proto.claros.common.computation.ExpressionLine>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.claros.common.computation.ExpressionLine, 6));
};


/** @param {!Array<!proto.claros.common.computation.ExpressionLine>} value */
proto.claros.common.computation.Computation.prototype.setExpressionlinesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.claros.common.computation.ExpressionLine=} opt_value
 * @param {number=} opt_index
 * @return {!proto.claros.common.computation.ExpressionLine}
 */
proto.claros.common.computation.Computation.prototype.addExpressionlines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.claros.common.computation.ExpressionLine, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.claros.common.computation.Computation.prototype.clearExpressionlinesList = function() {
  this.setExpressionlinesList([]);
};


/**
 * optional bool isActive = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.claros.common.computation.Computation.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.claros.common.computation.Computation.prototype.setIsactive = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool isValid = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.claros.common.computation.Computation.prototype.getIsvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.claros.common.computation.Computation.prototype.setIsvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string ledgerId = 9;
 * @return {string}
 */
proto.claros.common.computation.Computation.prototype.getLedgerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.claros.common.computation.Computation.prototype.setLedgerid = function(value) {
  jspb.Message.setOneofField(this, 9, proto.claros.common.computation.Computation.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.claros.common.computation.Computation.prototype.clearLedgerid = function() {
  jspb.Message.setOneofField(this, 9, proto.claros.common.computation.Computation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.computation.Computation.prototype.hasLedgerid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string formId = 10;
 * @return {string}
 */
proto.claros.common.computation.Computation.prototype.getFormid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.claros.common.computation.Computation.prototype.setFormid = function(value) {
  jspb.Message.setOneofField(this, 10, proto.claros.common.computation.Computation.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.claros.common.computation.Computation.prototype.clearFormid = function() {
  jspb.Message.setOneofField(this, 10, proto.claros.common.computation.Computation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.computation.Computation.prototype.hasFormid = function() {
  return jspb.Message.getField(this, 10) != null;
};


