/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.instrument.Calibration');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.claros.instrument.CalibrationStandard');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.instrument.Calibration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.claros.instrument.Calibration.repeatedFields_, null);
};
goog.inherits(proto.claros.instrument.Calibration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.instrument.Calibration.displayName = 'proto.claros.instrument.Calibration';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.claros.instrument.Calibration.repeatedFields_ = [11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.instrument.Calibration.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.instrument.Calibration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.instrument.Calibration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.Calibration.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    time: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offsetunits: jspb.Message.getFieldWithDefault(msg, 5, 0),
    slopeunits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    slope: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    slopeaux: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    offset: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    r2: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    calibrationstandardsList: jspb.Message.toObjectList(msg.getCalibrationstandardsList(),
    proto.claros.instrument.CalibrationStandard.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.instrument.Calibration}
 */
proto.claros.instrument.Calibration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.instrument.Calibration;
  return proto.claros.instrument.Calibration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.instrument.Calibration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.instrument.Calibration}
 */
proto.claros.instrument.Calibration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffsetunits(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlopeunits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSlope(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSlopeaux(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOffset(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR2(value);
      break;
    case 11:
      var value = new proto.claros.instrument.CalibrationStandard;
      reader.readMessage(value,proto.claros.instrument.CalibrationStandard.deserializeBinaryFromReader);
      msg.addCalibrationstandards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.instrument.Calibration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.instrument.Calibration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.instrument.Calibration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.Calibration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOffsetunits();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSlopeunits();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSlope();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getSlopeaux();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getR2();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getCalibrationstandardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.claros.instrument.CalibrationStandard.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ID = 1;
 * @return {string}
 */
proto.claros.instrument.Calibration.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.claros.instrument.Calibration.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.claros.instrument.Calibration.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.claros.instrument.Calibration.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 time = 3;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 status = 4;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 offsetUnits = 5;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getOffsetunits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setOffsetunits = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 slopeUnits = 6;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getSlopeunits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setSlopeunits = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float slope = 7;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getSlope = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setSlope = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float slopeAux = 8;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getSlopeaux = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setSlopeaux = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float offset = 9;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getOffset = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setOffset = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float r2 = 10;
 * @return {number}
 */
proto.claros.instrument.Calibration.prototype.getR2 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.claros.instrument.Calibration.prototype.setR2 = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * repeated CalibrationStandard calibrationStandards = 11;
 * @return {!Array<!proto.claros.instrument.CalibrationStandard>}
 */
proto.claros.instrument.Calibration.prototype.getCalibrationstandardsList = function() {
  return /** @type{!Array<!proto.claros.instrument.CalibrationStandard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.claros.instrument.CalibrationStandard, 11));
};


/** @param {!Array<!proto.claros.instrument.CalibrationStandard>} value */
proto.claros.instrument.Calibration.prototype.setCalibrationstandardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.claros.instrument.CalibrationStandard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.claros.instrument.CalibrationStandard}
 */
proto.claros.instrument.Calibration.prototype.addCalibrationstandards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.claros.instrument.CalibrationStandard, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.claros.instrument.Calibration.prototype.clearCalibrationstandardsList = function() {
  this.setCalibrationstandardsList([]);
};


