/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.common.ClarosDateTime');
goog.provide('proto.claros.common.ClarosDateTime.Date');
goog.provide('proto.claros.common.ClarosDateTime.Time');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.common.ClarosDateTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.claros.common.ClarosDateTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.common.ClarosDateTime.displayName = 'proto.claros.common.ClarosDateTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.common.ClarosDateTime.Time = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.claros.common.ClarosDateTime.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.common.ClarosDateTime.Time.displayName = 'proto.claros.common.ClarosDateTime.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.common.ClarosDateTime.Date = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.claros.common.ClarosDateTime.Date, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.common.ClarosDateTime.Date.displayName = 'proto.claros.common.ClarosDateTime.Date';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.common.ClarosDateTime.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.common.ClarosDateTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.common.ClarosDateTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    datefield: (f = msg.getDatefield()) && proto.claros.common.ClarosDateTime.Date.toObject(includeInstance, f),
    timefield: (f = msg.getTimefield()) && proto.claros.common.ClarosDateTime.Time.toObject(includeInstance, f),
    timezone: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ticks: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.common.ClarosDateTime}
 */
proto.claros.common.ClarosDateTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.common.ClarosDateTime;
  return proto.claros.common.ClarosDateTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.common.ClarosDateTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.common.ClarosDateTime}
 */
proto.claros.common.ClarosDateTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.claros.common.ClarosDateTime.Date;
      reader.readMessage(value,proto.claros.common.ClarosDateTime.Date.deserializeBinaryFromReader);
      msg.setDatefield(value);
      break;
    case 2:
      var value = new proto.claros.common.ClarosDateTime.Time;
      reader.readMessage(value,proto.claros.common.ClarosDateTime.Time.deserializeBinaryFromReader);
      msg.setTimefield(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimezone(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTicks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.common.ClarosDateTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.common.ClarosDateTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.common.ClarosDateTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatefield();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.claros.common.ClarosDateTime.Date.serializeBinaryToWriter
    );
  }
  f = message.getTimefield();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.claros.common.ClarosDateTime.Time.serializeBinaryToWriter
    );
  }
  f = message.getTimezone();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTicks();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.common.ClarosDateTime.Time.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.common.ClarosDateTime.Time.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.common.ClarosDateTime.Time} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.Time.toObject = function(includeInstance, msg) {
  var f, obj = {
    hours: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minutes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    seconds: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.common.ClarosDateTime.Time}
 */
proto.claros.common.ClarosDateTime.Time.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.common.ClarosDateTime.Time;
  return proto.claros.common.ClarosDateTime.Time.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.common.ClarosDateTime.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.common.ClarosDateTime.Time}
 */
proto.claros.common.ClarosDateTime.Time.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHours(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinutes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.common.ClarosDateTime.Time.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.common.ClarosDateTime.Time.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.common.ClarosDateTime.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.Time.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHours();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinutes();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 hours = 1;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Time.prototype.getHours = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Time.prototype.setHours = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 minutes = 2;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Time.prototype.getMinutes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Time.prototype.setMinutes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 seconds = 3;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Time.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Time.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.common.ClarosDateTime.Date.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.common.ClarosDateTime.Date.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.common.ClarosDateTime.Date} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.Date.toObject = function(includeInstance, msg) {
  var f, obj = {
    year: jspb.Message.getFieldWithDefault(msg, 1, 0),
    month: jspb.Message.getFieldWithDefault(msg, 2, 0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.common.ClarosDateTime.Date}
 */
proto.claros.common.ClarosDateTime.Date.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.common.ClarosDateTime.Date;
  return proto.claros.common.ClarosDateTime.Date.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.common.ClarosDateTime.Date} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.common.ClarosDateTime.Date}
 */
proto.claros.common.ClarosDateTime.Date.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMonth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.common.ClarosDateTime.Date.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.common.ClarosDateTime.Date.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.common.ClarosDateTime.Date} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.common.ClarosDateTime.Date.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMonth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 year = 1;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Date.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Date.prototype.setYear = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 month = 2;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Date.prototype.getMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Date.prototype.setMonth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 day = 3;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.Date.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.Date.prototype.setDay = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Date dateField = 1;
 * @return {?proto.claros.common.ClarosDateTime.Date}
 */
proto.claros.common.ClarosDateTime.prototype.getDatefield = function() {
  return /** @type{?proto.claros.common.ClarosDateTime.Date} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.ClarosDateTime.Date, 1));
};


/** @param {?proto.claros.common.ClarosDateTime.Date|undefined} value */
proto.claros.common.ClarosDateTime.prototype.setDatefield = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.ClarosDateTime.prototype.clearDatefield = function() {
  this.setDatefield(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.ClarosDateTime.prototype.hasDatefield = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Time timeField = 2;
 * @return {?proto.claros.common.ClarosDateTime.Time}
 */
proto.claros.common.ClarosDateTime.prototype.getTimefield = function() {
  return /** @type{?proto.claros.common.ClarosDateTime.Time} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.ClarosDateTime.Time, 2));
};


/** @param {?proto.claros.common.ClarosDateTime.Time|undefined} value */
proto.claros.common.ClarosDateTime.prototype.setTimefield = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.common.ClarosDateTime.prototype.clearTimefield = function() {
  this.setTimefield(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.common.ClarosDateTime.prototype.hasTimefield = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 timeZone = 3;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.prototype.getTimezone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.prototype.setTimezone = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 ticks = 4;
 * @return {number}
 */
proto.claros.common.ClarosDateTime.prototype.getTicks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.claros.common.ClarosDateTime.prototype.setTicks = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


