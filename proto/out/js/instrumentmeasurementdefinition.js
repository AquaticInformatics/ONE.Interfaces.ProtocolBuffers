/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.claros.instrument.InstrumentMeasurementDefinition');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.claros.common.core.ClarosDateTime');
goog.require('proto.claros.common.core.Limit');
goog.require('proto.claros.instrument.MilliAmpBinding');
goog.require('proto.claros.instrument.SCSensorBinding');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.claros.instrument.InstrumentMeasurementDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.claros.instrument.InstrumentMeasurementDefinition.repeatedFields_, proto.claros.instrument.InstrumentMeasurementDefinition.oneofGroups_);
};
goog.inherits(proto.claros.instrument.InstrumentMeasurementDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.claros.instrument.InstrumentMeasurementDefinition.displayName = 'proto.claros.instrument.InstrumentMeasurementDefinition';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.claros.instrument.InstrumentMeasurementDefinition.repeatedFields_ = [10];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.claros.instrument.InstrumentMeasurementDefinition.oneofGroups_ = [[8,9]];

/**
 * @enum {number}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.BindingCase = {
  BINDING_NOT_SET: 0,
  SCSENSORBINDING: 8,
  MILLIAMPBINDING: 9
};

/**
 * @return {proto.claros.instrument.InstrumentMeasurementDefinition.BindingCase}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getBindingCase = function() {
  return /** @type {proto.claros.instrument.InstrumentMeasurementDefinition.BindingCase} */(jspb.Message.computeOneofCase(this, proto.claros.instrument.InstrumentMeasurementDefinition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.claros.instrument.InstrumentMeasurementDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.claros.instrument.InstrumentMeasurementDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.InstrumentMeasurementDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    instrumentmeasurementid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fusionid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    locationid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    parameterid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    displayunitid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isvisible: jspb.Message.getFieldWithDefault(msg, 7, false),
    scsensorbinding: (f = msg.getScsensorbinding()) && proto.claros.instrument.SCSensorBinding.toObject(includeInstance, f),
    milliampbinding: (f = msg.getMilliampbinding()) && proto.claros.instrument.MilliAmpBinding.toObject(includeInstance, f),
    limitsList: jspb.Message.toObjectList(msg.getLimitsList(),
    proto.claros.common.core.Limit.toObject, includeInstance),
    createdbyid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    createdon: (f = msg.getCreatedon()) && proto.claros.common.core.ClarosDateTime.toObject(includeInstance, f),
    modifiedbyid: jspb.Message.getFieldWithDefault(msg, 13, ""),
    modifiedon: (f = msg.getModifiedon()) && proto.claros.common.core.ClarosDateTime.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.claros.instrument.InstrumentMeasurementDefinition}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.claros.instrument.InstrumentMeasurementDefinition;
  return proto.claros.instrument.InstrumentMeasurementDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.claros.instrument.InstrumentMeasurementDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.claros.instrument.InstrumentMeasurementDefinition}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstrumentmeasurementid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFusionid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setParameterid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDisplayunitid(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvisible(value);
      break;
    case 8:
      var value = new proto.claros.instrument.SCSensorBinding;
      reader.readMessage(value,proto.claros.instrument.SCSensorBinding.deserializeBinaryFromReader);
      msg.setScsensorbinding(value);
      break;
    case 9:
      var value = new proto.claros.instrument.MilliAmpBinding;
      reader.readMessage(value,proto.claros.instrument.MilliAmpBinding.deserializeBinaryFromReader);
      msg.setMilliampbinding(value);
      break;
    case 10:
      var value = new proto.claros.common.core.Limit;
      reader.readMessage(value,proto.claros.common.core.Limit.deserializeBinaryFromReader);
      msg.addLimits(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedbyid(value);
      break;
    case 12:
      var value = new proto.claros.common.core.ClarosDateTime;
      reader.readMessage(value,proto.claros.common.core.ClarosDateTime.deserializeBinaryFromReader);
      msg.setCreatedon(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setModifiedbyid(value);
      break;
    case 14:
      var value = new proto.claros.common.core.ClarosDateTime;
      reader.readMessage(value,proto.claros.common.core.ClarosDateTime.deserializeBinaryFromReader);
      msg.setModifiedon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.claros.instrument.InstrumentMeasurementDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.claros.instrument.InstrumentMeasurementDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.claros.instrument.InstrumentMeasurementDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInstrumentmeasurementid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFusionid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLocationid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getParameterid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDisplayunitid();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getIsvisible();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getScsensorbinding();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.claros.instrument.SCSensorBinding.serializeBinaryToWriter
    );
  }
  f = message.getMilliampbinding();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.claros.instrument.MilliAmpBinding.serializeBinaryToWriter
    );
  }
  f = message.getLimitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.claros.common.core.Limit.serializeBinaryToWriter
    );
  }
  f = message.getCreatedbyid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCreatedon();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.claros.common.core.ClarosDateTime.serializeBinaryToWriter
    );
  }
  f = message.getModifiedbyid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getModifiedon();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.claros.common.core.ClarosDateTime.serializeBinaryToWriter
    );
  }
};


/**
 * optional string instrumentMeasurementId = 1;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getInstrumentmeasurementid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setInstrumentmeasurementid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string fusionId = 3;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getFusionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setFusionid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string locationId = 4;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getLocationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setLocationid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 parameterId = 5;
 * @return {number}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getParameterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setParameterid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 displayUnitId = 6;
 * @return {number}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getDisplayunitid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setDisplayunitid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool isVisible = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getIsvisible = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setIsvisible = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional SCSensorBinding scSensorBinding = 8;
 * @return {?proto.claros.instrument.SCSensorBinding}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getScsensorbinding = function() {
  return /** @type{?proto.claros.instrument.SCSensorBinding} */ (
    jspb.Message.getWrapperField(this, proto.claros.instrument.SCSensorBinding, 8));
};


/** @param {?proto.claros.instrument.SCSensorBinding|undefined} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setScsensorbinding = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.claros.instrument.InstrumentMeasurementDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.clearScsensorbinding = function() {
  this.setScsensorbinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.hasScsensorbinding = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional MilliAmpBinding milliAmpBinding = 9;
 * @return {?proto.claros.instrument.MilliAmpBinding}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getMilliampbinding = function() {
  return /** @type{?proto.claros.instrument.MilliAmpBinding} */ (
    jspb.Message.getWrapperField(this, proto.claros.instrument.MilliAmpBinding, 9));
};


/** @param {?proto.claros.instrument.MilliAmpBinding|undefined} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setMilliampbinding = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.claros.instrument.InstrumentMeasurementDefinition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.clearMilliampbinding = function() {
  this.setMilliampbinding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.hasMilliampbinding = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated claros.common.core.Limit limits = 10;
 * @return {!Array<!proto.claros.common.core.Limit>}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getLimitsList = function() {
  return /** @type{!Array<!proto.claros.common.core.Limit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.claros.common.core.Limit, 10));
};


/** @param {!Array<!proto.claros.common.core.Limit>} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setLimitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.claros.common.core.Limit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.claros.common.core.Limit}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.addLimits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.claros.common.core.Limit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.clearLimitsList = function() {
  this.setLimitsList([]);
};


/**
 * optional string createdById = 11;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getCreatedbyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setCreatedbyid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional claros.common.core.ClarosDateTime createdOn = 12;
 * @return {?proto.claros.common.core.ClarosDateTime}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getCreatedon = function() {
  return /** @type{?proto.claros.common.core.ClarosDateTime} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.core.ClarosDateTime, 12));
};


/** @param {?proto.claros.common.core.ClarosDateTime|undefined} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setCreatedon = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.clearCreatedon = function() {
  this.setCreatedon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string modifiedById = 13;
 * @return {string}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getModifiedbyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setModifiedbyid = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional claros.common.core.ClarosDateTime modifiedOn = 14;
 * @return {?proto.claros.common.core.ClarosDateTime}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.getModifiedon = function() {
  return /** @type{?proto.claros.common.core.ClarosDateTime} */ (
    jspb.Message.getWrapperField(this, proto.claros.common.core.ClarosDateTime, 14));
};


/** @param {?proto.claros.common.core.ClarosDateTime|undefined} value */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.setModifiedon = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.clearModifiedon = function() {
  this.setModifiedon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.claros.instrument.InstrumentMeasurementDefinition.prototype.hasModifiedon = function() {
  return jspb.Message.getField(this, 14) != null;
};


