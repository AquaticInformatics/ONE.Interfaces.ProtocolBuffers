# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: claros_instrument_limit_data.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='claros_instrument_limit_data.proto',
  package='claros.instrument',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\"claros_instrument_limit_data.proto\x12\x11\x63laros.instrument\"}\n\tLimitData\x12\x32\n\x06limits\x18\x01 \x03(\x0b\x32\".claros.instrument.LimitData.Limit\x1a<\n\x05Limit\x12\x10\n\x08severity\x18\x01 \x01(\r\x12\x10\n\x08polarity\x18\x02 \x01(\r\x12\x0f\n\x07i18nKey\x18\x03 \x01(\tb\x06proto3')
)




_LIMITDATA_LIMIT = _descriptor.Descriptor(
  name='Limit',
  full_name='claros.instrument.LimitData.Limit',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='severity', full_name='claros.instrument.LimitData.Limit.severity', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='polarity', full_name='claros.instrument.LimitData.Limit.polarity', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='i18nKey', full_name='claros.instrument.LimitData.Limit.i18nKey', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=122,
  serialized_end=182,
)

_LIMITDATA = _descriptor.Descriptor(
  name='LimitData',
  full_name='claros.instrument.LimitData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='limits', full_name='claros.instrument.LimitData.limits', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[_LIMITDATA_LIMIT, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=57,
  serialized_end=182,
)

_LIMITDATA_LIMIT.containing_type = _LIMITDATA
_LIMITDATA.fields_by_name['limits'].message_type = _LIMITDATA_LIMIT
DESCRIPTOR.message_types_by_name['LimitData'] = _LIMITDATA
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LimitData = _reflection.GeneratedProtocolMessageType('LimitData', (_message.Message,), dict(

  Limit = _reflection.GeneratedProtocolMessageType('Limit', (_message.Message,), dict(
    DESCRIPTOR = _LIMITDATA_LIMIT,
    __module__ = 'claros_instrument_limit_data_pb2'
    # @@protoc_insertion_point(class_scope:claros.instrument.LimitData.Limit)
    ))
  ,
  DESCRIPTOR = _LIMITDATA,
  __module__ = 'claros_instrument_limit_data_pb2'
  # @@protoc_insertion_point(class_scope:claros.instrument.LimitData)
  ))
_sym_db.RegisterMessage(LimitData)
_sym_db.RegisterMessage(LimitData.Limit)


# @@protoc_insertion_point(module_scope)
