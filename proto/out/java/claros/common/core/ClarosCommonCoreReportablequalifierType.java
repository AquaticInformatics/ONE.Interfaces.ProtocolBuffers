// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_reportablequalifier_type.proto

package claros.common.core;

public final class ClarosCommonCoreReportablequalifierType {
  private ClarosCommonCoreReportablequalifierType() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code claros.common.core.ReportableQualifierType}
   */
  public enum ReportableQualifierType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REPORTABLE_QUALIFIER_UNKNOWN = 0;</code>
     */
    REPORTABLE_QUALIFIER_UNKNOWN(0),
    /**
     * <pre>
     * Non-Detect. Most states now require the &lt; detection limit and this should no longer be used
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_NONDETECT = 1;</code>
     */
    REPORTABLE_QUALIFIER_NONDETECT(1),
    /**
     * <pre>
     * Estimated.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_ESTIMATE = 2;</code>
     */
    REPORTABLE_QUALIFIER_ESTIMATE(2),
    /**
     * <pre>
     * Detected, not quantifiable. Result is above the Method Detection Limit (i.e.2) but below the Report Limit (i.e 4). Used in California.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE = 3;</code>
     */
    REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE(3),
    /**
     * <pre>
     * Result is greater than xxxx. Used instead of TNTC.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_GREATERTHAN = 4;</code>
     */
    REPORTABLE_QUALIFIER_GREATERTHAN(4),
    /**
     * <pre>
     * Result was below the detection limit of YYYY.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_LESSTHAN = 5;</code>
     */
    REPORTABLE_QUALIFIER_LESSTHAN(5),
    /**
     * <pre>
     * Too many colonies were present (TNTC); the numeric value represents the filtration volume.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT = 6;</code>
     */
    REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>REPORTABLE_QUALIFIER_UNKNOWN = 0;</code>
     */
    public static final int REPORTABLE_QUALIFIER_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * Non-Detect. Most states now require the &lt; detection limit and this should no longer be used
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_NONDETECT = 1;</code>
     */
    public static final int REPORTABLE_QUALIFIER_NONDETECT_VALUE = 1;
    /**
     * <pre>
     * Estimated.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_ESTIMATE = 2;</code>
     */
    public static final int REPORTABLE_QUALIFIER_ESTIMATE_VALUE = 2;
    /**
     * <pre>
     * Detected, not quantifiable. Result is above the Method Detection Limit (i.e.2) but below the Report Limit (i.e 4). Used in California.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE = 3;</code>
     */
    public static final int REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE_VALUE = 3;
    /**
     * <pre>
     * Result is greater than xxxx. Used instead of TNTC.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_GREATERTHAN = 4;</code>
     */
    public static final int REPORTABLE_QUALIFIER_GREATERTHAN_VALUE = 4;
    /**
     * <pre>
     * Result was below the detection limit of YYYY.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_LESSTHAN = 5;</code>
     */
    public static final int REPORTABLE_QUALIFIER_LESSTHAN_VALUE = 5;
    /**
     * <pre>
     * Too many colonies were present (TNTC); the numeric value represents the filtration volume.
     * </pre>
     *
     * <code>REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT = 6;</code>
     */
    public static final int REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ReportableQualifierType valueOf(int value) {
      return forNumber(value);
    }

    public static ReportableQualifierType forNumber(int value) {
      switch (value) {
        case 0: return REPORTABLE_QUALIFIER_UNKNOWN;
        case 1: return REPORTABLE_QUALIFIER_NONDETECT;
        case 2: return REPORTABLE_QUALIFIER_ESTIMATE;
        case 3: return REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE;
        case 4: return REPORTABLE_QUALIFIER_GREATERTHAN;
        case 5: return REPORTABLE_QUALIFIER_LESSTHAN;
        case 6: return REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ReportableQualifierType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ReportableQualifierType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ReportableQualifierType>() {
            public ReportableQualifierType findValueByNumber(int number) {
              return ReportableQualifierType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return claros.common.core.ClarosCommonCoreReportablequalifierType.getDescriptor().getEnumTypes().get(0);
    }

    private static final ReportableQualifierType[] VALUES = values();

    public static ReportableQualifierType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ReportableQualifierType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:claros.common.core.ReportableQualifierType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1claros_common_core_reportablequalifier" +
      "_type.proto\022\022claros.common.core*\252\002\n\027Repo" +
      "rtableQualifierType\022 \n\034REPORTABLE_QUALIF" +
      "IER_UNKNOWN\020\000\022\"\n\036REPORTABLE_QUALIFIER_NO" +
      "NDETECT\020\001\022!\n\035REPORTABLE_QUALIFIER_ESTIMA" +
      "TE\020\002\022-\n)REPORTABLE_QUALIFIER_DETECTNONQU" +
      "ALIFIABLE\020\003\022$\n REPORTABLE_QUALIFIER_GREA" +
      "TERTHAN\020\004\022!\n\035REPORTABLE_QUALIFIER_LESSTH" +
      "AN\020\005\022.\n*REPORTABLE_QUALIFIER_TOO_NUMEROU" +
      "S_TO_COUNT\020\006b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
