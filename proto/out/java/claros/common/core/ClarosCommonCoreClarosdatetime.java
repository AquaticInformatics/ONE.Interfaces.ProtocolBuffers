// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_clarosdatetime.proto

package claros.common.core;

public final class ClarosCommonCoreClarosdatetime {
  private ClarosCommonCoreClarosdatetime() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ClarosDateTimeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:claros.common.core.ClarosDateTime)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    boolean hasMobileDateTime();
    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime getMobileDateTime();
    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder getMobileDateTimeOrBuilder();

    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>string jsonDateTime = 2;</code>
     */
    java.lang.String getJsonDateTime();
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>string jsonDateTime = 2;</code>
     */
    com.google.protobuf.ByteString
        getJsonDateTimeBytes();

    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>uint64 ticks = 3;</code>
     */
    long getTicks();

    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.ClarosDateTimeCase getClarosDateTimeCase();
  }
  /**
   * Protobuf type {@code claros.common.core.ClarosDateTime}
   */
  public  static final class ClarosDateTime extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:claros.common.core.ClarosDateTime)
      ClarosDateTimeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ClarosDateTime.newBuilder() to construct.
    private ClarosDateTime(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ClarosDateTime() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ClarosDateTime(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder subBuilder = null;
              if (clarosDateTimeCase_ == 1) {
                subBuilder = ((claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_).toBuilder();
              }
              clarosDateTime_ =
                  input.readMessage(claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_);
                clarosDateTime_ = subBuilder.buildPartial();
              }
              clarosDateTimeCase_ = 1;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              clarosDateTimeCase_ = 2;
              clarosDateTime_ = s;
              break;
            }
            case 24: {
              clarosDateTimeCase_ = 3;
              clarosDateTime_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return claros.common.core.ClarosCommonCoreClarosdatetime.internal_static_claros_common_core_ClarosDateTime_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return claros.common.core.ClarosCommonCoreClarosdatetime.internal_static_claros_common_core_ClarosDateTime_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.class, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder.class);
    }

    private int clarosDateTimeCase_ = 0;
    private java.lang.Object clarosDateTime_;
    public enum ClarosDateTimeCase
        implements com.google.protobuf.Internal.EnumLite {
      MOBILEDATETIME(1),
      JSONDATETIME(2),
      TICKS(3),
      CLAROSDATETIME_NOT_SET(0);
      private final int value;
      private ClarosDateTimeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ClarosDateTimeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ClarosDateTimeCase forNumber(int value) {
        switch (value) {
          case 1: return MOBILEDATETIME;
          case 2: return JSONDATETIME;
          case 3: return TICKS;
          case 0: return CLAROSDATETIME_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ClarosDateTimeCase
    getClarosDateTimeCase() {
      return ClarosDateTimeCase.forNumber(
          clarosDateTimeCase_);
    }

    public static final int MOBILEDATETIME_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    public boolean hasMobileDateTime() {
      return clarosDateTimeCase_ == 1;
    }
    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    public claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime getMobileDateTime() {
      if (clarosDateTimeCase_ == 1) {
         return (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_;
      }
      return claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
    }
    /**
     * <pre>
     * Used for data collected from Mobile Devices
     * </pre>
     *
     * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
     */
    public claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder getMobileDateTimeOrBuilder() {
      if (clarosDateTimeCase_ == 1) {
         return (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_;
      }
      return claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
    }

    public static final int JSONDATETIME_FIELD_NUMBER = 2;
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>string jsonDateTime = 2;</code>
     */
    public java.lang.String getJsonDateTime() {
      java.lang.Object ref = "";
      if (clarosDateTimeCase_ == 2) {
        ref = clarosDateTime_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (clarosDateTimeCase_ == 2) {
          clarosDateTime_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>string jsonDateTime = 2;</code>
     */
    public com.google.protobuf.ByteString
        getJsonDateTimeBytes() {
      java.lang.Object ref = "";
      if (clarosDateTimeCase_ == 2) {
        ref = clarosDateTime_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (clarosDateTimeCase_ == 2) {
          clarosDateTime_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TICKS_FIELD_NUMBER = 3;
    /**
     * <pre>
     * 
     * </pre>
     *
     * <code>uint64 ticks = 3;</code>
     */
    public long getTicks() {
      if (clarosDateTimeCase_ == 3) {
        return (java.lang.Long) clarosDateTime_;
      }
      return 0L;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (clarosDateTimeCase_ == 1) {
        output.writeMessage(1, (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_);
      }
      if (clarosDateTimeCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, clarosDateTime_);
      }
      if (clarosDateTimeCase_ == 3) {
        output.writeUInt64(
            3, (long)((java.lang.Long) clarosDateTime_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (clarosDateTimeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_);
      }
      if (clarosDateTimeCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, clarosDateTime_);
      }
      if (clarosDateTimeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(
              3, (long)((java.lang.Long) clarosDateTime_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime)) {
        return super.equals(obj);
      }
      claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime other = (claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime) obj;

      if (!getClarosDateTimeCase().equals(other.getClarosDateTimeCase())) return false;
      switch (clarosDateTimeCase_) {
        case 1:
          if (!getMobileDateTime()
              .equals(other.getMobileDateTime())) return false;
          break;
        case 2:
          if (!getJsonDateTime()
              .equals(other.getJsonDateTime())) return false;
          break;
        case 3:
          if (getTicks()
              != other.getTicks()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (clarosDateTimeCase_) {
        case 1:
          hash = (37 * hash) + MOBILEDATETIME_FIELD_NUMBER;
          hash = (53 * hash) + getMobileDateTime().hashCode();
          break;
        case 2:
          hash = (37 * hash) + JSONDATETIME_FIELD_NUMBER;
          hash = (53 * hash) + getJsonDateTime().hashCode();
          break;
        case 3:
          hash = (37 * hash) + TICKS_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              getTicks());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code claros.common.core.ClarosDateTime}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:claros.common.core.ClarosDateTime)
        claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.common.core.ClarosCommonCoreClarosdatetime.internal_static_claros_common_core_ClarosDateTime_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.common.core.ClarosCommonCoreClarosdatetime.internal_static_claros_common_core_ClarosDateTime_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.class, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder.class);
      }

      // Construct using claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        clarosDateTimeCase_ = 0;
        clarosDateTime_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return claros.common.core.ClarosCommonCoreClarosdatetime.internal_static_claros_common_core_ClarosDateTime_descriptor;
      }

      @java.lang.Override
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getDefaultInstanceForType() {
        return claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance();
      }

      @java.lang.Override
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime build() {
        claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime buildPartial() {
        claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime result = new claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime(this);
        if (clarosDateTimeCase_ == 1) {
          if (mobileDateTimeBuilder_ == null) {
            result.clarosDateTime_ = clarosDateTime_;
          } else {
            result.clarosDateTime_ = mobileDateTimeBuilder_.build();
          }
        }
        if (clarosDateTimeCase_ == 2) {
          result.clarosDateTime_ = clarosDateTime_;
        }
        if (clarosDateTimeCase_ == 3) {
          result.clarosDateTime_ = clarosDateTime_;
        }
        result.clarosDateTimeCase_ = clarosDateTimeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime) {
          return mergeFrom((claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime other) {
        if (other == claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance()) return this;
        switch (other.getClarosDateTimeCase()) {
          case MOBILEDATETIME: {
            mergeMobileDateTime(other.getMobileDateTime());
            break;
          }
          case JSONDATETIME: {
            clarosDateTimeCase_ = 2;
            clarosDateTime_ = other.clarosDateTime_;
            onChanged();
            break;
          }
          case TICKS: {
            setTicks(other.getTicks());
            break;
          }
          case CLAROSDATETIME_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int clarosDateTimeCase_ = 0;
      private java.lang.Object clarosDateTime_;
      public ClarosDateTimeCase
          getClarosDateTimeCase() {
        return ClarosDateTimeCase.forNumber(
            clarosDateTimeCase_);
      }

      public Builder clearClarosDateTime() {
        clarosDateTimeCase_ = 0;
        clarosDateTime_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder> mobileDateTimeBuilder_;
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public boolean hasMobileDateTime() {
        return clarosDateTimeCase_ == 1;
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime getMobileDateTime() {
        if (mobileDateTimeBuilder_ == null) {
          if (clarosDateTimeCase_ == 1) {
            return (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_;
          }
          return claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
        } else {
          if (clarosDateTimeCase_ == 1) {
            return mobileDateTimeBuilder_.getMessage();
          }
          return claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public Builder setMobileDateTime(claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime value) {
        if (mobileDateTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clarosDateTime_ = value;
          onChanged();
        } else {
          mobileDateTimeBuilder_.setMessage(value);
        }
        clarosDateTimeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public Builder setMobileDateTime(
          claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder builderForValue) {
        if (mobileDateTimeBuilder_ == null) {
          clarosDateTime_ = builderForValue.build();
          onChanged();
        } else {
          mobileDateTimeBuilder_.setMessage(builderForValue.build());
        }
        clarosDateTimeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public Builder mergeMobileDateTime(claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime value) {
        if (mobileDateTimeBuilder_ == null) {
          if (clarosDateTimeCase_ == 1 &&
              clarosDateTime_ != claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance()) {
            clarosDateTime_ = claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.newBuilder((claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_)
                .mergeFrom(value).buildPartial();
          } else {
            clarosDateTime_ = value;
          }
          onChanged();
        } else {
          if (clarosDateTimeCase_ == 1) {
            mobileDateTimeBuilder_.mergeFrom(value);
          }
          mobileDateTimeBuilder_.setMessage(value);
        }
        clarosDateTimeCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public Builder clearMobileDateTime() {
        if (mobileDateTimeBuilder_ == null) {
          if (clarosDateTimeCase_ == 1) {
            clarosDateTimeCase_ = 0;
            clarosDateTime_ = null;
            onChanged();
          }
        } else {
          if (clarosDateTimeCase_ == 1) {
            clarosDateTimeCase_ = 0;
            clarosDateTime_ = null;
          }
          mobileDateTimeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder getMobileDateTimeBuilder() {
        return getMobileDateTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      public claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder getMobileDateTimeOrBuilder() {
        if ((clarosDateTimeCase_ == 1) && (mobileDateTimeBuilder_ != null)) {
          return mobileDateTimeBuilder_.getMessageOrBuilder();
        } else {
          if (clarosDateTimeCase_ == 1) {
            return (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_;
          }
          return claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Used for data collected from Mobile Devices
       * </pre>
       *
       * <code>.claros.common.core.MobileDateTime mobileDateTime = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder> 
          getMobileDateTimeFieldBuilder() {
        if (mobileDateTimeBuilder_ == null) {
          if (!(clarosDateTimeCase_ == 1)) {
            clarosDateTime_ = claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.getDefaultInstance();
          }
          mobileDateTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime.Builder, claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTimeOrBuilder>(
                  (claros.common.core.ClarosCommonCoreMobiledatetime.MobileDateTime) clarosDateTime_,
                  getParentForChildren(),
                  isClean());
          clarosDateTime_ = null;
        }
        clarosDateTimeCase_ = 1;
        onChanged();;
        return mobileDateTimeBuilder_;
      }

      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>string jsonDateTime = 2;</code>
       */
      public java.lang.String getJsonDateTime() {
        java.lang.Object ref = "";
        if (clarosDateTimeCase_ == 2) {
          ref = clarosDateTime_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (clarosDateTimeCase_ == 2) {
            clarosDateTime_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>string jsonDateTime = 2;</code>
       */
      public com.google.protobuf.ByteString
          getJsonDateTimeBytes() {
        java.lang.Object ref = "";
        if (clarosDateTimeCase_ == 2) {
          ref = clarosDateTime_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (clarosDateTimeCase_ == 2) {
            clarosDateTime_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>string jsonDateTime = 2;</code>
       */
      public Builder setJsonDateTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  clarosDateTimeCase_ = 2;
        clarosDateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>string jsonDateTime = 2;</code>
       */
      public Builder clearJsonDateTime() {
        if (clarosDateTimeCase_ == 2) {
          clarosDateTimeCase_ = 0;
          clarosDateTime_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>string jsonDateTime = 2;</code>
       */
      public Builder setJsonDateTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        clarosDateTimeCase_ = 2;
        clarosDateTime_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>uint64 ticks = 3;</code>
       */
      public long getTicks() {
        if (clarosDateTimeCase_ == 3) {
          return (java.lang.Long) clarosDateTime_;
        }
        return 0L;
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>uint64 ticks = 3;</code>
       */
      public Builder setTicks(long value) {
        clarosDateTimeCase_ = 3;
        clarosDateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 
       * </pre>
       *
       * <code>uint64 ticks = 3;</code>
       */
      public Builder clearTicks() {
        if (clarosDateTimeCase_ == 3) {
          clarosDateTimeCase_ = 0;
          clarosDateTime_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:claros.common.core.ClarosDateTime)
    }

    // @@protoc_insertion_point(class_scope:claros.common.core.ClarosDateTime)
    private static final claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime();
    }

    public static claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ClarosDateTime>
        PARSER = new com.google.protobuf.AbstractParser<ClarosDateTime>() {
      @java.lang.Override
      public ClarosDateTime parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ClarosDateTime(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ClarosDateTime> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ClarosDateTime> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_common_core_ClarosDateTime_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_common_core_ClarosDateTime_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\'claros_common_core_clarosdatetime.prot" +
      "o\022\022claros.common.core\032\'claros_common_cor" +
      "e_mobiledatetime.proto\"\211\001\n\016ClarosDateTim" +
      "e\022<\n\016mobileDateTime\030\001 \001(\0132\".claros.commo" +
      "n.core.MobileDateTimeH\000\022\026\n\014jsonDateTime\030" +
      "\002 \001(\tH\000\022\017\n\005ticks\030\003 \001(\004H\000B\020\n\016clarosDateTi" +
      "meb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          claros.common.core.ClarosCommonCoreMobiledatetime.getDescriptor(),
        }, assigner);
    internal_static_claros_common_core_ClarosDateTime_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_claros_common_core_ClarosDateTime_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_common_core_ClarosDateTime_descriptor,
        new java.lang.String[] { "MobileDateTime", "JsonDateTime", "Ticks", "ClarosDateTime", });
    claros.common.core.ClarosCommonCoreMobiledatetime.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
