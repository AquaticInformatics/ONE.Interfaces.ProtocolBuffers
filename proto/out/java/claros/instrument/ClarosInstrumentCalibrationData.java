// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_calibration_data.proto

package claros.instrument;

public final class ClarosInstrumentCalibrationData {
  private ClarosInstrumentCalibrationData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CalibrationDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationData)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code claros.instrument.CalibrationData}
   */
  public  static final class CalibrationData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationData)
      CalibrationDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CalibrationData.newBuilder() to construct.
    private CalibrationData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CalibrationData() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CalibrationData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Builder.class);
    }

    public interface CalibrationOrBuilder extends
        // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationData.Calibration)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      java.lang.String getID();
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      com.google.protobuf.ByteString
          getIDBytes();

      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      java.lang.String getUserID();
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      com.google.protobuf.ByteString
          getUserIDBytes();

      /**
       * <pre>
       * Calibration Time
       * </pre>
       *
       * <code>uint64 time = 3;</code>
       */
      long getTime();

      /**
       * <pre>
       * Status enumeration specific to the device
       * </pre>
       *
       * <code>uint32 status = 4;</code>
       */
      int getStatus();

      /**
       * <pre>
       * Unit for the calibration
       * </pre>
       *
       * <code>uint32 offsetUnits = 5;</code>
       */
      int getOffsetUnits();

      /**
       * <pre>
       * Unit for the slope
       * </pre>
       *
       * <code>uint32 slopeUnits = 6;</code>
       */
      int getSlopeUnits();

      /**
       * <pre>
       * Slope of the Calibration
       * </pre>
       *
       * <code>float slope = 7;</code>
       */
      float getSlope();

      /**
       * <pre>
       * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
       * </pre>
       *
       * <code>float slopeAux = 8;</code>
       */
      float getSlopeAux();

      /**
       * <pre>
       * offset of the calibration curve
       * </pre>
       *
       * <code>float offset = 9;</code>
       */
      float getOffset();

      /**
       * <pre>
       * r-squared of the calibration curve
       * </pre>
       *
       * <code>float r2 = 10;</code>
       */
      float getR2();

      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> 
          getCalibrationStandardList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getCalibrationStandard(int index);
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      int getCalibrationStandardCount();
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder> 
          getCalibrationStandardOrBuilderList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder getCalibrationStandardOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationData.Calibration}
     */
    public  static final class Calibration extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationData.Calibration)
        CalibrationOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Calibration.newBuilder() to construct.
      private Calibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Calibration() {
        iD_ = "";
        userID_ = "";
        calibrationStandard_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Calibration(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                iD_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                userID_ = s;
                break;
              }
              case 24: {

                time_ = input.readUInt64();
                break;
              }
              case 32: {

                status_ = input.readUInt32();
                break;
              }
              case 40: {

                offsetUnits_ = input.readUInt32();
                break;
              }
              case 48: {

                slopeUnits_ = input.readUInt32();
                break;
              }
              case 61: {

                slope_ = input.readFloat();
                break;
              }
              case 69: {

                slopeAux_ = input.readFloat();
                break;
              }
              case 77: {

                offset_ = input.readFloat();
                break;
              }
              case 85: {

                r2_ = input.readFloat();
                break;
              }
              case 90: {
                if (!((mutable_bitField0_ & 0x00000400) != 0)) {
                  calibrationStandard_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard>();
                  mutable_bitField0_ |= 0x00000400;
                }
                calibrationStandard_.add(
                    input.readMessage(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000400) != 0)) {
            calibrationStandard_ = java.util.Collections.unmodifiableList(calibrationStandard_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Calibration_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Calibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object iD_;
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public java.lang.String getID() {
        java.lang.Object ref = iD_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iD_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIDBytes() {
        java.lang.Object ref = iD_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iD_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int USERID_FIELD_NUMBER = 2;
      private volatile java.lang.Object userID_;
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public java.lang.String getUserID() {
        java.lang.Object ref = userID_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userID_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserIDBytes() {
        java.lang.Object ref = userID_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int TIME_FIELD_NUMBER = 3;
      private long time_;
      /**
       * <pre>
       * Calibration Time
       * </pre>
       *
       * <code>uint64 time = 3;</code>
       */
      public long getTime() {
        return time_;
      }

      public static final int STATUS_FIELD_NUMBER = 4;
      private int status_;
      /**
       * <pre>
       * Status enumeration specific to the device
       * </pre>
       *
       * <code>uint32 status = 4;</code>
       */
      public int getStatus() {
        return status_;
      }

      public static final int OFFSETUNITS_FIELD_NUMBER = 5;
      private int offsetUnits_;
      /**
       * <pre>
       * Unit for the calibration
       * </pre>
       *
       * <code>uint32 offsetUnits = 5;</code>
       */
      public int getOffsetUnits() {
        return offsetUnits_;
      }

      public static final int SLOPEUNITS_FIELD_NUMBER = 6;
      private int slopeUnits_;
      /**
       * <pre>
       * Unit for the slope
       * </pre>
       *
       * <code>uint32 slopeUnits = 6;</code>
       */
      public int getSlopeUnits() {
        return slopeUnits_;
      }

      public static final int SLOPE_FIELD_NUMBER = 7;
      private float slope_;
      /**
       * <pre>
       * Slope of the Calibration
       * </pre>
       *
       * <code>float slope = 7;</code>
       */
      public float getSlope() {
        return slope_;
      }

      public static final int SLOPEAUX_FIELD_NUMBER = 8;
      private float slopeAux_;
      /**
       * <pre>
       * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
       * </pre>
       *
       * <code>float slopeAux = 8;</code>
       */
      public float getSlopeAux() {
        return slopeAux_;
      }

      public static final int OFFSET_FIELD_NUMBER = 9;
      private float offset_;
      /**
       * <pre>
       * offset of the calibration curve
       * </pre>
       *
       * <code>float offset = 9;</code>
       */
      public float getOffset() {
        return offset_;
      }

      public static final int R2_FIELD_NUMBER = 10;
      private float r2_;
      /**
       * <pre>
       * r-squared of the calibration curve
       * </pre>
       *
       * <code>float r2 = 10;</code>
       */
      public float getR2() {
        return r2_;
      }

      public static final int CALIBRATIONSTANDARD_FIELD_NUMBER = 11;
      private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> calibrationStandard_;
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> getCalibrationStandardList() {
        return calibrationStandard_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder> 
          getCalibrationStandardOrBuilderList() {
        return calibrationStandard_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      public int getCalibrationStandardCount() {
        return calibrationStandard_.size();
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getCalibrationStandard(int index) {
        return calibrationStandard_.get(index);
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder getCalibrationStandardOrBuilder(
          int index) {
        return calibrationStandard_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getIDBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, iD_);
        }
        if (!getUserIDBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userID_);
        }
        if (time_ != 0L) {
          output.writeUInt64(3, time_);
        }
        if (status_ != 0) {
          output.writeUInt32(4, status_);
        }
        if (offsetUnits_ != 0) {
          output.writeUInt32(5, offsetUnits_);
        }
        if (slopeUnits_ != 0) {
          output.writeUInt32(6, slopeUnits_);
        }
        if (slope_ != 0F) {
          output.writeFloat(7, slope_);
        }
        if (slopeAux_ != 0F) {
          output.writeFloat(8, slopeAux_);
        }
        if (offset_ != 0F) {
          output.writeFloat(9, offset_);
        }
        if (r2_ != 0F) {
          output.writeFloat(10, r2_);
        }
        for (int i = 0; i < calibrationStandard_.size(); i++) {
          output.writeMessage(11, calibrationStandard_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIDBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, iD_);
        }
        if (!getUserIDBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userID_);
        }
        if (time_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt64Size(3, time_);
        }
        if (status_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, status_);
        }
        if (offsetUnits_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(5, offsetUnits_);
        }
        if (slopeUnits_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(6, slopeUnits_);
        }
        if (slope_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, slope_);
        }
        if (slopeAux_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, slopeAux_);
        }
        if (offset_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(9, offset_);
        }
        if (r2_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(10, r2_);
        }
        for (int i = 0; i < calibrationStandard_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, calibrationStandard_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration)) {
          return super.equals(obj);
        }
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration other = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration) obj;

        if (!getID()
            .equals(other.getID())) return false;
        if (!getUserID()
            .equals(other.getUserID())) return false;
        if (getTime()
            != other.getTime()) return false;
        if (getStatus()
            != other.getStatus()) return false;
        if (getOffsetUnits()
            != other.getOffsetUnits()) return false;
        if (getSlopeUnits()
            != other.getSlopeUnits()) return false;
        if (java.lang.Float.floatToIntBits(getSlope())
            != java.lang.Float.floatToIntBits(
                other.getSlope())) return false;
        if (java.lang.Float.floatToIntBits(getSlopeAux())
            != java.lang.Float.floatToIntBits(
                other.getSlopeAux())) return false;
        if (java.lang.Float.floatToIntBits(getOffset())
            != java.lang.Float.floatToIntBits(
                other.getOffset())) return false;
        if (java.lang.Float.floatToIntBits(getR2())
            != java.lang.Float.floatToIntBits(
                other.getR2())) return false;
        if (!getCalibrationStandardList()
            .equals(other.getCalibrationStandardList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getID().hashCode();
        hash = (37 * hash) + USERID_FIELD_NUMBER;
        hash = (53 * hash) + getUserID().hashCode();
        hash = (37 * hash) + TIME_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getTime());
        hash = (37 * hash) + STATUS_FIELD_NUMBER;
        hash = (53 * hash) + getStatus();
        hash = (37 * hash) + OFFSETUNITS_FIELD_NUMBER;
        hash = (53 * hash) + getOffsetUnits();
        hash = (37 * hash) + SLOPEUNITS_FIELD_NUMBER;
        hash = (53 * hash) + getSlopeUnits();
        hash = (37 * hash) + SLOPE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSlope());
        hash = (37 * hash) + SLOPEAUX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSlopeAux());
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getOffset());
        hash = (37 * hash) + R2_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getR2());
        if (getCalibrationStandardCount() > 0) {
          hash = (37 * hash) + CALIBRATIONSTANDARD_FIELD_NUMBER;
          hash = (53 * hash) + getCalibrationStandardList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code claros.instrument.CalibrationData.Calibration}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationData.Calibration)
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Calibration_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Calibration_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.Builder.class);
        }

        // Construct using claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getCalibrationStandardFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          iD_ = "";

          userID_ = "";

          time_ = 0L;

          status_ = 0;

          offsetUnits_ = 0;

          slopeUnits_ = 0;

          slope_ = 0F;

          slopeAux_ = 0F;

          offset_ = 0F;

          r2_ = 0F;

          if (calibrationStandardBuilder_ == null) {
            calibrationStandard_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            calibrationStandardBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Calibration_descriptor;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration getDefaultInstanceForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.getDefaultInstance();
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration build() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration buildPartial() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration result = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.iD_ = iD_;
          result.userID_ = userID_;
          result.time_ = time_;
          result.status_ = status_;
          result.offsetUnits_ = offsetUnits_;
          result.slopeUnits_ = slopeUnits_;
          result.slope_ = slope_;
          result.slopeAux_ = slopeAux_;
          result.offset_ = offset_;
          result.r2_ = r2_;
          if (calibrationStandardBuilder_ == null) {
            if (((bitField0_ & 0x00000400) != 0)) {
              calibrationStandard_ = java.util.Collections.unmodifiableList(calibrationStandard_);
              bitField0_ = (bitField0_ & ~0x00000400);
            }
            result.calibrationStandard_ = calibrationStandard_;
          } else {
            result.calibrationStandard_ = calibrationStandardBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration) {
            return mergeFrom((claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration other) {
          if (other == claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration.getDefaultInstance()) return this;
          if (!other.getID().isEmpty()) {
            iD_ = other.iD_;
            onChanged();
          }
          if (!other.getUserID().isEmpty()) {
            userID_ = other.userID_;
            onChanged();
          }
          if (other.getTime() != 0L) {
            setTime(other.getTime());
          }
          if (other.getStatus() != 0) {
            setStatus(other.getStatus());
          }
          if (other.getOffsetUnits() != 0) {
            setOffsetUnits(other.getOffsetUnits());
          }
          if (other.getSlopeUnits() != 0) {
            setSlopeUnits(other.getSlopeUnits());
          }
          if (other.getSlope() != 0F) {
            setSlope(other.getSlope());
          }
          if (other.getSlopeAux() != 0F) {
            setSlopeAux(other.getSlopeAux());
          }
          if (other.getOffset() != 0F) {
            setOffset(other.getOffset());
          }
          if (other.getR2() != 0F) {
            setR2(other.getR2());
          }
          if (calibrationStandardBuilder_ == null) {
            if (!other.calibrationStandard_.isEmpty()) {
              if (calibrationStandard_.isEmpty()) {
                calibrationStandard_ = other.calibrationStandard_;
                bitField0_ = (bitField0_ & ~0x00000400);
              } else {
                ensureCalibrationStandardIsMutable();
                calibrationStandard_.addAll(other.calibrationStandard_);
              }
              onChanged();
            }
          } else {
            if (!other.calibrationStandard_.isEmpty()) {
              if (calibrationStandardBuilder_.isEmpty()) {
                calibrationStandardBuilder_.dispose();
                calibrationStandardBuilder_ = null;
                calibrationStandard_ = other.calibrationStandard_;
                bitField0_ = (bitField0_ & ~0x00000400);
                calibrationStandardBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getCalibrationStandardFieldBuilder() : null;
              } else {
                calibrationStandardBuilder_.addAllMessages(other.calibrationStandard_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object iD_ = "";
        /**
         * <pre>
         * unique identifier of the calibration.  Could be a hash.
         * </pre>
         *
         * <code>string ID = 1;</code>
         */
        public java.lang.String getID() {
          java.lang.Object ref = iD_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            iD_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * unique identifier of the calibration.  Could be a hash.
         * </pre>
         *
         * <code>string ID = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIDBytes() {
          java.lang.Object ref = iD_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            iD_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * unique identifier of the calibration.  Could be a hash.
         * </pre>
         *
         * <code>string ID = 1;</code>
         */
        public Builder setID(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          iD_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * unique identifier of the calibration.  Could be a hash.
         * </pre>
         *
         * <code>string ID = 1;</code>
         */
        public Builder clearID() {
          
          iD_ = getDefaultInstance().getID();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * unique identifier of the calibration.  Could be a hash.
         * </pre>
         *
         * <code>string ID = 1;</code>
         */
        public Builder setIDBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          iD_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object userID_ = "";
        /**
         * <pre>
         * User who performed the calibration
         * </pre>
         *
         * <code>string userID = 2;</code>
         */
        public java.lang.String getUserID() {
          java.lang.Object ref = userID_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            userID_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * User who performed the calibration
         * </pre>
         *
         * <code>string userID = 2;</code>
         */
        public com.google.protobuf.ByteString
            getUserIDBytes() {
          java.lang.Object ref = userID_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            userID_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * User who performed the calibration
         * </pre>
         *
         * <code>string userID = 2;</code>
         */
        public Builder setUserID(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          userID_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * User who performed the calibration
         * </pre>
         *
         * <code>string userID = 2;</code>
         */
        public Builder clearUserID() {
          
          userID_ = getDefaultInstance().getUserID();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * User who performed the calibration
         * </pre>
         *
         * <code>string userID = 2;</code>
         */
        public Builder setUserIDBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          userID_ = value;
          onChanged();
          return this;
        }

        private long time_ ;
        /**
         * <pre>
         * Calibration Time
         * </pre>
         *
         * <code>uint64 time = 3;</code>
         */
        public long getTime() {
          return time_;
        }
        /**
         * <pre>
         * Calibration Time
         * </pre>
         *
         * <code>uint64 time = 3;</code>
         */
        public Builder setTime(long value) {
          
          time_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Calibration Time
         * </pre>
         *
         * <code>uint64 time = 3;</code>
         */
        public Builder clearTime() {
          
          time_ = 0L;
          onChanged();
          return this;
        }

        private int status_ ;
        /**
         * <pre>
         * Status enumeration specific to the device
         * </pre>
         *
         * <code>uint32 status = 4;</code>
         */
        public int getStatus() {
          return status_;
        }
        /**
         * <pre>
         * Status enumeration specific to the device
         * </pre>
         *
         * <code>uint32 status = 4;</code>
         */
        public Builder setStatus(int value) {
          
          status_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Status enumeration specific to the device
         * </pre>
         *
         * <code>uint32 status = 4;</code>
         */
        public Builder clearStatus() {
          
          status_ = 0;
          onChanged();
          return this;
        }

        private int offsetUnits_ ;
        /**
         * <pre>
         * Unit for the calibration
         * </pre>
         *
         * <code>uint32 offsetUnits = 5;</code>
         */
        public int getOffsetUnits() {
          return offsetUnits_;
        }
        /**
         * <pre>
         * Unit for the calibration
         * </pre>
         *
         * <code>uint32 offsetUnits = 5;</code>
         */
        public Builder setOffsetUnits(int value) {
          
          offsetUnits_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Unit for the calibration
         * </pre>
         *
         * <code>uint32 offsetUnits = 5;</code>
         */
        public Builder clearOffsetUnits() {
          
          offsetUnits_ = 0;
          onChanged();
          return this;
        }

        private int slopeUnits_ ;
        /**
         * <pre>
         * Unit for the slope
         * </pre>
         *
         * <code>uint32 slopeUnits = 6;</code>
         */
        public int getSlopeUnits() {
          return slopeUnits_;
        }
        /**
         * <pre>
         * Unit for the slope
         * </pre>
         *
         * <code>uint32 slopeUnits = 6;</code>
         */
        public Builder setSlopeUnits(int value) {
          
          slopeUnits_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Unit for the slope
         * </pre>
         *
         * <code>uint32 slopeUnits = 6;</code>
         */
        public Builder clearSlopeUnits() {
          
          slopeUnits_ = 0;
          onChanged();
          return this;
        }

        private float slope_ ;
        /**
         * <pre>
         * Slope of the Calibration
         * </pre>
         *
         * <code>float slope = 7;</code>
         */
        public float getSlope() {
          return slope_;
        }
        /**
         * <pre>
         * Slope of the Calibration
         * </pre>
         *
         * <code>float slope = 7;</code>
         */
        public Builder setSlope(float value) {
          
          slope_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Slope of the Calibration
         * </pre>
         *
         * <code>float slope = 7;</code>
         */
        public Builder clearSlope() {
          
          slope_ = 0F;
          onChanged();
          return this;
        }

        private float slopeAux_ ;
        /**
         * <pre>
         * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
         * </pre>
         *
         * <code>float slopeAux = 8;</code>
         */
        public float getSlopeAux() {
          return slopeAux_;
        }
        /**
         * <pre>
         * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
         * </pre>
         *
         * <code>float slopeAux = 8;</code>
         */
        public Builder setSlopeAux(float value) {
          
          slopeAux_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
         * </pre>
         *
         * <code>float slopeAux = 8;</code>
         */
        public Builder clearSlopeAux() {
          
          slopeAux_ = 0F;
          onChanged();
          return this;
        }

        private float offset_ ;
        /**
         * <pre>
         * offset of the calibration curve
         * </pre>
         *
         * <code>float offset = 9;</code>
         */
        public float getOffset() {
          return offset_;
        }
        /**
         * <pre>
         * offset of the calibration curve
         * </pre>
         *
         * <code>float offset = 9;</code>
         */
        public Builder setOffset(float value) {
          
          offset_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * offset of the calibration curve
         * </pre>
         *
         * <code>float offset = 9;</code>
         */
        public Builder clearOffset() {
          
          offset_ = 0F;
          onChanged();
          return this;
        }

        private float r2_ ;
        /**
         * <pre>
         * r-squared of the calibration curve
         * </pre>
         *
         * <code>float r2 = 10;</code>
         */
        public float getR2() {
          return r2_;
        }
        /**
         * <pre>
         * r-squared of the calibration curve
         * </pre>
         *
         * <code>float r2 = 10;</code>
         */
        public Builder setR2(float value) {
          
          r2_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * r-squared of the calibration curve
         * </pre>
         *
         * <code>float r2 = 10;</code>
         */
        public Builder clearR2() {
          
          r2_ = 0F;
          onChanged();
          return this;
        }

        private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> calibrationStandard_ =
          java.util.Collections.emptyList();
        private void ensureCalibrationStandardIsMutable() {
          if (!((bitField0_ & 0x00000400) != 0)) {
            calibrationStandard_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard>(calibrationStandard_);
            bitField0_ |= 0x00000400;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder> calibrationStandardBuilder_;

        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> getCalibrationStandardList() {
          if (calibrationStandardBuilder_ == null) {
            return java.util.Collections.unmodifiableList(calibrationStandard_);
          } else {
            return calibrationStandardBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public int getCalibrationStandardCount() {
          if (calibrationStandardBuilder_ == null) {
            return calibrationStandard_.size();
          } else {
            return calibrationStandardBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getCalibrationStandard(int index) {
          if (calibrationStandardBuilder_ == null) {
            return calibrationStandard_.get(index);
          } else {
            return calibrationStandardBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder setCalibrationStandard(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard value) {
          if (calibrationStandardBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.set(index, value);
            onChanged();
          } else {
            calibrationStandardBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder setCalibrationStandard(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder builderForValue) {
          if (calibrationStandardBuilder_ == null) {
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.set(index, builderForValue.build());
            onChanged();
          } else {
            calibrationStandardBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder addCalibrationStandard(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard value) {
          if (calibrationStandardBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.add(value);
            onChanged();
          } else {
            calibrationStandardBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder addCalibrationStandard(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard value) {
          if (calibrationStandardBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.add(index, value);
            onChanged();
          } else {
            calibrationStandardBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder addCalibrationStandard(
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder builderForValue) {
          if (calibrationStandardBuilder_ == null) {
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.add(builderForValue.build());
            onChanged();
          } else {
            calibrationStandardBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder addCalibrationStandard(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder builderForValue) {
          if (calibrationStandardBuilder_ == null) {
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.add(index, builderForValue.build());
            onChanged();
          } else {
            calibrationStandardBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder addAllCalibrationStandard(
            java.lang.Iterable<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard> values) {
          if (calibrationStandardBuilder_ == null) {
            ensureCalibrationStandardIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, calibrationStandard_);
            onChanged();
          } else {
            calibrationStandardBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder clearCalibrationStandard() {
          if (calibrationStandardBuilder_ == null) {
            calibrationStandard_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000400);
            onChanged();
          } else {
            calibrationStandardBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public Builder removeCalibrationStandard(int index) {
          if (calibrationStandardBuilder_ == null) {
            ensureCalibrationStandardIsMutable();
            calibrationStandard_.remove(index);
            onChanged();
          } else {
            calibrationStandardBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder getCalibrationStandardBuilder(
            int index) {
          return getCalibrationStandardFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder getCalibrationStandardOrBuilder(
            int index) {
          if (calibrationStandardBuilder_ == null) {
            return calibrationStandard_.get(index);  } else {
            return calibrationStandardBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder> 
             getCalibrationStandardOrBuilderList() {
          if (calibrationStandardBuilder_ != null) {
            return calibrationStandardBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(calibrationStandard_);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder addCalibrationStandardBuilder() {
          return getCalibrationStandardFieldBuilder().addBuilder(
              claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder addCalibrationStandardBuilder(
            int index) {
          return getCalibrationStandardFieldBuilder().addBuilder(
              index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.CalibrationStandard calibrationStandard = 11;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder> 
             getCalibrationStandardBuilderList() {
          return getCalibrationStandardFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder> 
            getCalibrationStandardFieldBuilder() {
          if (calibrationStandardBuilder_ == null) {
            calibrationStandardBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder>(
                    calibrationStandard_,
                    ((bitField0_ & 0x00000400) != 0),
                    getParentForChildren(),
                    isClean());
            calibrationStandard_ = null;
          }
          return calibrationStandardBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationData.Calibration)
      }

      // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationData.Calibration)
      private static final claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration();
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Calibration>
          PARSER = new com.google.protobuf.AbstractParser<Calibration>() {
        @java.lang.Override
        public Calibration parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Calibration(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Calibration> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Calibration> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Calibration getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CalibrationStandardOrBuilder extends
        // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationData.CalibrationStandard)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      boolean hasKnownValue();
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getKnownValue();
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getKnownValueOrBuilder();

      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      boolean hasMeasuredValue();
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getMeasuredValue();
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getMeasuredValueOrBuilder();

      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> 
          getSecondaryValueList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getSecondaryValue(int index);
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      int getSecondaryValueCount();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
          getSecondaryValueOrBuilderList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getSecondaryValueOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationData.CalibrationStandard}
     */
    public  static final class CalibrationStandard extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationData.CalibrationStandard)
        CalibrationStandardOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use CalibrationStandard.newBuilder() to construct.
      private CalibrationStandard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private CalibrationStandard() {
        secondaryValue_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private CalibrationStandard(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder subBuilder = null;
                if (knownValue_ != null) {
                  subBuilder = knownValue_.toBuilder();
                }
                knownValue_ = input.readMessage(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(knownValue_);
                  knownValue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder subBuilder = null;
                if (measuredValue_ != null) {
                  subBuilder = measuredValue_.toBuilder();
                }
                measuredValue_ = input.readMessage(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(measuredValue_);
                  measuredValue_ = subBuilder.buildPartial();
                }

                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                  secondaryValue_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value>();
                  mutable_bitField0_ |= 0x00000004;
                }
                secondaryValue_.add(
                    input.readMessage(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) != 0)) {
            secondaryValue_ = java.util.Collections.unmodifiableList(secondaryValue_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_CalibrationStandard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder.class);
      }

      private int bitField0_;
      public static final int KNOWNVALUE_FIELD_NUMBER = 1;
      private claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value knownValue_;
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      public boolean hasKnownValue() {
        return knownValue_ != null;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getKnownValue() {
        return knownValue_ == null ? claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : knownValue_;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getKnownValueOrBuilder() {
        return getKnownValue();
      }

      public static final int MEASUREDVALUE_FIELD_NUMBER = 2;
      private claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value measuredValue_;
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      public boolean hasMeasuredValue() {
        return measuredValue_ != null;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getMeasuredValue() {
        return measuredValue_ == null ? claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : measuredValue_;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getMeasuredValueOrBuilder() {
        return getMeasuredValue();
      }

      public static final int SECONDARYVALUE_FIELD_NUMBER = 4;
      private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> secondaryValue_;
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> getSecondaryValueList() {
        return secondaryValue_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
          getSecondaryValueOrBuilderList() {
        return secondaryValue_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      public int getSecondaryValueCount() {
        return secondaryValue_.size();
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getSecondaryValue(int index) {
        return secondaryValue_.get(index);
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getSecondaryValueOrBuilder(
          int index) {
        return secondaryValue_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (knownValue_ != null) {
          output.writeMessage(1, getKnownValue());
        }
        if (measuredValue_ != null) {
          output.writeMessage(2, getMeasuredValue());
        }
        for (int i = 0; i < secondaryValue_.size(); i++) {
          output.writeMessage(4, secondaryValue_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (knownValue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getKnownValue());
        }
        if (measuredValue_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, getMeasuredValue());
        }
        for (int i = 0; i < secondaryValue_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, secondaryValue_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard)) {
          return super.equals(obj);
        }
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard other = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard) obj;

        if (hasKnownValue() != other.hasKnownValue()) return false;
        if (hasKnownValue()) {
          if (!getKnownValue()
              .equals(other.getKnownValue())) return false;
        }
        if (hasMeasuredValue() != other.hasMeasuredValue()) return false;
        if (hasMeasuredValue()) {
          if (!getMeasuredValue()
              .equals(other.getMeasuredValue())) return false;
        }
        if (!getSecondaryValueList()
            .equals(other.getSecondaryValueList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (hasKnownValue()) {
          hash = (37 * hash) + KNOWNVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getKnownValue().hashCode();
        }
        if (hasMeasuredValue()) {
          hash = (37 * hash) + MEASUREDVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getMeasuredValue().hashCode();
        }
        if (getSecondaryValueCount() > 0) {
          hash = (37 * hash) + SECONDARYVALUE_FIELD_NUMBER;
          hash = (53 * hash) + getSecondaryValueList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code claros.instrument.CalibrationData.CalibrationStandard}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationData.CalibrationStandard)
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandardOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_CalibrationStandard_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.Builder.class);
        }

        // Construct using claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getSecondaryValueFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (knownValueBuilder_ == null) {
            knownValue_ = null;
          } else {
            knownValue_ = null;
            knownValueBuilder_ = null;
          }
          if (measuredValueBuilder_ == null) {
            measuredValue_ = null;
          } else {
            measuredValue_ = null;
            measuredValueBuilder_ = null;
          }
          if (secondaryValueBuilder_ == null) {
            secondaryValue_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            secondaryValueBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getDefaultInstanceForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.getDefaultInstance();
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard build() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard buildPartial() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard result = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (knownValueBuilder_ == null) {
            result.knownValue_ = knownValue_;
          } else {
            result.knownValue_ = knownValueBuilder_.build();
          }
          if (measuredValueBuilder_ == null) {
            result.measuredValue_ = measuredValue_;
          } else {
            result.measuredValue_ = measuredValueBuilder_.build();
          }
          if (secondaryValueBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0)) {
              secondaryValue_ = java.util.Collections.unmodifiableList(secondaryValue_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.secondaryValue_ = secondaryValue_;
          } else {
            result.secondaryValue_ = secondaryValueBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard) {
            return mergeFrom((claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard other) {
          if (other == claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard.getDefaultInstance()) return this;
          if (other.hasKnownValue()) {
            mergeKnownValue(other.getKnownValue());
          }
          if (other.hasMeasuredValue()) {
            mergeMeasuredValue(other.getMeasuredValue());
          }
          if (secondaryValueBuilder_ == null) {
            if (!other.secondaryValue_.isEmpty()) {
              if (secondaryValue_.isEmpty()) {
                secondaryValue_ = other.secondaryValue_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureSecondaryValueIsMutable();
                secondaryValue_.addAll(other.secondaryValue_);
              }
              onChanged();
            }
          } else {
            if (!other.secondaryValue_.isEmpty()) {
              if (secondaryValueBuilder_.isEmpty()) {
                secondaryValueBuilder_.dispose();
                secondaryValueBuilder_ = null;
                secondaryValue_ = other.secondaryValue_;
                bitField0_ = (bitField0_ & ~0x00000004);
                secondaryValueBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getSecondaryValueFieldBuilder() : null;
              } else {
                secondaryValueBuilder_.addAllMessages(other.secondaryValue_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value knownValue_;
        private com.google.protobuf.SingleFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> knownValueBuilder_;
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public boolean hasKnownValue() {
          return knownValueBuilder_ != null || knownValue_ != null;
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getKnownValue() {
          if (knownValueBuilder_ == null) {
            return knownValue_ == null ? claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : knownValue_;
          } else {
            return knownValueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public Builder setKnownValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (knownValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            knownValue_ = value;
            onChanged();
          } else {
            knownValueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public Builder setKnownValue(
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (knownValueBuilder_ == null) {
            knownValue_ = builderForValue.build();
            onChanged();
          } else {
            knownValueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public Builder mergeKnownValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (knownValueBuilder_ == null) {
            if (knownValue_ != null) {
              knownValue_ =
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.newBuilder(knownValue_).mergeFrom(value).buildPartial();
            } else {
              knownValue_ = value;
            }
            onChanged();
          } else {
            knownValueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public Builder clearKnownValue() {
          if (knownValueBuilder_ == null) {
            knownValue_ = null;
            onChanged();
          } else {
            knownValue_ = null;
            knownValueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder getKnownValueBuilder() {
          
          onChanged();
          return getKnownValueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getKnownValueOrBuilder() {
          if (knownValueBuilder_ != null) {
            return knownValueBuilder_.getMessageOrBuilder();
          } else {
            return knownValue_ == null ?
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : knownValue_;
          }
        }
        /**
         * <pre>
         *this is the primary value  (Concentration)
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value knownValue = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
            getKnownValueFieldBuilder() {
          if (knownValueBuilder_ == null) {
            knownValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder>(
                    getKnownValue(),
                    getParentForChildren(),
                    isClean());
            knownValue_ = null;
          }
          return knownValueBuilder_;
        }

        private claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value measuredValue_;
        private com.google.protobuf.SingleFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> measuredValueBuilder_;
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public boolean hasMeasuredValue() {
          return measuredValueBuilder_ != null || measuredValue_ != null;
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getMeasuredValue() {
          if (measuredValueBuilder_ == null) {
            return measuredValue_ == null ? claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : measuredValue_;
          } else {
            return measuredValueBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public Builder setMeasuredValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (measuredValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            measuredValue_ = value;
            onChanged();
          } else {
            measuredValueBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public Builder setMeasuredValue(
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (measuredValueBuilder_ == null) {
            measuredValue_ = builderForValue.build();
            onChanged();
          } else {
            measuredValueBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public Builder mergeMeasuredValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (measuredValueBuilder_ == null) {
            if (measuredValue_ != null) {
              measuredValue_ =
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.newBuilder(measuredValue_).mergeFrom(value).buildPartial();
            } else {
              measuredValue_ = value;
            }
            onChanged();
          } else {
            measuredValueBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public Builder clearMeasuredValue() {
          if (measuredValueBuilder_ == null) {
            measuredValue_ = null;
            onChanged();
          } else {
            measuredValue_ = null;
            measuredValueBuilder_ = null;
          }

          return this;
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder getMeasuredValueBuilder() {
          
          onChanged();
          return getMeasuredValueFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getMeasuredValueOrBuilder() {
          if (measuredValueBuilder_ != null) {
            return measuredValueBuilder_.getMessageOrBuilder();
          } else {
            return measuredValue_ == null ?
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance() : measuredValue_;
          }
        }
        /**
         * <pre>
         * </pre>
         *
         * <code>.claros.instrument.CalibrationData.Value measuredValue = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
            getMeasuredValueFieldBuilder() {
          if (measuredValueBuilder_ == null) {
            measuredValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder>(
                    getMeasuredValue(),
                    getParentForChildren(),
                    isClean());
            measuredValue_ = null;
          }
          return measuredValueBuilder_;
        }

        private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> secondaryValue_ =
          java.util.Collections.emptyList();
        private void ensureSecondaryValueIsMutable() {
          if (!((bitField0_ & 0x00000004) != 0)) {
            secondaryValue_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value>(secondaryValue_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> secondaryValueBuilder_;

        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> getSecondaryValueList() {
          if (secondaryValueBuilder_ == null) {
            return java.util.Collections.unmodifiableList(secondaryValue_);
          } else {
            return secondaryValueBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public int getSecondaryValueCount() {
          if (secondaryValueBuilder_ == null) {
            return secondaryValue_.size();
          } else {
            return secondaryValueBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getSecondaryValue(int index) {
          if (secondaryValueBuilder_ == null) {
            return secondaryValue_.get(index);
          } else {
            return secondaryValueBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder setSecondaryValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (secondaryValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSecondaryValueIsMutable();
            secondaryValue_.set(index, value);
            onChanged();
          } else {
            secondaryValueBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder setSecondaryValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (secondaryValueBuilder_ == null) {
            ensureSecondaryValueIsMutable();
            secondaryValue_.set(index, builderForValue.build());
            onChanged();
          } else {
            secondaryValueBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder addSecondaryValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (secondaryValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSecondaryValueIsMutable();
            secondaryValue_.add(value);
            onChanged();
          } else {
            secondaryValueBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder addSecondaryValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (secondaryValueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureSecondaryValueIsMutable();
            secondaryValue_.add(index, value);
            onChanged();
          } else {
            secondaryValueBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder addSecondaryValue(
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (secondaryValueBuilder_ == null) {
            ensureSecondaryValueIsMutable();
            secondaryValue_.add(builderForValue.build());
            onChanged();
          } else {
            secondaryValueBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder addSecondaryValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (secondaryValueBuilder_ == null) {
            ensureSecondaryValueIsMutable();
            secondaryValue_.add(index, builderForValue.build());
            onChanged();
          } else {
            secondaryValueBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder addAllSecondaryValue(
            java.lang.Iterable<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> values) {
          if (secondaryValueBuilder_ == null) {
            ensureSecondaryValueIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, secondaryValue_);
            onChanged();
          } else {
            secondaryValueBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder clearSecondaryValue() {
          if (secondaryValueBuilder_ == null) {
            secondaryValue_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            secondaryValueBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public Builder removeSecondaryValue(int index) {
          if (secondaryValueBuilder_ == null) {
            ensureSecondaryValueIsMutable();
            secondaryValue_.remove(index);
            onChanged();
          } else {
            secondaryValueBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder getSecondaryValueBuilder(
            int index) {
          return getSecondaryValueFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getSecondaryValueOrBuilder(
            int index) {
          if (secondaryValueBuilder_ == null) {
            return secondaryValue_.get(index);  } else {
            return secondaryValueBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
             getSecondaryValueOrBuilderList() {
          if (secondaryValueBuilder_ != null) {
            return secondaryValueBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(secondaryValue_);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder addSecondaryValueBuilder() {
          return getSecondaryValueFieldBuilder().addBuilder(
              claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder addSecondaryValueBuilder(
            int index) {
          return getSecondaryValueFieldBuilder().addBuilder(
              index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value secondaryValue = 4;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder> 
             getSecondaryValueBuilderList() {
          return getSecondaryValueFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
            getSecondaryValueFieldBuilder() {
          if (secondaryValueBuilder_ == null) {
            secondaryValueBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder>(
                    secondaryValue_,
                    ((bitField0_ & 0x00000004) != 0),
                    getParentForChildren(),
                    isClean());
            secondaryValue_ = null;
          }
          return secondaryValueBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationData.CalibrationStandard)
      }

      // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationData.CalibrationStandard)
      private static final claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard();
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<CalibrationStandard>
          PARSER = new com.google.protobuf.AbstractParser<CalibrationStandard>() {
        @java.lang.Override
        public CalibrationStandard parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new CalibrationStandard(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<CalibrationStandard> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<CalibrationStandard> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.CalibrationStandard getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SecondaryValueOrBuilder extends
        // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationData.SecondaryValue)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> 
          getValueList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getValue(int index);
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      int getValueCount();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
          getValueOrBuilderList();
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getValueOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationData.SecondaryValue}
     */
    public  static final class SecondaryValue extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationData.SecondaryValue)
        SecondaryValueOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use SecondaryValue.newBuilder() to construct.
      private SecondaryValue(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private SecondaryValue() {
        value_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private SecondaryValue(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  value_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value>();
                  mutable_bitField0_ |= 0x00000001;
                }
                value_.add(
                    input.readMessage(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.parser(), extensionRegistry));
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            value_ = java.util.Collections.unmodifiableList(value_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_SecondaryValue_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.Builder.class);
      }

      public static final int VALUE_FIELD_NUMBER = 1;
      private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> value_;
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> getValueList() {
        return value_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
          getValueOrBuilderList() {
        return value_;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getValue(int index) {
        return value_.get(index);
      }
      /**
       * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getValueOrBuilder(
          int index) {
        return value_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < value_.size(); i++) {
          output.writeMessage(1, value_.get(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < value_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, value_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue)) {
          return super.equals(obj);
        }
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue other = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue) obj;

        if (!getValueList()
            .equals(other.getValueList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getValueCount() > 0) {
          hash = (37 * hash) + VALUE_FIELD_NUMBER;
          hash = (53 * hash) + getValueList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code claros.instrument.CalibrationData.SecondaryValue}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationData.SecondaryValue)
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValueOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_SecondaryValue_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.Builder.class);
        }

        // Construct using claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getValueFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          if (valueBuilder_ == null) {
            value_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            valueBuilder_.clear();
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue getDefaultInstanceForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.getDefaultInstance();
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue build() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue buildPartial() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue result = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue(this);
          int from_bitField0_ = bitField0_;
          if (valueBuilder_ == null) {
            if (((bitField0_ & 0x00000001) != 0)) {
              value_ = java.util.Collections.unmodifiableList(value_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.value_ = value_;
          } else {
            result.value_ = valueBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue) {
            return mergeFrom((claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue other) {
          if (other == claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue.getDefaultInstance()) return this;
          if (valueBuilder_ == null) {
            if (!other.value_.isEmpty()) {
              if (value_.isEmpty()) {
                value_ = other.value_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureValueIsMutable();
                value_.addAll(other.value_);
              }
              onChanged();
            }
          } else {
            if (!other.value_.isEmpty()) {
              if (valueBuilder_.isEmpty()) {
                valueBuilder_.dispose();
                valueBuilder_ = null;
                value_ = other.value_;
                bitField0_ = (bitField0_ & ~0x00000001);
                valueBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getValueFieldBuilder() : null;
              } else {
                valueBuilder_.addAllMessages(other.value_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> value_ =
          java.util.Collections.emptyList();
        private void ensureValueIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            value_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value>(value_);
            bitField0_ |= 0x00000001;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> valueBuilder_;

        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> getValueList() {
          if (valueBuilder_ == null) {
            return java.util.Collections.unmodifiableList(value_);
          } else {
            return valueBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public int getValueCount() {
          if (valueBuilder_ == null) {
            return value_.size();
          } else {
            return valueBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getValue(int index) {
          if (valueBuilder_ == null) {
            return value_.get(index);
          } else {
            return valueBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder setValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValueIsMutable();
            value_.set(index, value);
            onChanged();
          } else {
            valueBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder setValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (valueBuilder_ == null) {
            ensureValueIsMutable();
            value_.set(index, builderForValue.build());
            onChanged();
          } else {
            valueBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder addValue(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValueIsMutable();
            value_.add(value);
            onChanged();
          } else {
            valueBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder addValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value value) {
          if (valueBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureValueIsMutable();
            value_.add(index, value);
            onChanged();
          } else {
            valueBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder addValue(
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (valueBuilder_ == null) {
            ensureValueIsMutable();
            value_.add(builderForValue.build());
            onChanged();
          } else {
            valueBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder addValue(
            int index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder builderForValue) {
          if (valueBuilder_ == null) {
            ensureValueIsMutable();
            value_.add(index, builderForValue.build());
            onChanged();
          } else {
            valueBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder addAllValue(
            java.lang.Iterable<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value> values) {
          if (valueBuilder_ == null) {
            ensureValueIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, value_);
            onChanged();
          } else {
            valueBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder clearValue() {
          if (valueBuilder_ == null) {
            value_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
          } else {
            valueBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public Builder removeValue(int index) {
          if (valueBuilder_ == null) {
            ensureValueIsMutable();
            value_.remove(index);
            onChanged();
          } else {
            valueBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder getValueBuilder(
            int index) {
          return getValueFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder getValueOrBuilder(
            int index) {
          if (valueBuilder_ == null) {
            return value_.get(index);  } else {
            return valueBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
             getValueOrBuilderList() {
          if (valueBuilder_ != null) {
            return valueBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(value_);
          }
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder addValueBuilder() {
          return getValueFieldBuilder().addBuilder(
              claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder addValueBuilder(
            int index) {
          return getValueFieldBuilder().addBuilder(
              index, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance());
        }
        /**
         * <code>repeated .claros.instrument.CalibrationData.Value value = 1;</code>
         */
        public java.util.List<claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder> 
             getValueBuilderList() {
          return getValueFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder> 
            getValueFieldBuilder() {
          if (valueBuilder_ == null) {
            valueBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder>(
                    value_,
                    ((bitField0_ & 0x00000001) != 0),
                    getParentForChildren(),
                    isClean());
            value_ = null;
          }
          return valueBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationData.SecondaryValue)
      }

      // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationData.SecondaryValue)
      private static final claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue();
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<SecondaryValue>
          PARSER = new com.google.protobuf.AbstractParser<SecondaryValue>() {
        @java.lang.Override
        public SecondaryValue parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SecondaryValue(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<SecondaryValue> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<SecondaryValue> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.SecondaryValue getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface ValueOrBuilder extends
        // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationData.Value)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>float value = 1;</code>
       */
      float getValue();

      /**
       * <code>uint32 unit = 2;</code>
       */
      int getUnit();

      /**
       * <code>uint32 chemicalForm = 3;</code>
       */
      int getChemicalForm();
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationData.Value}
     */
    public  static final class Value extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationData.Value)
        ValueOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Value.newBuilder() to construct.
      private Value(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Value() {
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Value(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {

                value_ = input.readFloat();
                break;
              }
              case 16: {

                unit_ = input.readUInt32();
                break;
              }
              case 24: {

                chemicalForm_ = input.readUInt32();
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Value_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Value_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder.class);
      }

      public static final int VALUE_FIELD_NUMBER = 1;
      private float value_;
      /**
       * <code>float value = 1;</code>
       */
      public float getValue() {
        return value_;
      }

      public static final int UNIT_FIELD_NUMBER = 2;
      private int unit_;
      /**
       * <code>uint32 unit = 2;</code>
       */
      public int getUnit() {
        return unit_;
      }

      public static final int CHEMICALFORM_FIELD_NUMBER = 3;
      private int chemicalForm_;
      /**
       * <code>uint32 chemicalForm = 3;</code>
       */
      public int getChemicalForm() {
        return chemicalForm_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (value_ != 0F) {
          output.writeFloat(1, value_);
        }
        if (unit_ != 0) {
          output.writeUInt32(2, unit_);
        }
        if (chemicalForm_ != 0) {
          output.writeUInt32(3, chemicalForm_);
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (value_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(1, value_);
        }
        if (unit_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, unit_);
        }
        if (chemicalForm_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(3, chemicalForm_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value)) {
          return super.equals(obj);
        }
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value other = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value) obj;

        if (java.lang.Float.floatToIntBits(getValue())
            != java.lang.Float.floatToIntBits(
                other.getValue())) return false;
        if (getUnit()
            != other.getUnit()) return false;
        if (getChemicalForm()
            != other.getChemicalForm()) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + VALUE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getValue());
        hash = (37 * hash) + UNIT_FIELD_NUMBER;
        hash = (53 * hash) + getUnit();
        hash = (37 * hash) + CHEMICALFORM_FIELD_NUMBER;
        hash = (53 * hash) + getChemicalForm();
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code claros.instrument.CalibrationData.Value}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationData.Value)
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.ValueOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Value_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Value_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.Builder.class);
        }

        // Construct using claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          value_ = 0F;

          unit_ = 0;

          chemicalForm_ = 0;

          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_Value_descriptor;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getDefaultInstanceForType() {
          return claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance();
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value build() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value buildPartial() {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value result = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value(this);
          result.value_ = value_;
          result.unit_ = unit_;
          result.chemicalForm_ = chemicalForm_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value) {
            return mergeFrom((claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value other) {
          if (other == claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value.getDefaultInstance()) return this;
          if (other.getValue() != 0F) {
            setValue(other.getValue());
          }
          if (other.getUnit() != 0) {
            setUnit(other.getUnit());
          }
          if (other.getChemicalForm() != 0) {
            setChemicalForm(other.getChemicalForm());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private float value_ ;
        /**
         * <code>float value = 1;</code>
         */
        public float getValue() {
          return value_;
        }
        /**
         * <code>float value = 1;</code>
         */
        public Builder setValue(float value) {
          
          value_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float value = 1;</code>
         */
        public Builder clearValue() {
          
          value_ = 0F;
          onChanged();
          return this;
        }

        private int unit_ ;
        /**
         * <code>uint32 unit = 2;</code>
         */
        public int getUnit() {
          return unit_;
        }
        /**
         * <code>uint32 unit = 2;</code>
         */
        public Builder setUnit(int value) {
          
          unit_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint32 unit = 2;</code>
         */
        public Builder clearUnit() {
          
          unit_ = 0;
          onChanged();
          return this;
        }

        private int chemicalForm_ ;
        /**
         * <code>uint32 chemicalForm = 3;</code>
         */
        public int getChemicalForm() {
          return chemicalForm_;
        }
        /**
         * <code>uint32 chemicalForm = 3;</code>
         */
        public Builder setChemicalForm(int value) {
          
          chemicalForm_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>uint32 chemicalForm = 3;</code>
         */
        public Builder clearChemicalForm() {
          
          chemicalForm_ = 0;
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationData.Value)
      }

      // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationData.Value)
      private static final claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value();
      }

      public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Value>
          PARSER = new com.google.protobuf.AbstractParser<Value>() {
        @java.lang.Override
        public Value parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Value(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Value> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Value> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Value getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData)) {
        return super.equals(obj);
      }
      claros.instrument.ClarosInstrumentCalibrationData.CalibrationData other = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationData)
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.class, claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.Builder.class);
      }

      // Construct using claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return claros.instrument.ClarosInstrumentCalibrationData.internal_static_claros_instrument_CalibrationData_descriptor;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData getDefaultInstanceForType() {
        return claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.getDefaultInstance();
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData build() {
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData buildPartial() {
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData result = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof claros.instrument.ClarosInstrumentCalibrationData.CalibrationData) {
          return mergeFrom((claros.instrument.ClarosInstrumentCalibrationData.CalibrationData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationData.CalibrationData other) {
        if (other == claros.instrument.ClarosInstrumentCalibrationData.CalibrationData.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        claros.instrument.ClarosInstrumentCalibrationData.CalibrationData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (claros.instrument.ClarosInstrumentCalibrationData.CalibrationData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationData)
    }

    // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationData)
    private static final claros.instrument.ClarosInstrumentCalibrationData.CalibrationData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationData.CalibrationData();
    }

    public static claros.instrument.ClarosInstrumentCalibrationData.CalibrationData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CalibrationData>
        PARSER = new com.google.protobuf.AbstractParser<CalibrationData>() {
      @java.lang.Override
      public CalibrationData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CalibrationData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CalibrationData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CalibrationData> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public claros.instrument.ClarosInstrumentCalibrationData.CalibrationData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationData_Calibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationData_Calibration_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationData_CalibrationStandard_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationData_SecondaryValue_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationData_Value_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationData_Value_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n(claros_instrument_calibration_data.pro" +
      "to\022\021claros.instrument\"\366\004\n\017CalibrationDat" +
      "a\032\202\002\n\013Calibration\022\n\n\002ID\030\001 \001(\t\022\016\n\006userID\030" +
      "\002 \001(\t\022\014\n\004time\030\003 \001(\004\022\016\n\006status\030\004 \001(\r\022\023\n\013o" +
      "ffsetUnits\030\005 \001(\r\022\022\n\nslopeUnits\030\006 \001(\r\022\r\n\005" +
      "slope\030\007 \001(\002\022\020\n\010slopeAux\030\010 \001(\002\022\016\n\006offset\030" +
      "\t \001(\002\022\n\n\002r2\030\n \001(\002\022S\n\023calibrationStandard" +
      "\030\013 \003(\01326.claros.instrument.CalibrationDa" +
      "ta.CalibrationStandard\032\326\001\n\023CalibrationSt" +
      "andard\022<\n\nknownValue\030\001 \001(\0132(.claros.inst" +
      "rument.CalibrationData.Value\022?\n\rmeasured" +
      "Value\030\002 \001(\0132(.claros.instrument.Calibrat" +
      "ionData.Value\022@\n\016secondaryValue\030\004 \003(\0132(." +
      "claros.instrument.CalibrationData.Value\032" +
      "I\n\016SecondaryValue\0227\n\005value\030\001 \003(\0132(.claro" +
      "s.instrument.CalibrationData.Value\032:\n\005Va" +
      "lue\022\r\n\005value\030\001 \001(\002\022\014\n\004unit\030\002 \001(\r\022\024\n\014chem" +
      "icalForm\030\003 \001(\rb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_claros_instrument_CalibrationData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_claros_instrument_CalibrationData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationData_descriptor,
        new java.lang.String[] { });
    internal_static_claros_instrument_CalibrationData_Calibration_descriptor =
      internal_static_claros_instrument_CalibrationData_descriptor.getNestedTypes().get(0);
    internal_static_claros_instrument_CalibrationData_Calibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationData_Calibration_descriptor,
        new java.lang.String[] { "ID", "UserID", "Time", "Status", "OffsetUnits", "SlopeUnits", "Slope", "SlopeAux", "Offset", "R2", "CalibrationStandard", });
    internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor =
      internal_static_claros_instrument_CalibrationData_descriptor.getNestedTypes().get(1);
    internal_static_claros_instrument_CalibrationData_CalibrationStandard_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationData_CalibrationStandard_descriptor,
        new java.lang.String[] { "KnownValue", "MeasuredValue", "SecondaryValue", });
    internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor =
      internal_static_claros_instrument_CalibrationData_descriptor.getNestedTypes().get(2);
    internal_static_claros_instrument_CalibrationData_SecondaryValue_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationData_SecondaryValue_descriptor,
        new java.lang.String[] { "Value", });
    internal_static_claros_instrument_CalibrationData_Value_descriptor =
      internal_static_claros_instrument_CalibrationData_descriptor.getNestedTypes().get(3);
    internal_static_claros_instrument_CalibrationData_Value_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationData_Value_descriptor,
        new java.lang.String[] { "Value", "Unit", "ChemicalForm", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
