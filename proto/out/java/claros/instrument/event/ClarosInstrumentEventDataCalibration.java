// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_event_data_calibration.proto

package claros.instrument.event;

public final class ClarosInstrumentEventDataCalibration {
  private ClarosInstrumentEventDataCalibration() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EventDataCalibrationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:claros.instrument.event.EventDataCalibration)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * unique identifier of the calibration.  Could be a hash.
     * </pre>
     *
     * <code>string ID = 1;</code>
     */
    java.lang.String getID();
    /**
     * <pre>
     * unique identifier of the calibration.  Could be a hash.
     * </pre>
     *
     * <code>string ID = 1;</code>
     */
    com.google.protobuf.ByteString
        getIDBytes();

    /**
     * <pre>
     * User who performed the calibration
     * </pre>
     *
     * <code>string userID = 2;</code>
     */
    java.lang.String getUserID();
    /**
     * <pre>
     * User who performed the calibration
     * </pre>
     *
     * <code>string userID = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserIDBytes();

    /**
     * <pre>
     * Calibration Time
     * </pre>
     *
     * <code>uint64 time = 3;</code>
     */
    long getTime();

    /**
     * <pre>
     * Status enumeration specific to the device
     * </pre>
     *
     * <code>uint32 status = 4;</code>
     */
    int getStatus();

    /**
     * <pre>
     * Unit for the calibration
     * </pre>
     *
     * <code>uint32 offsetUnits = 5;</code>
     */
    int getOffsetUnits();

    /**
     * <pre>
     * Unit for the slope
     * </pre>
     *
     * <code>uint32 slopeUnits = 6;</code>
     */
    int getSlopeUnits();

    /**
     * <pre>
     * Slope of the Calibration
     * </pre>
     *
     * <code>float slope = 7;</code>
     */
    float getSlope();

    /**
     * <pre>
     * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
     * </pre>
     *
     * <code>float slopeAux = 8;</code>
     */
    float getSlopeAux();

    /**
     * <pre>
     * offset of the calibration curve
     * </pre>
     *
     * <code>float offset = 9;</code>
     */
    float getOffset();

    /**
     * <pre>
     * r-squared of the calibration curve
     * </pre>
     *
     * <code>float r2 = 10;</code>
     */
    float getR2();

    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> 
        getCalibrationStandardsList();
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard getCalibrationStandards(int index);
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    int getCalibrationStandardsCount();
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    java.util.List<? extends claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder> 
        getCalibrationStandardsOrBuilderList();
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder getCalibrationStandardsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code claros.instrument.event.EventDataCalibration}
   */
  public  static final class EventDataCalibration extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:claros.instrument.event.EventDataCalibration)
      EventDataCalibrationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventDataCalibration.newBuilder() to construct.
    private EventDataCalibration(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventDataCalibration() {
      iD_ = "";
      userID_ = "";
      calibrationStandards_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EventDataCalibration(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              iD_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              userID_ = s;
              break;
            }
            case 24: {

              time_ = input.readUInt64();
              break;
            }
            case 32: {

              status_ = input.readUInt32();
              break;
            }
            case 40: {

              offsetUnits_ = input.readUInt32();
              break;
            }
            case 48: {

              slopeUnits_ = input.readUInt32();
              break;
            }
            case 61: {

              slope_ = input.readFloat();
              break;
            }
            case 69: {

              slopeAux_ = input.readFloat();
              break;
            }
            case 77: {

              offset_ = input.readFloat();
              break;
            }
            case 85: {

              r2_ = input.readFloat();
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000400) != 0)) {
                calibrationStandards_ = new java.util.ArrayList<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard>();
                mutable_bitField0_ |= 0x00000400;
              }
              calibrationStandards_.add(
                  input.readMessage(claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000400) != 0)) {
          calibrationStandards_ = java.util.Collections.unmodifiableList(calibrationStandards_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return claros.instrument.event.ClarosInstrumentEventDataCalibration.internal_static_claros_instrument_event_EventDataCalibration_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return claros.instrument.event.ClarosInstrumentEventDataCalibration.internal_static_claros_instrument_event_EventDataCalibration_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.class, claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object iD_;
    /**
     * <pre>
     * unique identifier of the calibration.  Could be a hash.
     * </pre>
     *
     * <code>string ID = 1;</code>
     */
    public java.lang.String getID() {
      java.lang.Object ref = iD_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iD_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * unique identifier of the calibration.  Could be a hash.
     * </pre>
     *
     * <code>string ID = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIDBytes() {
      java.lang.Object ref = iD_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iD_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USERID_FIELD_NUMBER = 2;
    private volatile java.lang.Object userID_;
    /**
     * <pre>
     * User who performed the calibration
     * </pre>
     *
     * <code>string userID = 2;</code>
     */
    public java.lang.String getUserID() {
      java.lang.Object ref = userID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userID_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * User who performed the calibration
     * </pre>
     *
     * <code>string userID = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserIDBytes() {
      java.lang.Object ref = userID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIME_FIELD_NUMBER = 3;
    private long time_;
    /**
     * <pre>
     * Calibration Time
     * </pre>
     *
     * <code>uint64 time = 3;</code>
     */
    public long getTime() {
      return time_;
    }

    public static final int STATUS_FIELD_NUMBER = 4;
    private int status_;
    /**
     * <pre>
     * Status enumeration specific to the device
     * </pre>
     *
     * <code>uint32 status = 4;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int OFFSETUNITS_FIELD_NUMBER = 5;
    private int offsetUnits_;
    /**
     * <pre>
     * Unit for the calibration
     * </pre>
     *
     * <code>uint32 offsetUnits = 5;</code>
     */
    public int getOffsetUnits() {
      return offsetUnits_;
    }

    public static final int SLOPEUNITS_FIELD_NUMBER = 6;
    private int slopeUnits_;
    /**
     * <pre>
     * Unit for the slope
     * </pre>
     *
     * <code>uint32 slopeUnits = 6;</code>
     */
    public int getSlopeUnits() {
      return slopeUnits_;
    }

    public static final int SLOPE_FIELD_NUMBER = 7;
    private float slope_;
    /**
     * <pre>
     * Slope of the Calibration
     * </pre>
     *
     * <code>float slope = 7;</code>
     */
    public float getSlope() {
      return slope_;
    }

    public static final int SLOPEAUX_FIELD_NUMBER = 8;
    private float slopeAux_;
    /**
     * <pre>
     * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
     * </pre>
     *
     * <code>float slopeAux = 8;</code>
     */
    public float getSlopeAux() {
      return slopeAux_;
    }

    public static final int OFFSET_FIELD_NUMBER = 9;
    private float offset_;
    /**
     * <pre>
     * offset of the calibration curve
     * </pre>
     *
     * <code>float offset = 9;</code>
     */
    public float getOffset() {
      return offset_;
    }

    public static final int R2_FIELD_NUMBER = 10;
    private float r2_;
    /**
     * <pre>
     * r-squared of the calibration curve
     * </pre>
     *
     * <code>float r2 = 10;</code>
     */
    public float getR2() {
      return r2_;
    }

    public static final int CALIBRATIONSTANDARDS_FIELD_NUMBER = 11;
    private java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> calibrationStandards_;
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    public java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> getCalibrationStandardsList() {
      return calibrationStandards_;
    }
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    public java.util.List<? extends claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder> 
        getCalibrationStandardsOrBuilderList() {
      return calibrationStandards_;
    }
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    public int getCalibrationStandardsCount() {
      return calibrationStandards_.size();
    }
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard getCalibrationStandards(int index) {
      return calibrationStandards_.get(index);
    }
    /**
     * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
     */
    public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder getCalibrationStandardsOrBuilder(
        int index) {
      return calibrationStandards_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIDBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, iD_);
      }
      if (!getUserIDBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, userID_);
      }
      if (time_ != 0L) {
        output.writeUInt64(3, time_);
      }
      if (status_ != 0) {
        output.writeUInt32(4, status_);
      }
      if (offsetUnits_ != 0) {
        output.writeUInt32(5, offsetUnits_);
      }
      if (slopeUnits_ != 0) {
        output.writeUInt32(6, slopeUnits_);
      }
      if (slope_ != 0F) {
        output.writeFloat(7, slope_);
      }
      if (slopeAux_ != 0F) {
        output.writeFloat(8, slopeAux_);
      }
      if (offset_ != 0F) {
        output.writeFloat(9, offset_);
      }
      if (r2_ != 0F) {
        output.writeFloat(10, r2_);
      }
      for (int i = 0; i < calibrationStandards_.size(); i++) {
        output.writeMessage(11, calibrationStandards_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIDBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, iD_);
      }
      if (!getUserIDBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, userID_);
      }
      if (time_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, time_);
      }
      if (status_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, status_);
      }
      if (offsetUnits_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, offsetUnits_);
      }
      if (slopeUnits_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, slopeUnits_);
      }
      if (slope_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, slope_);
      }
      if (slopeAux_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, slopeAux_);
      }
      if (offset_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, offset_);
      }
      if (r2_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, r2_);
      }
      for (int i = 0; i < calibrationStandards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, calibrationStandards_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration)) {
        return super.equals(obj);
      }
      claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration other = (claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration) obj;

      if (!getID()
          .equals(other.getID())) return false;
      if (!getUserID()
          .equals(other.getUserID())) return false;
      if (getTime()
          != other.getTime()) return false;
      if (getStatus()
          != other.getStatus()) return false;
      if (getOffsetUnits()
          != other.getOffsetUnits()) return false;
      if (getSlopeUnits()
          != other.getSlopeUnits()) return false;
      if (java.lang.Float.floatToIntBits(getSlope())
          != java.lang.Float.floatToIntBits(
              other.getSlope())) return false;
      if (java.lang.Float.floatToIntBits(getSlopeAux())
          != java.lang.Float.floatToIntBits(
              other.getSlopeAux())) return false;
      if (java.lang.Float.floatToIntBits(getOffset())
          != java.lang.Float.floatToIntBits(
              other.getOffset())) return false;
      if (java.lang.Float.floatToIntBits(getR2())
          != java.lang.Float.floatToIntBits(
              other.getR2())) return false;
      if (!getCalibrationStandardsList()
          .equals(other.getCalibrationStandardsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getID().hashCode();
      hash = (37 * hash) + USERID_FIELD_NUMBER;
      hash = (53 * hash) + getUserID().hashCode();
      hash = (37 * hash) + TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTime());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus();
      hash = (37 * hash) + OFFSETUNITS_FIELD_NUMBER;
      hash = (53 * hash) + getOffsetUnits();
      hash = (37 * hash) + SLOPEUNITS_FIELD_NUMBER;
      hash = (53 * hash) + getSlopeUnits();
      hash = (37 * hash) + SLOPE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getSlope());
      hash = (37 * hash) + SLOPEAUX_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getSlopeAux());
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getOffset());
      hash = (37 * hash) + R2_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getR2());
      if (getCalibrationStandardsCount() > 0) {
        hash = (37 * hash) + CALIBRATIONSTANDARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCalibrationStandardsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code claros.instrument.event.EventDataCalibration}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:claros.instrument.event.EventDataCalibration)
        claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibrationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.event.ClarosInstrumentEventDataCalibration.internal_static_claros_instrument_event_EventDataCalibration_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.event.ClarosInstrumentEventDataCalibration.internal_static_claros_instrument_event_EventDataCalibration_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.class, claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.Builder.class);
      }

      // Construct using claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCalibrationStandardsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        iD_ = "";

        userID_ = "";

        time_ = 0L;

        status_ = 0;

        offsetUnits_ = 0;

        slopeUnits_ = 0;

        slope_ = 0F;

        slopeAux_ = 0F;

        offset_ = 0F;

        r2_ = 0F;

        if (calibrationStandardsBuilder_ == null) {
          calibrationStandards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
        } else {
          calibrationStandardsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return claros.instrument.event.ClarosInstrumentEventDataCalibration.internal_static_claros_instrument_event_EventDataCalibration_descriptor;
      }

      @java.lang.Override
      public claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration getDefaultInstanceForType() {
        return claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.getDefaultInstance();
      }

      @java.lang.Override
      public claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration build() {
        claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration buildPartial() {
        claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration result = new claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.iD_ = iD_;
        result.userID_ = userID_;
        result.time_ = time_;
        result.status_ = status_;
        result.offsetUnits_ = offsetUnits_;
        result.slopeUnits_ = slopeUnits_;
        result.slope_ = slope_;
        result.slopeAux_ = slopeAux_;
        result.offset_ = offset_;
        result.r2_ = r2_;
        if (calibrationStandardsBuilder_ == null) {
          if (((bitField0_ & 0x00000400) != 0)) {
            calibrationStandards_ = java.util.Collections.unmodifiableList(calibrationStandards_);
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.calibrationStandards_ = calibrationStandards_;
        } else {
          result.calibrationStandards_ = calibrationStandardsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration) {
          return mergeFrom((claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration other) {
        if (other == claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration.getDefaultInstance()) return this;
        if (!other.getID().isEmpty()) {
          iD_ = other.iD_;
          onChanged();
        }
        if (!other.getUserID().isEmpty()) {
          userID_ = other.userID_;
          onChanged();
        }
        if (other.getTime() != 0L) {
          setTime(other.getTime());
        }
        if (other.getStatus() != 0) {
          setStatus(other.getStatus());
        }
        if (other.getOffsetUnits() != 0) {
          setOffsetUnits(other.getOffsetUnits());
        }
        if (other.getSlopeUnits() != 0) {
          setSlopeUnits(other.getSlopeUnits());
        }
        if (other.getSlope() != 0F) {
          setSlope(other.getSlope());
        }
        if (other.getSlopeAux() != 0F) {
          setSlopeAux(other.getSlopeAux());
        }
        if (other.getOffset() != 0F) {
          setOffset(other.getOffset());
        }
        if (other.getR2() != 0F) {
          setR2(other.getR2());
        }
        if (calibrationStandardsBuilder_ == null) {
          if (!other.calibrationStandards_.isEmpty()) {
            if (calibrationStandards_.isEmpty()) {
              calibrationStandards_ = other.calibrationStandards_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureCalibrationStandardsIsMutable();
              calibrationStandards_.addAll(other.calibrationStandards_);
            }
            onChanged();
          }
        } else {
          if (!other.calibrationStandards_.isEmpty()) {
            if (calibrationStandardsBuilder_.isEmpty()) {
              calibrationStandardsBuilder_.dispose();
              calibrationStandardsBuilder_ = null;
              calibrationStandards_ = other.calibrationStandards_;
              bitField0_ = (bitField0_ & ~0x00000400);
              calibrationStandardsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCalibrationStandardsFieldBuilder() : null;
            } else {
              calibrationStandardsBuilder_.addAllMessages(other.calibrationStandards_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object iD_ = "";
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public java.lang.String getID() {
        java.lang.Object ref = iD_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iD_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIDBytes() {
        java.lang.Object ref = iD_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iD_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public Builder setID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        iD_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public Builder clearID() {
        
        iD_ = getDefaultInstance().getID();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unique identifier of the calibration.  Could be a hash.
       * </pre>
       *
       * <code>string ID = 1;</code>
       */
      public Builder setIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        iD_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object userID_ = "";
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public java.lang.String getUserID() {
        java.lang.Object ref = userID_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserIDBytes() {
        java.lang.Object ref = userID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public Builder setUserID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        userID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public Builder clearUserID() {
        
        userID_ = getDefaultInstance().getUserID();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * User who performed the calibration
       * </pre>
       *
       * <code>string userID = 2;</code>
       */
      public Builder setUserIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        userID_ = value;
        onChanged();
        return this;
      }

      private long time_ ;
      /**
       * <pre>
       * Calibration Time
       * </pre>
       *
       * <code>uint64 time = 3;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <pre>
       * Calibration Time
       * </pre>
       *
       * <code>uint64 time = 3;</code>
       */
      public Builder setTime(long value) {
        
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Calibration Time
       * </pre>
       *
       * <code>uint64 time = 3;</code>
       */
      public Builder clearTime() {
        
        time_ = 0L;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <pre>
       * Status enumeration specific to the device
       * </pre>
       *
       * <code>uint32 status = 4;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <pre>
       * Status enumeration specific to the device
       * </pre>
       *
       * <code>uint32 status = 4;</code>
       */
      public Builder setStatus(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Status enumeration specific to the device
       * </pre>
       *
       * <code>uint32 status = 4;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private int offsetUnits_ ;
      /**
       * <pre>
       * Unit for the calibration
       * </pre>
       *
       * <code>uint32 offsetUnits = 5;</code>
       */
      public int getOffsetUnits() {
        return offsetUnits_;
      }
      /**
       * <pre>
       * Unit for the calibration
       * </pre>
       *
       * <code>uint32 offsetUnits = 5;</code>
       */
      public Builder setOffsetUnits(int value) {
        
        offsetUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unit for the calibration
       * </pre>
       *
       * <code>uint32 offsetUnits = 5;</code>
       */
      public Builder clearOffsetUnits() {
        
        offsetUnits_ = 0;
        onChanged();
        return this;
      }

      private int slopeUnits_ ;
      /**
       * <pre>
       * Unit for the slope
       * </pre>
       *
       * <code>uint32 slopeUnits = 6;</code>
       */
      public int getSlopeUnits() {
        return slopeUnits_;
      }
      /**
       * <pre>
       * Unit for the slope
       * </pre>
       *
       * <code>uint32 slopeUnits = 6;</code>
       */
      public Builder setSlopeUnits(int value) {
        
        slopeUnits_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unit for the slope
       * </pre>
       *
       * <code>uint32 slopeUnits = 6;</code>
       */
      public Builder clearSlopeUnits() {
        
        slopeUnits_ = 0;
        onChanged();
        return this;
      }

      private float slope_ ;
      /**
       * <pre>
       * Slope of the Calibration
       * </pre>
       *
       * <code>float slope = 7;</code>
       */
      public float getSlope() {
        return slope_;
      }
      /**
       * <pre>
       * Slope of the Calibration
       * </pre>
       *
       * <code>float slope = 7;</code>
       */
      public Builder setSlope(float value) {
        
        slope_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Slope of the Calibration
       * </pre>
       *
       * <code>float slope = 7;</code>
       */
      public Builder clearSlope() {
        
        slope_ = 0F;
        onChanged();
        return this;
      }

      private float slopeAux_ ;
      /**
       * <pre>
       * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
       * </pre>
       *
       * <code>float slopeAux = 8;</code>
       */
      public float getSlopeAux() {
        return slopeAux_;
      }
      /**
       * <pre>
       * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
       * </pre>
       *
       * <code>float slopeAux = 8;</code>
       */
      public Builder setSlopeAux(float value) {
        
        slopeAux_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Auxiliary way of displaying slope.  Used by pH to give the percent of the nominal slope    
       * </pre>
       *
       * <code>float slopeAux = 8;</code>
       */
      public Builder clearSlopeAux() {
        
        slopeAux_ = 0F;
        onChanged();
        return this;
      }

      private float offset_ ;
      /**
       * <pre>
       * offset of the calibration curve
       * </pre>
       *
       * <code>float offset = 9;</code>
       */
      public float getOffset() {
        return offset_;
      }
      /**
       * <pre>
       * offset of the calibration curve
       * </pre>
       *
       * <code>float offset = 9;</code>
       */
      public Builder setOffset(float value) {
        
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * offset of the calibration curve
       * </pre>
       *
       * <code>float offset = 9;</code>
       */
      public Builder clearOffset() {
        
        offset_ = 0F;
        onChanged();
        return this;
      }

      private float r2_ ;
      /**
       * <pre>
       * r-squared of the calibration curve
       * </pre>
       *
       * <code>float r2 = 10;</code>
       */
      public float getR2() {
        return r2_;
      }
      /**
       * <pre>
       * r-squared of the calibration curve
       * </pre>
       *
       * <code>float r2 = 10;</code>
       */
      public Builder setR2(float value) {
        
        r2_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * r-squared of the calibration curve
       * </pre>
       *
       * <code>float r2 = 10;</code>
       */
      public Builder clearR2() {
        
        r2_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> calibrationStandards_ =
        java.util.Collections.emptyList();
      private void ensureCalibrationStandardsIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          calibrationStandards_ = new java.util.ArrayList<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard>(calibrationStandards_);
          bitField0_ |= 0x00000400;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder> calibrationStandardsBuilder_;

      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> getCalibrationStandardsList() {
        if (calibrationStandardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(calibrationStandards_);
        } else {
          return calibrationStandardsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public int getCalibrationStandardsCount() {
        if (calibrationStandardsBuilder_ == null) {
          return calibrationStandards_.size();
        } else {
          return calibrationStandardsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard getCalibrationStandards(int index) {
        if (calibrationStandardsBuilder_ == null) {
          return calibrationStandards_.get(index);
        } else {
          return calibrationStandardsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder setCalibrationStandards(
          int index, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard value) {
        if (calibrationStandardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.set(index, value);
          onChanged();
        } else {
          calibrationStandardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder setCalibrationStandards(
          int index, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder builderForValue) {
        if (calibrationStandardsBuilder_ == null) {
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.set(index, builderForValue.build());
          onChanged();
        } else {
          calibrationStandardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder addCalibrationStandards(claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard value) {
        if (calibrationStandardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.add(value);
          onChanged();
        } else {
          calibrationStandardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder addCalibrationStandards(
          int index, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard value) {
        if (calibrationStandardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.add(index, value);
          onChanged();
        } else {
          calibrationStandardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder addCalibrationStandards(
          claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder builderForValue) {
        if (calibrationStandardsBuilder_ == null) {
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.add(builderForValue.build());
          onChanged();
        } else {
          calibrationStandardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder addCalibrationStandards(
          int index, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder builderForValue) {
        if (calibrationStandardsBuilder_ == null) {
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.add(index, builderForValue.build());
          onChanged();
        } else {
          calibrationStandardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder addAllCalibrationStandards(
          java.lang.Iterable<? extends claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard> values) {
        if (calibrationStandardsBuilder_ == null) {
          ensureCalibrationStandardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, calibrationStandards_);
          onChanged();
        } else {
          calibrationStandardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder clearCalibrationStandards() {
        if (calibrationStandardsBuilder_ == null) {
          calibrationStandards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
        } else {
          calibrationStandardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public Builder removeCalibrationStandards(int index) {
        if (calibrationStandardsBuilder_ == null) {
          ensureCalibrationStandardsIsMutable();
          calibrationStandards_.remove(index);
          onChanged();
        } else {
          calibrationStandardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder getCalibrationStandardsBuilder(
          int index) {
        return getCalibrationStandardsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder getCalibrationStandardsOrBuilder(
          int index) {
        if (calibrationStandardsBuilder_ == null) {
          return calibrationStandards_.get(index);  } else {
          return calibrationStandardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public java.util.List<? extends claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder> 
           getCalibrationStandardsOrBuilderList() {
        if (calibrationStandardsBuilder_ != null) {
          return calibrationStandardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(calibrationStandards_);
        }
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder addCalibrationStandardsBuilder() {
        return getCalibrationStandardsFieldBuilder().addBuilder(
            claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.getDefaultInstance());
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder addCalibrationStandardsBuilder(
          int index) {
        return getCalibrationStandardsFieldBuilder().addBuilder(
            index, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.getDefaultInstance());
      }
      /**
       * <code>repeated .claros.instrument.event.EventDataCalibrationStandard calibrationStandards = 11;</code>
       */
      public java.util.List<claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder> 
           getCalibrationStandardsBuilderList() {
        return getCalibrationStandardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder> 
          getCalibrationStandardsFieldBuilder() {
        if (calibrationStandardsBuilder_ == null) {
          calibrationStandardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandard.Builder, claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.EventDataCalibrationStandardOrBuilder>(
                  calibrationStandards_,
                  ((bitField0_ & 0x00000400) != 0),
                  getParentForChildren(),
                  isClean());
          calibrationStandards_ = null;
        }
        return calibrationStandardsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:claros.instrument.event.EventDataCalibration)
    }

    // @@protoc_insertion_point(class_scope:claros.instrument.event.EventDataCalibration)
    private static final claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration();
    }

    public static claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventDataCalibration>
        PARSER = new com.google.protobuf.AbstractParser<EventDataCalibration>() {
      @java.lang.Override
      public EventDataCalibration parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EventDataCalibration(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EventDataCalibration> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventDataCalibration> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public claros.instrument.event.ClarosInstrumentEventDataCalibration.EventDataCalibration getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_event_EventDataCalibration_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_event_EventDataCalibration_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.claros_instrument_event_data_calibrati" +
      "on.proto\022\027claros.instrument.event\0327claro" +
      "s_instrument_event_data_calibration_stan" +
      "dard.proto\"\213\002\n\024EventDataCalibration\022\n\n\002I" +
      "D\030\001 \001(\t\022\016\n\006userID\030\002 \001(\t\022\014\n\004time\030\003 \001(\004\022\016\n" +
      "\006status\030\004 \001(\r\022\023\n\013offsetUnits\030\005 \001(\r\022\022\n\nsl" +
      "opeUnits\030\006 \001(\r\022\r\n\005slope\030\007 \001(\002\022\020\n\010slopeAu" +
      "x\030\010 \001(\002\022\016\n\006offset\030\t \001(\002\022\n\n\002r2\030\n \001(\002\022S\n\024c" +
      "alibrationStandards\030\013 \003(\01325.claros.instr" +
      "ument.event.EventDataCalibrationStandard" +
      "b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.getDescriptor(),
        }, assigner);
    internal_static_claros_instrument_event_EventDataCalibration_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_claros_instrument_event_EventDataCalibration_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_event_EventDataCalibration_descriptor,
        new java.lang.String[] { "ID", "UserID", "Time", "Status", "OffsetUnits", "SlopeUnits", "Slope", "SlopeAux", "Offset", "R2", "CalibrationStandards", });
    claros.instrument.event.ClarosInstrumentEventDataCalibrationStandard.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
