// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_calibration_standard.proto

package claros.instrument;

public final class ClarosInstrumentCalibrationStandard {
  private ClarosInstrumentCalibrationStandard() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CalibrationStandardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:claros.instrument.CalibrationStandard)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    boolean hasKnownValue();
    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getKnownValue();
    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getKnownValueOrBuilder();

    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    boolean hasMeasuredValue();
    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getMeasuredValue();
    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getMeasuredValueOrBuilder();

    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> 
        getSecondaryValuesList();
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getSecondaryValues(int index);
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    int getSecondaryValuesCount();
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
        getSecondaryValuesOrBuilderList();
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getSecondaryValuesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code claros.instrument.CalibrationStandard}
   */
  public  static final class CalibrationStandard extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:claros.instrument.CalibrationStandard)
      CalibrationStandardOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CalibrationStandard.newBuilder() to construct.
    private CalibrationStandard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CalibrationStandard() {
      secondaryValues_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CalibrationStandard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder subBuilder = null;
              if (knownValue_ != null) {
                subBuilder = knownValue_.toBuilder();
              }
              knownValue_ = input.readMessage(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(knownValue_);
                knownValue_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder subBuilder = null;
              if (measuredValue_ != null) {
                subBuilder = measuredValue_.toBuilder();
              }
              measuredValue_ = input.readMessage(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(measuredValue_);
                measuredValue_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                secondaryValues_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue>();
                mutable_bitField0_ |= 0x00000004;
              }
              secondaryValues_.add(
                  input.readMessage(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          secondaryValues_ = java.util.Collections.unmodifiableList(secondaryValues_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return claros.instrument.ClarosInstrumentCalibrationStandard.internal_static_claros_instrument_CalibrationStandard_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return claros.instrument.ClarosInstrumentCalibrationStandard.internal_static_claros_instrument_CalibrationStandard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.class, claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.Builder.class);
    }

    private int bitField0_;
    public static final int KNOWNVALUE_FIELD_NUMBER = 1;
    private claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue knownValue_;
    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    public boolean hasKnownValue() {
      return knownValue_ != null;
    }
    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getKnownValue() {
      return knownValue_ == null ? claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : knownValue_;
    }
    /**
     * <pre>
     *this is the primary value  (Concentration)
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getKnownValueOrBuilder() {
      return getKnownValue();
    }

    public static final int MEASUREDVALUE_FIELD_NUMBER = 2;
    private claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue measuredValue_;
    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    public boolean hasMeasuredValue() {
      return measuredValue_ != null;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getMeasuredValue() {
      return measuredValue_ == null ? claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : measuredValue_;
    }
    /**
     * <pre>
     * </pre>
     *
     * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getMeasuredValueOrBuilder() {
      return getMeasuredValue();
    }

    public static final int SECONDARYVALUES_FIELD_NUMBER = 4;
    private java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> secondaryValues_;
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    public java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> getSecondaryValuesList() {
      return secondaryValues_;
    }
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
        getSecondaryValuesOrBuilderList() {
      return secondaryValues_;
    }
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    public int getSecondaryValuesCount() {
      return secondaryValues_.size();
    }
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getSecondaryValues(int index) {
      return secondaryValues_.get(index);
    }
    /**
     * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
     */
    public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getSecondaryValuesOrBuilder(
        int index) {
      return secondaryValues_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (knownValue_ != null) {
        output.writeMessage(1, getKnownValue());
      }
      if (measuredValue_ != null) {
        output.writeMessage(2, getMeasuredValue());
      }
      for (int i = 0; i < secondaryValues_.size(); i++) {
        output.writeMessage(4, secondaryValues_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (knownValue_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKnownValue());
      }
      if (measuredValue_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMeasuredValue());
      }
      for (int i = 0; i < secondaryValues_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, secondaryValues_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard)) {
        return super.equals(obj);
      }
      claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard other = (claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard) obj;

      if (hasKnownValue() != other.hasKnownValue()) return false;
      if (hasKnownValue()) {
        if (!getKnownValue()
            .equals(other.getKnownValue())) return false;
      }
      if (hasMeasuredValue() != other.hasMeasuredValue()) return false;
      if (hasMeasuredValue()) {
        if (!getMeasuredValue()
            .equals(other.getMeasuredValue())) return false;
      }
      if (!getSecondaryValuesList()
          .equals(other.getSecondaryValuesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKnownValue()) {
        hash = (37 * hash) + KNOWNVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getKnownValue().hashCode();
      }
      if (hasMeasuredValue()) {
        hash = (37 * hash) + MEASUREDVALUE_FIELD_NUMBER;
        hash = (53 * hash) + getMeasuredValue().hashCode();
      }
      if (getSecondaryValuesCount() > 0) {
        hash = (37 * hash) + SECONDARYVALUES_FIELD_NUMBER;
        hash = (53 * hash) + getSecondaryValuesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code claros.instrument.CalibrationStandard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:claros.instrument.CalibrationStandard)
        claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.ClarosInstrumentCalibrationStandard.internal_static_claros_instrument_CalibrationStandard_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.ClarosInstrumentCalibrationStandard.internal_static_claros_instrument_CalibrationStandard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.class, claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.Builder.class);
      }

      // Construct using claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSecondaryValuesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (knownValueBuilder_ == null) {
          knownValue_ = null;
        } else {
          knownValue_ = null;
          knownValueBuilder_ = null;
        }
        if (measuredValueBuilder_ == null) {
          measuredValue_ = null;
        } else {
          measuredValue_ = null;
          measuredValueBuilder_ = null;
        }
        if (secondaryValuesBuilder_ == null) {
          secondaryValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          secondaryValuesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return claros.instrument.ClarosInstrumentCalibrationStandard.internal_static_claros_instrument_CalibrationStandard_descriptor;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard getDefaultInstanceForType() {
        return claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.getDefaultInstance();
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard build() {
        claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard buildPartial() {
        claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard result = new claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (knownValueBuilder_ == null) {
          result.knownValue_ = knownValue_;
        } else {
          result.knownValue_ = knownValueBuilder_.build();
        }
        if (measuredValueBuilder_ == null) {
          result.measuredValue_ = measuredValue_;
        } else {
          result.measuredValue_ = measuredValueBuilder_.build();
        }
        if (secondaryValuesBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            secondaryValues_ = java.util.Collections.unmodifiableList(secondaryValues_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.secondaryValues_ = secondaryValues_;
        } else {
          result.secondaryValues_ = secondaryValuesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard) {
          return mergeFrom((claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard other) {
        if (other == claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard.getDefaultInstance()) return this;
        if (other.hasKnownValue()) {
          mergeKnownValue(other.getKnownValue());
        }
        if (other.hasMeasuredValue()) {
          mergeMeasuredValue(other.getMeasuredValue());
        }
        if (secondaryValuesBuilder_ == null) {
          if (!other.secondaryValues_.isEmpty()) {
            if (secondaryValues_.isEmpty()) {
              secondaryValues_ = other.secondaryValues_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSecondaryValuesIsMutable();
              secondaryValues_.addAll(other.secondaryValues_);
            }
            onChanged();
          }
        } else {
          if (!other.secondaryValues_.isEmpty()) {
            if (secondaryValuesBuilder_.isEmpty()) {
              secondaryValuesBuilder_.dispose();
              secondaryValuesBuilder_ = null;
              secondaryValues_ = other.secondaryValues_;
              bitField0_ = (bitField0_ & ~0x00000004);
              secondaryValuesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSecondaryValuesFieldBuilder() : null;
            } else {
              secondaryValuesBuilder_.addAllMessages(other.secondaryValues_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue knownValue_;
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> knownValueBuilder_;
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public boolean hasKnownValue() {
        return knownValueBuilder_ != null || knownValue_ != null;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getKnownValue() {
        if (knownValueBuilder_ == null) {
          return knownValue_ == null ? claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : knownValue_;
        } else {
          return knownValueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public Builder setKnownValue(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (knownValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          knownValue_ = value;
          onChanged();
        } else {
          knownValueBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public Builder setKnownValue(
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder builderForValue) {
        if (knownValueBuilder_ == null) {
          knownValue_ = builderForValue.build();
          onChanged();
        } else {
          knownValueBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public Builder mergeKnownValue(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (knownValueBuilder_ == null) {
          if (knownValue_ != null) {
            knownValue_ =
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.newBuilder(knownValue_).mergeFrom(value).buildPartial();
          } else {
            knownValue_ = value;
          }
          onChanged();
        } else {
          knownValueBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public Builder clearKnownValue() {
        if (knownValueBuilder_ == null) {
          knownValue_ = null;
          onChanged();
        } else {
          knownValue_ = null;
          knownValueBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder getKnownValueBuilder() {
        
        onChanged();
        return getKnownValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getKnownValueOrBuilder() {
        if (knownValueBuilder_ != null) {
          return knownValueBuilder_.getMessageOrBuilder();
        } else {
          return knownValue_ == null ?
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : knownValue_;
        }
      }
      /**
       * <pre>
       *this is the primary value  (Concentration)
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue knownValue = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
          getKnownValueFieldBuilder() {
        if (knownValueBuilder_ == null) {
          knownValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder>(
                  getKnownValue(),
                  getParentForChildren(),
                  isClean());
          knownValue_ = null;
        }
        return knownValueBuilder_;
      }

      private claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue measuredValue_;
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> measuredValueBuilder_;
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public boolean hasMeasuredValue() {
        return measuredValueBuilder_ != null || measuredValue_ != null;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getMeasuredValue() {
        if (measuredValueBuilder_ == null) {
          return measuredValue_ == null ? claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : measuredValue_;
        } else {
          return measuredValueBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public Builder setMeasuredValue(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (measuredValueBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          measuredValue_ = value;
          onChanged();
        } else {
          measuredValueBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public Builder setMeasuredValue(
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder builderForValue) {
        if (measuredValueBuilder_ == null) {
          measuredValue_ = builderForValue.build();
          onChanged();
        } else {
          measuredValueBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public Builder mergeMeasuredValue(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (measuredValueBuilder_ == null) {
          if (measuredValue_ != null) {
            measuredValue_ =
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.newBuilder(measuredValue_).mergeFrom(value).buildPartial();
          } else {
            measuredValue_ = value;
          }
          onChanged();
        } else {
          measuredValueBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public Builder clearMeasuredValue() {
        if (measuredValueBuilder_ == null) {
          measuredValue_ = null;
          onChanged();
        } else {
          measuredValue_ = null;
          measuredValueBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder getMeasuredValueBuilder() {
        
        onChanged();
        return getMeasuredValueFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getMeasuredValueOrBuilder() {
        if (measuredValueBuilder_ != null) {
          return measuredValueBuilder_.getMessageOrBuilder();
        } else {
          return measuredValue_ == null ?
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance() : measuredValue_;
        }
      }
      /**
       * <pre>
       * </pre>
       *
       * <code>.claros.instrument.CalibrationValue measuredValue = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
          getMeasuredValueFieldBuilder() {
        if (measuredValueBuilder_ == null) {
          measuredValueBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder>(
                  getMeasuredValue(),
                  getParentForChildren(),
                  isClean());
          measuredValue_ = null;
        }
        return measuredValueBuilder_;
      }

      private java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> secondaryValues_ =
        java.util.Collections.emptyList();
      private void ensureSecondaryValuesIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          secondaryValues_ = new java.util.ArrayList<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue>(secondaryValues_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> secondaryValuesBuilder_;

      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> getSecondaryValuesList() {
        if (secondaryValuesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(secondaryValues_);
        } else {
          return secondaryValuesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public int getSecondaryValuesCount() {
        if (secondaryValuesBuilder_ == null) {
          return secondaryValues_.size();
        } else {
          return secondaryValuesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue getSecondaryValues(int index) {
        if (secondaryValuesBuilder_ == null) {
          return secondaryValues_.get(index);
        } else {
          return secondaryValuesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder setSecondaryValues(
          int index, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (secondaryValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecondaryValuesIsMutable();
          secondaryValues_.set(index, value);
          onChanged();
        } else {
          secondaryValuesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder setSecondaryValues(
          int index, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder builderForValue) {
        if (secondaryValuesBuilder_ == null) {
          ensureSecondaryValuesIsMutable();
          secondaryValues_.set(index, builderForValue.build());
          onChanged();
        } else {
          secondaryValuesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder addSecondaryValues(claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (secondaryValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecondaryValuesIsMutable();
          secondaryValues_.add(value);
          onChanged();
        } else {
          secondaryValuesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder addSecondaryValues(
          int index, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue value) {
        if (secondaryValuesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecondaryValuesIsMutable();
          secondaryValues_.add(index, value);
          onChanged();
        } else {
          secondaryValuesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder addSecondaryValues(
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder builderForValue) {
        if (secondaryValuesBuilder_ == null) {
          ensureSecondaryValuesIsMutable();
          secondaryValues_.add(builderForValue.build());
          onChanged();
        } else {
          secondaryValuesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder addSecondaryValues(
          int index, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder builderForValue) {
        if (secondaryValuesBuilder_ == null) {
          ensureSecondaryValuesIsMutable();
          secondaryValues_.add(index, builderForValue.build());
          onChanged();
        } else {
          secondaryValuesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder addAllSecondaryValues(
          java.lang.Iterable<? extends claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue> values) {
        if (secondaryValuesBuilder_ == null) {
          ensureSecondaryValuesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, secondaryValues_);
          onChanged();
        } else {
          secondaryValuesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder clearSecondaryValues() {
        if (secondaryValuesBuilder_ == null) {
          secondaryValues_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          secondaryValuesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public Builder removeSecondaryValues(int index) {
        if (secondaryValuesBuilder_ == null) {
          ensureSecondaryValuesIsMutable();
          secondaryValues_.remove(index);
          onChanged();
        } else {
          secondaryValuesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder getSecondaryValuesBuilder(
          int index) {
        return getSecondaryValuesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder getSecondaryValuesOrBuilder(
          int index) {
        if (secondaryValuesBuilder_ == null) {
          return secondaryValues_.get(index);  } else {
          return secondaryValuesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public java.util.List<? extends claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
           getSecondaryValuesOrBuilderList() {
        if (secondaryValuesBuilder_ != null) {
          return secondaryValuesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(secondaryValues_);
        }
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder addSecondaryValuesBuilder() {
        return getSecondaryValuesFieldBuilder().addBuilder(
            claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance());
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder addSecondaryValuesBuilder(
          int index) {
        return getSecondaryValuesFieldBuilder().addBuilder(
            index, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.getDefaultInstance());
      }
      /**
       * <code>repeated .claros.instrument.CalibrationValue secondaryValues = 4;</code>
       */
      public java.util.List<claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder> 
           getSecondaryValuesBuilderList() {
        return getSecondaryValuesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder> 
          getSecondaryValuesFieldBuilder() {
        if (secondaryValuesBuilder_ == null) {
          secondaryValuesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValue.Builder, claros.instrument.ClarosInstrumentCalibrationValue.CalibrationValueOrBuilder>(
                  secondaryValues_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          secondaryValues_ = null;
        }
        return secondaryValuesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:claros.instrument.CalibrationStandard)
    }

    // @@protoc_insertion_point(class_scope:claros.instrument.CalibrationStandard)
    private static final claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard();
    }

    public static claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CalibrationStandard>
        PARSER = new com.google.protobuf.AbstractParser<CalibrationStandard>() {
      @java.lang.Override
      public CalibrationStandard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CalibrationStandard(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CalibrationStandard> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CalibrationStandard> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public claros.instrument.ClarosInstrumentCalibrationStandard.CalibrationStandard getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_CalibrationStandard_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_CalibrationStandard_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n,claros_instrument_calibration_standard" +
      ".proto\022\021claros.instrument\032)claros_instru" +
      "ment_calibration_value.proto\"\310\001\n\023Calibra" +
      "tionStandard\0227\n\nknownValue\030\001 \001(\0132#.claro" +
      "s.instrument.CalibrationValue\022:\n\rmeasure" +
      "dValue\030\002 \001(\0132#.claros.instrument.Calibra" +
      "tionValue\022<\n\017secondaryValues\030\004 \003(\0132#.cla" +
      "ros.instrument.CalibrationValueb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          claros.instrument.ClarosInstrumentCalibrationValue.getDescriptor(),
        }, assigner);
    internal_static_claros_instrument_CalibrationStandard_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_claros_instrument_CalibrationStandard_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_CalibrationStandard_descriptor,
        new java.lang.String[] { "KnownValue", "MeasuredValue", "SecondaryValues", });
    claros.instrument.ClarosInstrumentCalibrationValue.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
