// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_definition.proto

package claros.instrument.measurement;

public final class ClarosInstrumentMeasurementDefinition {
  private ClarosInstrumentMeasurementDefinition() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface InstrumentMeasurementDefinitionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:claros.instrument.measurement.InstrumentMeasurementDefinition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
     * </pre>
     *
     * <code>string instrumentMeasurementId = 1;</code>
     */
    java.lang.String getInstrumentMeasurementId();
    /**
     * <pre>
     * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
     * </pre>
     *
     * <code>string instrumentMeasurementId = 1;</code>
     */
    com.google.protobuf.ByteString
        getInstrumentMeasurementIdBytes();

    /**
     * <pre>
     * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The FusionId of the instrument that the data is being collected
     * </pre>
     *
     * <code>string fusionId = 3;</code>
     */
    java.lang.String getFusionId();
    /**
     * <pre>
     * The FusionId of the instrument that the data is being collected
     * </pre>
     *
     * <code>string fusionId = 3;</code>
     */
    com.google.protobuf.ByteString
        getFusionIdBytes();

    /**
     * <pre>
     * Optional: The location where the data is being collected
     * </pre>
     *
     * <code>string locationId = 4;</code>
     */
    java.lang.String getLocationId();
    /**
     * <pre>
     * Optional: The location where the data is being collected
     * </pre>
     *
     * <code>string locationId = 4;</code>
     */
    com.google.protobuf.ByteString
        getLocationIdBytes();

    /**
     * <pre>
     * Required: The parameter related to the instrument measurments being collected
     * </pre>
     *
     * <code>uint32 parameterId = 5;</code>
     */
    int getParameterId();

    /**
     * <pre>
     * The default display unit that the data will be rendered
     * </pre>
     *
     * <code>uint32 displayUnitId = 6;</code>
     */
    int getDisplayUnitId();

    /**
     * <pre>
     * Soft delete of the Instrument Measurment Collection
     * </pre>
     *
     * <code>bool isVisible = 7;</code>
     */
    boolean getIsVisible();

    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    boolean hasScSensorBinding();
    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding getScSensorBinding();
    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder getScSensorBindingOrBuilder();

    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    boolean hasMilliAmpBinding();
    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding getMilliAmpBinding();
    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder getMilliAmpBindingOrBuilder();

    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit> 
        getLimitsList();
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    claros.common.core.ClarosCommonCoreLimit.Limit getLimits(int index);
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    int getLimitsCount();
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    java.util.List<? extends claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder> 
        getLimitsOrBuilderList();
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder getLimitsOrBuilder(
        int index);

    /**
     * <pre>
     * Record Audit Fields
     * </pre>
     *
     * <code>string createdById = 11;</code>
     */
    java.lang.String getCreatedById();
    /**
     * <pre>
     * Record Audit Fields
     * </pre>
     *
     * <code>string createdById = 11;</code>
     */
    com.google.protobuf.ByteString
        getCreatedByIdBytes();

    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    boolean hasCreatedOn();
    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getCreatedOn();
    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getCreatedOnOrBuilder();

    /**
     * <code>string modifiedById = 13;</code>
     */
    java.lang.String getModifiedById();
    /**
     * <code>string modifiedById = 13;</code>
     */
    com.google.protobuf.ByteString
        getModifiedByIdBytes();

    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    boolean hasModifiedOn();
    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getModifiedOn();
    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getModifiedOnOrBuilder();

    public claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.BindingCase getBindingCase();
  }
  /**
   * Protobuf type {@code claros.instrument.measurement.InstrumentMeasurementDefinition}
   */
  public  static final class InstrumentMeasurementDefinition extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:claros.instrument.measurement.InstrumentMeasurementDefinition)
      InstrumentMeasurementDefinitionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstrumentMeasurementDefinition.newBuilder() to construct.
    private InstrumentMeasurementDefinition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstrumentMeasurementDefinition() {
      instrumentMeasurementId_ = "";
      name_ = "";
      fusionId_ = "";
      locationId_ = "";
      limits_ = java.util.Collections.emptyList();
      createdById_ = "";
      modifiedById_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstrumentMeasurementDefinition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              instrumentMeasurementId_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              fusionId_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              locationId_ = s;
              break;
            }
            case 40: {

              parameterId_ = input.readUInt32();
              break;
            }
            case 48: {

              displayUnitId_ = input.readUInt32();
              break;
            }
            case 56: {

              isVisible_ = input.readBool();
              break;
            }
            case 66: {
              claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder subBuilder = null;
              if (bindingCase_ == 8) {
                subBuilder = ((claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_).toBuilder();
              }
              binding_ =
                  input.readMessage(claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_);
                binding_ = subBuilder.buildPartial();
              }
              bindingCase_ = 8;
              break;
            }
            case 74: {
              claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder subBuilder = null;
              if (bindingCase_ == 9) {
                subBuilder = ((claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_).toBuilder();
              }
              binding_ =
                  input.readMessage(claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_);
                binding_ = subBuilder.buildPartial();
              }
              bindingCase_ = 9;
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) != 0)) {
                limits_ = new java.util.ArrayList<claros.common.core.ClarosCommonCoreLimit.Limit>();
                mutable_bitField0_ |= 0x00000200;
              }
              limits_.add(
                  input.readMessage(claros.common.core.ClarosCommonCoreLimit.Limit.parser(), extensionRegistry));
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              createdById_ = s;
              break;
            }
            case 98: {
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder subBuilder = null;
              if (createdOn_ != null) {
                subBuilder = createdOn_.toBuilder();
              }
              createdOn_ = input.readMessage(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(createdOn_);
                createdOn_ = subBuilder.buildPartial();
              }

              break;
            }
            case 106: {
              java.lang.String s = input.readStringRequireUtf8();

              modifiedById_ = s;
              break;
            }
            case 114: {
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder subBuilder = null;
              if (modifiedOn_ != null) {
                subBuilder = modifiedOn_.toBuilder();
              }
              modifiedOn_ = input.readMessage(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modifiedOn_);
                modifiedOn_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000200) != 0)) {
          limits_ = java.util.Collections.unmodifiableList(limits_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.class, claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.Builder.class);
    }

    private int bitField0_;
    private int bindingCase_ = 0;
    private java.lang.Object binding_;
    public enum BindingCase
        implements com.google.protobuf.Internal.EnumLite {
      SCSENSORBINDING(8),
      MILLIAMPBINDING(9),
      BINDING_NOT_SET(0);
      private final int value;
      private BindingCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BindingCase valueOf(int value) {
        return forNumber(value);
      }

      public static BindingCase forNumber(int value) {
        switch (value) {
          case 8: return SCSENSORBINDING;
          case 9: return MILLIAMPBINDING;
          case 0: return BINDING_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public BindingCase
    getBindingCase() {
      return BindingCase.forNumber(
          bindingCase_);
    }

    public static final int INSTRUMENTMEASUREMENTID_FIELD_NUMBER = 1;
    private volatile java.lang.Object instrumentMeasurementId_;
    /**
     * <pre>
     * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
     * </pre>
     *
     * <code>string instrumentMeasurementId = 1;</code>
     */
    public java.lang.String getInstrumentMeasurementId() {
      java.lang.Object ref = instrumentMeasurementId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        instrumentMeasurementId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
     * </pre>
     *
     * <code>string instrumentMeasurementId = 1;</code>
     */
    public com.google.protobuf.ByteString
        getInstrumentMeasurementIdBytes() {
      java.lang.Object ref = instrumentMeasurementId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        instrumentMeasurementId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FUSIONID_FIELD_NUMBER = 3;
    private volatile java.lang.Object fusionId_;
    /**
     * <pre>
     * The FusionId of the instrument that the data is being collected
     * </pre>
     *
     * <code>string fusionId = 3;</code>
     */
    public java.lang.String getFusionId() {
      java.lang.Object ref = fusionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fusionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The FusionId of the instrument that the data is being collected
     * </pre>
     *
     * <code>string fusionId = 3;</code>
     */
    public com.google.protobuf.ByteString
        getFusionIdBytes() {
      java.lang.Object ref = fusionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fusionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOCATIONID_FIELD_NUMBER = 4;
    private volatile java.lang.Object locationId_;
    /**
     * <pre>
     * Optional: The location where the data is being collected
     * </pre>
     *
     * <code>string locationId = 4;</code>
     */
    public java.lang.String getLocationId() {
      java.lang.Object ref = locationId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        locationId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optional: The location where the data is being collected
     * </pre>
     *
     * <code>string locationId = 4;</code>
     */
    public com.google.protobuf.ByteString
        getLocationIdBytes() {
      java.lang.Object ref = locationId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        locationId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMETERID_FIELD_NUMBER = 5;
    private int parameterId_;
    /**
     * <pre>
     * Required: The parameter related to the instrument measurments being collected
     * </pre>
     *
     * <code>uint32 parameterId = 5;</code>
     */
    public int getParameterId() {
      return parameterId_;
    }

    public static final int DISPLAYUNITID_FIELD_NUMBER = 6;
    private int displayUnitId_;
    /**
     * <pre>
     * The default display unit that the data will be rendered
     * </pre>
     *
     * <code>uint32 displayUnitId = 6;</code>
     */
    public int getDisplayUnitId() {
      return displayUnitId_;
    }

    public static final int ISVISIBLE_FIELD_NUMBER = 7;
    private boolean isVisible_;
    /**
     * <pre>
     * Soft delete of the Instrument Measurment Collection
     * </pre>
     *
     * <code>bool isVisible = 7;</code>
     */
    public boolean getIsVisible() {
      return isVisible_;
    }

    public static final int SCSENSORBINDING_FIELD_NUMBER = 8;
    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    public boolean hasScSensorBinding() {
      return bindingCase_ == 8;
    }
    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    public claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding getScSensorBinding() {
      if (bindingCase_ == 8) {
         return (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_;
      }
      return claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
    }
    /**
     * <pre>
     * For SC Instruments, how the SC Instrument is identified
     * </pre>
     *
     * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
     */
    public claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder getScSensorBindingOrBuilder() {
      if (bindingCase_ == 8) {
         return (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_;
      }
      return claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
    }

    public static final int MILLIAMPBINDING_FIELD_NUMBER = 9;
    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    public boolean hasMilliAmpBinding() {
      return bindingCase_ == 9;
    }
    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    public claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding getMilliAmpBinding() {
      if (bindingCase_ == 9) {
         return (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_;
      }
      return claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
    }
    /**
     * <pre>
     * For 4-20 mA input, how the inputs are mapped to instrument measurments
     * </pre>
     *
     * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
     */
    public claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder getMilliAmpBindingOrBuilder() {
      if (bindingCase_ == 9) {
         return (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_;
      }
      return claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
    }

    public static final int LIMITS_FIELD_NUMBER = 10;
    private java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit> limits_;
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    public java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit> getLimitsList() {
      return limits_;
    }
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    public java.util.List<? extends claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder> 
        getLimitsOrBuilderList() {
      return limits_;
    }
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    public int getLimitsCount() {
      return limits_.size();
    }
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    public claros.common.core.ClarosCommonCoreLimit.Limit getLimits(int index) {
      return limits_.get(index);
    }
    /**
     * <pre>
     * A collection of limits associated to the instrument measurements
     * </pre>
     *
     * <code>repeated .claros.common.core.Limit limits = 10;</code>
     */
    public claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder getLimitsOrBuilder(
        int index) {
      return limits_.get(index);
    }

    public static final int CREATEDBYID_FIELD_NUMBER = 11;
    private volatile java.lang.Object createdById_;
    /**
     * <pre>
     * Record Audit Fields
     * </pre>
     *
     * <code>string createdById = 11;</code>
     */
    public java.lang.String getCreatedById() {
      java.lang.Object ref = createdById_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        createdById_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Record Audit Fields
     * </pre>
     *
     * <code>string createdById = 11;</code>
     */
    public com.google.protobuf.ByteString
        getCreatedByIdBytes() {
      java.lang.Object ref = createdById_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        createdById_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CREATEDON_FIELD_NUMBER = 12;
    private claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime createdOn_;
    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    public boolean hasCreatedOn() {
      return createdOn_ != null;
    }
    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getCreatedOn() {
      return createdOn_ == null ? claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : createdOn_;
    }
    /**
     * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
     */
    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getCreatedOnOrBuilder() {
      return getCreatedOn();
    }

    public static final int MODIFIEDBYID_FIELD_NUMBER = 13;
    private volatile java.lang.Object modifiedById_;
    /**
     * <code>string modifiedById = 13;</code>
     */
    public java.lang.String getModifiedById() {
      java.lang.Object ref = modifiedById_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        modifiedById_ = s;
        return s;
      }
    }
    /**
     * <code>string modifiedById = 13;</code>
     */
    public com.google.protobuf.ByteString
        getModifiedByIdBytes() {
      java.lang.Object ref = modifiedById_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        modifiedById_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MODIFIEDON_FIELD_NUMBER = 14;
    private claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime modifiedOn_;
    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    public boolean hasModifiedOn() {
      return modifiedOn_ != null;
    }
    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getModifiedOn() {
      return modifiedOn_ == null ? claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : modifiedOn_;
    }
    /**
     * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
     */
    public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getModifiedOnOrBuilder() {
      return getModifiedOn();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getInstrumentMeasurementIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, instrumentMeasurementId_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (!getFusionIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fusionId_);
      }
      if (!getLocationIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, locationId_);
      }
      if (parameterId_ != 0) {
        output.writeUInt32(5, parameterId_);
      }
      if (displayUnitId_ != 0) {
        output.writeUInt32(6, displayUnitId_);
      }
      if (isVisible_ != false) {
        output.writeBool(7, isVisible_);
      }
      if (bindingCase_ == 8) {
        output.writeMessage(8, (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_);
      }
      if (bindingCase_ == 9) {
        output.writeMessage(9, (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_);
      }
      for (int i = 0; i < limits_.size(); i++) {
        output.writeMessage(10, limits_.get(i));
      }
      if (!getCreatedByIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, createdById_);
      }
      if (createdOn_ != null) {
        output.writeMessage(12, getCreatedOn());
      }
      if (!getModifiedByIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, modifiedById_);
      }
      if (modifiedOn_ != null) {
        output.writeMessage(14, getModifiedOn());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getInstrumentMeasurementIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, instrumentMeasurementId_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (!getFusionIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, fusionId_);
      }
      if (!getLocationIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, locationId_);
      }
      if (parameterId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, parameterId_);
      }
      if (displayUnitId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, displayUnitId_);
      }
      if (isVisible_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, isVisible_);
      }
      if (bindingCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_);
      }
      if (bindingCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_);
      }
      for (int i = 0; i < limits_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, limits_.get(i));
      }
      if (!getCreatedByIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, createdById_);
      }
      if (createdOn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getCreatedOn());
      }
      if (!getModifiedByIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, modifiedById_);
      }
      if (modifiedOn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getModifiedOn());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition)) {
        return super.equals(obj);
      }
      claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition other = (claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition) obj;

      if (!getInstrumentMeasurementId()
          .equals(other.getInstrumentMeasurementId())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getFusionId()
          .equals(other.getFusionId())) return false;
      if (!getLocationId()
          .equals(other.getLocationId())) return false;
      if (getParameterId()
          != other.getParameterId()) return false;
      if (getDisplayUnitId()
          != other.getDisplayUnitId()) return false;
      if (getIsVisible()
          != other.getIsVisible()) return false;
      if (!getLimitsList()
          .equals(other.getLimitsList())) return false;
      if (!getCreatedById()
          .equals(other.getCreatedById())) return false;
      if (hasCreatedOn() != other.hasCreatedOn()) return false;
      if (hasCreatedOn()) {
        if (!getCreatedOn()
            .equals(other.getCreatedOn())) return false;
      }
      if (!getModifiedById()
          .equals(other.getModifiedById())) return false;
      if (hasModifiedOn() != other.hasModifiedOn()) return false;
      if (hasModifiedOn()) {
        if (!getModifiedOn()
            .equals(other.getModifiedOn())) return false;
      }
      if (!getBindingCase().equals(other.getBindingCase())) return false;
      switch (bindingCase_) {
        case 8:
          if (!getScSensorBinding()
              .equals(other.getScSensorBinding())) return false;
          break;
        case 9:
          if (!getMilliAmpBinding()
              .equals(other.getMilliAmpBinding())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSTRUMENTMEASUREMENTID_FIELD_NUMBER;
      hash = (53 * hash) + getInstrumentMeasurementId().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + FUSIONID_FIELD_NUMBER;
      hash = (53 * hash) + getFusionId().hashCode();
      hash = (37 * hash) + LOCATIONID_FIELD_NUMBER;
      hash = (53 * hash) + getLocationId().hashCode();
      hash = (37 * hash) + PARAMETERID_FIELD_NUMBER;
      hash = (53 * hash) + getParameterId();
      hash = (37 * hash) + DISPLAYUNITID_FIELD_NUMBER;
      hash = (53 * hash) + getDisplayUnitId();
      hash = (37 * hash) + ISVISIBLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsVisible());
      if (getLimitsCount() > 0) {
        hash = (37 * hash) + LIMITS_FIELD_NUMBER;
        hash = (53 * hash) + getLimitsList().hashCode();
      }
      hash = (37 * hash) + CREATEDBYID_FIELD_NUMBER;
      hash = (53 * hash) + getCreatedById().hashCode();
      if (hasCreatedOn()) {
        hash = (37 * hash) + CREATEDON_FIELD_NUMBER;
        hash = (53 * hash) + getCreatedOn().hashCode();
      }
      hash = (37 * hash) + MODIFIEDBYID_FIELD_NUMBER;
      hash = (53 * hash) + getModifiedById().hashCode();
      if (hasModifiedOn()) {
        hash = (37 * hash) + MODIFIEDON_FIELD_NUMBER;
        hash = (53 * hash) + getModifiedOn().hashCode();
      }
      switch (bindingCase_) {
        case 8:
          hash = (37 * hash) + SCSENSORBINDING_FIELD_NUMBER;
          hash = (53 * hash) + getScSensorBinding().hashCode();
          break;
        case 9:
          hash = (37 * hash) + MILLIAMPBINDING_FIELD_NUMBER;
          hash = (53 * hash) + getMilliAmpBinding().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code claros.instrument.measurement.InstrumentMeasurementDefinition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:claros.instrument.measurement.InstrumentMeasurementDefinition)
        claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinitionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.class, claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.Builder.class);
      }

      // Construct using claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLimitsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        instrumentMeasurementId_ = "";

        name_ = "";

        fusionId_ = "";

        locationId_ = "";

        parameterId_ = 0;

        displayUnitId_ = 0;

        isVisible_ = false;

        if (limitsBuilder_ == null) {
          limits_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          limitsBuilder_.clear();
        }
        createdById_ = "";

        if (createdOnBuilder_ == null) {
          createdOn_ = null;
        } else {
          createdOn_ = null;
          createdOnBuilder_ = null;
        }
        modifiedById_ = "";

        if (modifiedOnBuilder_ == null) {
          modifiedOn_ = null;
        } else {
          modifiedOn_ = null;
          modifiedOnBuilder_ = null;
        }
        bindingCase_ = 0;
        binding_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor;
      }

      @java.lang.Override
      public claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition getDefaultInstanceForType() {
        return claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.getDefaultInstance();
      }

      @java.lang.Override
      public claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition build() {
        claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition buildPartial() {
        claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition result = new claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.instrumentMeasurementId_ = instrumentMeasurementId_;
        result.name_ = name_;
        result.fusionId_ = fusionId_;
        result.locationId_ = locationId_;
        result.parameterId_ = parameterId_;
        result.displayUnitId_ = displayUnitId_;
        result.isVisible_ = isVisible_;
        if (bindingCase_ == 8) {
          if (scSensorBindingBuilder_ == null) {
            result.binding_ = binding_;
          } else {
            result.binding_ = scSensorBindingBuilder_.build();
          }
        }
        if (bindingCase_ == 9) {
          if (milliAmpBindingBuilder_ == null) {
            result.binding_ = binding_;
          } else {
            result.binding_ = milliAmpBindingBuilder_.build();
          }
        }
        if (limitsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            limits_ = java.util.Collections.unmodifiableList(limits_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.limits_ = limits_;
        } else {
          result.limits_ = limitsBuilder_.build();
        }
        result.createdById_ = createdById_;
        if (createdOnBuilder_ == null) {
          result.createdOn_ = createdOn_;
        } else {
          result.createdOn_ = createdOnBuilder_.build();
        }
        result.modifiedById_ = modifiedById_;
        if (modifiedOnBuilder_ == null) {
          result.modifiedOn_ = modifiedOn_;
        } else {
          result.modifiedOn_ = modifiedOnBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bindingCase_ = bindingCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition) {
          return mergeFrom((claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition other) {
        if (other == claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition.getDefaultInstance()) return this;
        if (!other.getInstrumentMeasurementId().isEmpty()) {
          instrumentMeasurementId_ = other.instrumentMeasurementId_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getFusionId().isEmpty()) {
          fusionId_ = other.fusionId_;
          onChanged();
        }
        if (!other.getLocationId().isEmpty()) {
          locationId_ = other.locationId_;
          onChanged();
        }
        if (other.getParameterId() != 0) {
          setParameterId(other.getParameterId());
        }
        if (other.getDisplayUnitId() != 0) {
          setDisplayUnitId(other.getDisplayUnitId());
        }
        if (other.getIsVisible() != false) {
          setIsVisible(other.getIsVisible());
        }
        if (limitsBuilder_ == null) {
          if (!other.limits_.isEmpty()) {
            if (limits_.isEmpty()) {
              limits_ = other.limits_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureLimitsIsMutable();
              limits_.addAll(other.limits_);
            }
            onChanged();
          }
        } else {
          if (!other.limits_.isEmpty()) {
            if (limitsBuilder_.isEmpty()) {
              limitsBuilder_.dispose();
              limitsBuilder_ = null;
              limits_ = other.limits_;
              bitField0_ = (bitField0_ & ~0x00000200);
              limitsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLimitsFieldBuilder() : null;
            } else {
              limitsBuilder_.addAllMessages(other.limits_);
            }
          }
        }
        if (!other.getCreatedById().isEmpty()) {
          createdById_ = other.createdById_;
          onChanged();
        }
        if (other.hasCreatedOn()) {
          mergeCreatedOn(other.getCreatedOn());
        }
        if (!other.getModifiedById().isEmpty()) {
          modifiedById_ = other.modifiedById_;
          onChanged();
        }
        if (other.hasModifiedOn()) {
          mergeModifiedOn(other.getModifiedOn());
        }
        switch (other.getBindingCase()) {
          case SCSENSORBINDING: {
            mergeScSensorBinding(other.getScSensorBinding());
            break;
          }
          case MILLIAMPBINDING: {
            mergeMilliAmpBinding(other.getMilliAmpBinding());
            break;
          }
          case BINDING_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bindingCase_ = 0;
      private java.lang.Object binding_;
      public BindingCase
          getBindingCase() {
        return BindingCase.forNumber(
            bindingCase_);
      }

      public Builder clearBinding() {
        bindingCase_ = 0;
        binding_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object instrumentMeasurementId_ = "";
      /**
       * <pre>
       * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
       * </pre>
       *
       * <code>string instrumentMeasurementId = 1;</code>
       */
      public java.lang.String getInstrumentMeasurementId() {
        java.lang.Object ref = instrumentMeasurementId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          instrumentMeasurementId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
       * </pre>
       *
       * <code>string instrumentMeasurementId = 1;</code>
       */
      public com.google.protobuf.ByteString
          getInstrumentMeasurementIdBytes() {
        java.lang.Object ref = instrumentMeasurementId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          instrumentMeasurementId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
       * </pre>
       *
       * <code>string instrumentMeasurementId = 1;</code>
       */
      public Builder setInstrumentMeasurementId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        instrumentMeasurementId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
       * </pre>
       *
       * <code>string instrumentMeasurementId = 1;</code>
       */
      public Builder clearInstrumentMeasurementId() {
        
        instrumentMeasurementId_ = getDefaultInstance().getInstrumentMeasurementId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
       * </pre>
       *
       * <code>string instrumentMeasurementId = 1;</code>
       */
      public Builder setInstrumentMeasurementIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        instrumentMeasurementId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fusionId_ = "";
      /**
       * <pre>
       * The FusionId of the instrument that the data is being collected
       * </pre>
       *
       * <code>string fusionId = 3;</code>
       */
      public java.lang.String getFusionId() {
        java.lang.Object ref = fusionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fusionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The FusionId of the instrument that the data is being collected
       * </pre>
       *
       * <code>string fusionId = 3;</code>
       */
      public com.google.protobuf.ByteString
          getFusionIdBytes() {
        java.lang.Object ref = fusionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fusionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The FusionId of the instrument that the data is being collected
       * </pre>
       *
       * <code>string fusionId = 3;</code>
       */
      public Builder setFusionId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fusionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The FusionId of the instrument that the data is being collected
       * </pre>
       *
       * <code>string fusionId = 3;</code>
       */
      public Builder clearFusionId() {
        
        fusionId_ = getDefaultInstance().getFusionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The FusionId of the instrument that the data is being collected
       * </pre>
       *
       * <code>string fusionId = 3;</code>
       */
      public Builder setFusionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fusionId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object locationId_ = "";
      /**
       * <pre>
       * Optional: The location where the data is being collected
       * </pre>
       *
       * <code>string locationId = 4;</code>
       */
      public java.lang.String getLocationId() {
        java.lang.Object ref = locationId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          locationId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optional: The location where the data is being collected
       * </pre>
       *
       * <code>string locationId = 4;</code>
       */
      public com.google.protobuf.ByteString
          getLocationIdBytes() {
        java.lang.Object ref = locationId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          locationId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optional: The location where the data is being collected
       * </pre>
       *
       * <code>string locationId = 4;</code>
       */
      public Builder setLocationId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        locationId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional: The location where the data is being collected
       * </pre>
       *
       * <code>string locationId = 4;</code>
       */
      public Builder clearLocationId() {
        
        locationId_ = getDefaultInstance().getLocationId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional: The location where the data is being collected
       * </pre>
       *
       * <code>string locationId = 4;</code>
       */
      public Builder setLocationIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        locationId_ = value;
        onChanged();
        return this;
      }

      private int parameterId_ ;
      /**
       * <pre>
       * Required: The parameter related to the instrument measurments being collected
       * </pre>
       *
       * <code>uint32 parameterId = 5;</code>
       */
      public int getParameterId() {
        return parameterId_;
      }
      /**
       * <pre>
       * Required: The parameter related to the instrument measurments being collected
       * </pre>
       *
       * <code>uint32 parameterId = 5;</code>
       */
      public Builder setParameterId(int value) {
        
        parameterId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required: The parameter related to the instrument measurments being collected
       * </pre>
       *
       * <code>uint32 parameterId = 5;</code>
       */
      public Builder clearParameterId() {
        
        parameterId_ = 0;
        onChanged();
        return this;
      }

      private int displayUnitId_ ;
      /**
       * <pre>
       * The default display unit that the data will be rendered
       * </pre>
       *
       * <code>uint32 displayUnitId = 6;</code>
       */
      public int getDisplayUnitId() {
        return displayUnitId_;
      }
      /**
       * <pre>
       * The default display unit that the data will be rendered
       * </pre>
       *
       * <code>uint32 displayUnitId = 6;</code>
       */
      public Builder setDisplayUnitId(int value) {
        
        displayUnitId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The default display unit that the data will be rendered
       * </pre>
       *
       * <code>uint32 displayUnitId = 6;</code>
       */
      public Builder clearDisplayUnitId() {
        
        displayUnitId_ = 0;
        onChanged();
        return this;
      }

      private boolean isVisible_ ;
      /**
       * <pre>
       * Soft delete of the Instrument Measurment Collection
       * </pre>
       *
       * <code>bool isVisible = 7;</code>
       */
      public boolean getIsVisible() {
        return isVisible_;
      }
      /**
       * <pre>
       * Soft delete of the Instrument Measurment Collection
       * </pre>
       *
       * <code>bool isVisible = 7;</code>
       */
      public Builder setIsVisible(boolean value) {
        
        isVisible_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Soft delete of the Instrument Measurment Collection
       * </pre>
       *
       * <code>bool isVisible = 7;</code>
       */
      public Builder clearIsVisible() {
        
        isVisible_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder> scSensorBindingBuilder_;
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public boolean hasScSensorBinding() {
        return bindingCase_ == 8;
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding getScSensorBinding() {
        if (scSensorBindingBuilder_ == null) {
          if (bindingCase_ == 8) {
            return (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_;
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
        } else {
          if (bindingCase_ == 8) {
            return scSensorBindingBuilder_.getMessage();
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public Builder setScSensorBinding(claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding value) {
        if (scSensorBindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          binding_ = value;
          onChanged();
        } else {
          scSensorBindingBuilder_.setMessage(value);
        }
        bindingCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public Builder setScSensorBinding(
          claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder builderForValue) {
        if (scSensorBindingBuilder_ == null) {
          binding_ = builderForValue.build();
          onChanged();
        } else {
          scSensorBindingBuilder_.setMessage(builderForValue.build());
        }
        bindingCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public Builder mergeScSensorBinding(claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding value) {
        if (scSensorBindingBuilder_ == null) {
          if (bindingCase_ == 8 &&
              binding_ != claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance()) {
            binding_ = claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.newBuilder((claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_)
                .mergeFrom(value).buildPartial();
          } else {
            binding_ = value;
          }
          onChanged();
        } else {
          if (bindingCase_ == 8) {
            scSensorBindingBuilder_.mergeFrom(value);
          }
          scSensorBindingBuilder_.setMessage(value);
        }
        bindingCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public Builder clearScSensorBinding() {
        if (scSensorBindingBuilder_ == null) {
          if (bindingCase_ == 8) {
            bindingCase_ = 0;
            binding_ = null;
            onChanged();
          }
        } else {
          if (bindingCase_ == 8) {
            bindingCase_ = 0;
            binding_ = null;
          }
          scSensorBindingBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder getScSensorBindingBuilder() {
        return getScSensorBindingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder getScSensorBindingOrBuilder() {
        if ((bindingCase_ == 8) && (scSensorBindingBuilder_ != null)) {
          return scSensorBindingBuilder_.getMessageOrBuilder();
        } else {
          if (bindingCase_ == 8) {
            return (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_;
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * For SC Instruments, how the SC Instrument is identified
       * </pre>
       *
       * <code>.claros.instrument.measurement.SCSensorBinding scSensorBinding = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder> 
          getScSensorBindingFieldBuilder() {
        if (scSensorBindingBuilder_ == null) {
          if (!(bindingCase_ == 8)) {
            binding_ = claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.getDefaultInstance();
          }
          scSensorBindingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBindingOrBuilder>(
                  (claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.SCSensorBinding) binding_,
                  getParentForChildren(),
                  isClean());
          binding_ = null;
        }
        bindingCase_ = 8;
        onChanged();;
        return scSensorBindingBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder> milliAmpBindingBuilder_;
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public boolean hasMilliAmpBinding() {
        return bindingCase_ == 9;
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding getMilliAmpBinding() {
        if (milliAmpBindingBuilder_ == null) {
          if (bindingCase_ == 9) {
            return (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_;
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
        } else {
          if (bindingCase_ == 9) {
            return milliAmpBindingBuilder_.getMessage();
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public Builder setMilliAmpBinding(claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding value) {
        if (milliAmpBindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          binding_ = value;
          onChanged();
        } else {
          milliAmpBindingBuilder_.setMessage(value);
        }
        bindingCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public Builder setMilliAmpBinding(
          claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder builderForValue) {
        if (milliAmpBindingBuilder_ == null) {
          binding_ = builderForValue.build();
          onChanged();
        } else {
          milliAmpBindingBuilder_.setMessage(builderForValue.build());
        }
        bindingCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public Builder mergeMilliAmpBinding(claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding value) {
        if (milliAmpBindingBuilder_ == null) {
          if (bindingCase_ == 9 &&
              binding_ != claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance()) {
            binding_ = claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.newBuilder((claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_)
                .mergeFrom(value).buildPartial();
          } else {
            binding_ = value;
          }
          onChanged();
        } else {
          if (bindingCase_ == 9) {
            milliAmpBindingBuilder_.mergeFrom(value);
          }
          milliAmpBindingBuilder_.setMessage(value);
        }
        bindingCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public Builder clearMilliAmpBinding() {
        if (milliAmpBindingBuilder_ == null) {
          if (bindingCase_ == 9) {
            bindingCase_ = 0;
            binding_ = null;
            onChanged();
          }
        } else {
          if (bindingCase_ == 9) {
            bindingCase_ = 0;
            binding_ = null;
          }
          milliAmpBindingBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder getMilliAmpBindingBuilder() {
        return getMilliAmpBindingFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      public claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder getMilliAmpBindingOrBuilder() {
        if ((bindingCase_ == 9) && (milliAmpBindingBuilder_ != null)) {
          return milliAmpBindingBuilder_.getMessageOrBuilder();
        } else {
          if (bindingCase_ == 9) {
            return (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_;
          }
          return claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * For 4-20 mA input, how the inputs are mapped to instrument measurments
       * </pre>
       *
       * <code>.claros.instrument.measurement.MilliAmpBinding milliAmpBinding = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder> 
          getMilliAmpBindingFieldBuilder() {
        if (milliAmpBindingBuilder_ == null) {
          if (!(bindingCase_ == 9)) {
            binding_ = claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.getDefaultInstance();
          }
          milliAmpBindingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding.Builder, claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBindingOrBuilder>(
                  (claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.MilliAmpBinding) binding_,
                  getParentForChildren(),
                  isClean());
          binding_ = null;
        }
        bindingCase_ = 9;
        onChanged();;
        return milliAmpBindingBuilder_;
      }

      private java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit> limits_ =
        java.util.Collections.emptyList();
      private void ensureLimitsIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          limits_ = new java.util.ArrayList<claros.common.core.ClarosCommonCoreLimit.Limit>(limits_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.common.core.ClarosCommonCoreLimit.Limit, claros.common.core.ClarosCommonCoreLimit.Limit.Builder, claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder> limitsBuilder_;

      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit> getLimitsList() {
        if (limitsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(limits_);
        } else {
          return limitsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public int getLimitsCount() {
        if (limitsBuilder_ == null) {
          return limits_.size();
        } else {
          return limitsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public claros.common.core.ClarosCommonCoreLimit.Limit getLimits(int index) {
        if (limitsBuilder_ == null) {
          return limits_.get(index);
        } else {
          return limitsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder setLimits(
          int index, claros.common.core.ClarosCommonCoreLimit.Limit value) {
        if (limitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitsIsMutable();
          limits_.set(index, value);
          onChanged();
        } else {
          limitsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder setLimits(
          int index, claros.common.core.ClarosCommonCoreLimit.Limit.Builder builderForValue) {
        if (limitsBuilder_ == null) {
          ensureLimitsIsMutable();
          limits_.set(index, builderForValue.build());
          onChanged();
        } else {
          limitsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder addLimits(claros.common.core.ClarosCommonCoreLimit.Limit value) {
        if (limitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitsIsMutable();
          limits_.add(value);
          onChanged();
        } else {
          limitsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder addLimits(
          int index, claros.common.core.ClarosCommonCoreLimit.Limit value) {
        if (limitsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLimitsIsMutable();
          limits_.add(index, value);
          onChanged();
        } else {
          limitsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder addLimits(
          claros.common.core.ClarosCommonCoreLimit.Limit.Builder builderForValue) {
        if (limitsBuilder_ == null) {
          ensureLimitsIsMutable();
          limits_.add(builderForValue.build());
          onChanged();
        } else {
          limitsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder addLimits(
          int index, claros.common.core.ClarosCommonCoreLimit.Limit.Builder builderForValue) {
        if (limitsBuilder_ == null) {
          ensureLimitsIsMutable();
          limits_.add(index, builderForValue.build());
          onChanged();
        } else {
          limitsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder addAllLimits(
          java.lang.Iterable<? extends claros.common.core.ClarosCommonCoreLimit.Limit> values) {
        if (limitsBuilder_ == null) {
          ensureLimitsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, limits_);
          onChanged();
        } else {
          limitsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder clearLimits() {
        if (limitsBuilder_ == null) {
          limits_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          limitsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public Builder removeLimits(int index) {
        if (limitsBuilder_ == null) {
          ensureLimitsIsMutable();
          limits_.remove(index);
          onChanged();
        } else {
          limitsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public claros.common.core.ClarosCommonCoreLimit.Limit.Builder getLimitsBuilder(
          int index) {
        return getLimitsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder getLimitsOrBuilder(
          int index) {
        if (limitsBuilder_ == null) {
          return limits_.get(index);  } else {
          return limitsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public java.util.List<? extends claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder> 
           getLimitsOrBuilderList() {
        if (limitsBuilder_ != null) {
          return limitsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(limits_);
        }
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public claros.common.core.ClarosCommonCoreLimit.Limit.Builder addLimitsBuilder() {
        return getLimitsFieldBuilder().addBuilder(
            claros.common.core.ClarosCommonCoreLimit.Limit.getDefaultInstance());
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public claros.common.core.ClarosCommonCoreLimit.Limit.Builder addLimitsBuilder(
          int index) {
        return getLimitsFieldBuilder().addBuilder(
            index, claros.common.core.ClarosCommonCoreLimit.Limit.getDefaultInstance());
      }
      /**
       * <pre>
       * A collection of limits associated to the instrument measurements
       * </pre>
       *
       * <code>repeated .claros.common.core.Limit limits = 10;</code>
       */
      public java.util.List<claros.common.core.ClarosCommonCoreLimit.Limit.Builder> 
           getLimitsBuilderList() {
        return getLimitsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          claros.common.core.ClarosCommonCoreLimit.Limit, claros.common.core.ClarosCommonCoreLimit.Limit.Builder, claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder> 
          getLimitsFieldBuilder() {
        if (limitsBuilder_ == null) {
          limitsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              claros.common.core.ClarosCommonCoreLimit.Limit, claros.common.core.ClarosCommonCoreLimit.Limit.Builder, claros.common.core.ClarosCommonCoreLimit.LimitOrBuilder>(
                  limits_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          limits_ = null;
        }
        return limitsBuilder_;
      }

      private java.lang.Object createdById_ = "";
      /**
       * <pre>
       * Record Audit Fields
       * </pre>
       *
       * <code>string createdById = 11;</code>
       */
      public java.lang.String getCreatedById() {
        java.lang.Object ref = createdById_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          createdById_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Record Audit Fields
       * </pre>
       *
       * <code>string createdById = 11;</code>
       */
      public com.google.protobuf.ByteString
          getCreatedByIdBytes() {
        java.lang.Object ref = createdById_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          createdById_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Record Audit Fields
       * </pre>
       *
       * <code>string createdById = 11;</code>
       */
      public Builder setCreatedById(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        createdById_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Record Audit Fields
       * </pre>
       *
       * <code>string createdById = 11;</code>
       */
      public Builder clearCreatedById() {
        
        createdById_ = getDefaultInstance().getCreatedById();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Record Audit Fields
       * </pre>
       *
       * <code>string createdById = 11;</code>
       */
      public Builder setCreatedByIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        createdById_ = value;
        onChanged();
        return this;
      }

      private claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime createdOn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder> createdOnBuilder_;
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public boolean hasCreatedOn() {
        return createdOnBuilder_ != null || createdOn_ != null;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getCreatedOn() {
        if (createdOnBuilder_ == null) {
          return createdOn_ == null ? claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : createdOn_;
        } else {
          return createdOnBuilder_.getMessage();
        }
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public Builder setCreatedOn(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime value) {
        if (createdOnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          createdOn_ = value;
          onChanged();
        } else {
          createdOnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public Builder setCreatedOn(
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder builderForValue) {
        if (createdOnBuilder_ == null) {
          createdOn_ = builderForValue.build();
          onChanged();
        } else {
          createdOnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public Builder mergeCreatedOn(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime value) {
        if (createdOnBuilder_ == null) {
          if (createdOn_ != null) {
            createdOn_ =
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.newBuilder(createdOn_).mergeFrom(value).buildPartial();
          } else {
            createdOn_ = value;
          }
          onChanged();
        } else {
          createdOnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public Builder clearCreatedOn() {
        if (createdOnBuilder_ == null) {
          createdOn_ = null;
          onChanged();
        } else {
          createdOn_ = null;
          createdOnBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder getCreatedOnBuilder() {
        
        onChanged();
        return getCreatedOnFieldBuilder().getBuilder();
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getCreatedOnOrBuilder() {
        if (createdOnBuilder_ != null) {
          return createdOnBuilder_.getMessageOrBuilder();
        } else {
          return createdOn_ == null ?
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : createdOn_;
        }
      }
      /**
       * <code>.claros.common.core.ClarosDateTime createdOn = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder> 
          getCreatedOnFieldBuilder() {
        if (createdOnBuilder_ == null) {
          createdOnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder>(
                  getCreatedOn(),
                  getParentForChildren(),
                  isClean());
          createdOn_ = null;
        }
        return createdOnBuilder_;
      }

      private java.lang.Object modifiedById_ = "";
      /**
       * <code>string modifiedById = 13;</code>
       */
      public java.lang.String getModifiedById() {
        java.lang.Object ref = modifiedById_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          modifiedById_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string modifiedById = 13;</code>
       */
      public com.google.protobuf.ByteString
          getModifiedByIdBytes() {
        java.lang.Object ref = modifiedById_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          modifiedById_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string modifiedById = 13;</code>
       */
      public Builder setModifiedById(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        modifiedById_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string modifiedById = 13;</code>
       */
      public Builder clearModifiedById() {
        
        modifiedById_ = getDefaultInstance().getModifiedById();
        onChanged();
        return this;
      }
      /**
       * <code>string modifiedById = 13;</code>
       */
      public Builder setModifiedByIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        modifiedById_ = value;
        onChanged();
        return this;
      }

      private claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime modifiedOn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder> modifiedOnBuilder_;
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public boolean hasModifiedOn() {
        return modifiedOnBuilder_ != null || modifiedOn_ != null;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime getModifiedOn() {
        if (modifiedOnBuilder_ == null) {
          return modifiedOn_ == null ? claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : modifiedOn_;
        } else {
          return modifiedOnBuilder_.getMessage();
        }
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public Builder setModifiedOn(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime value) {
        if (modifiedOnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modifiedOn_ = value;
          onChanged();
        } else {
          modifiedOnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public Builder setModifiedOn(
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder builderForValue) {
        if (modifiedOnBuilder_ == null) {
          modifiedOn_ = builderForValue.build();
          onChanged();
        } else {
          modifiedOnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public Builder mergeModifiedOn(claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime value) {
        if (modifiedOnBuilder_ == null) {
          if (modifiedOn_ != null) {
            modifiedOn_ =
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.newBuilder(modifiedOn_).mergeFrom(value).buildPartial();
          } else {
            modifiedOn_ = value;
          }
          onChanged();
        } else {
          modifiedOnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public Builder clearModifiedOn() {
        if (modifiedOnBuilder_ == null) {
          modifiedOn_ = null;
          onChanged();
        } else {
          modifiedOn_ = null;
          modifiedOnBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder getModifiedOnBuilder() {
        
        onChanged();
        return getModifiedOnFieldBuilder().getBuilder();
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      public claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder getModifiedOnOrBuilder() {
        if (modifiedOnBuilder_ != null) {
          return modifiedOnBuilder_.getMessageOrBuilder();
        } else {
          return modifiedOn_ == null ?
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.getDefaultInstance() : modifiedOn_;
        }
      }
      /**
       * <code>.claros.common.core.ClarosDateTime modifiedOn = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder> 
          getModifiedOnFieldBuilder() {
        if (modifiedOnBuilder_ == null) {
          modifiedOnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTime.Builder, claros.common.core.ClarosCommonCoreClarosdatetime.ClarosDateTimeOrBuilder>(
                  getModifiedOn(),
                  getParentForChildren(),
                  isClean());
          modifiedOn_ = null;
        }
        return modifiedOnBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:claros.instrument.measurement.InstrumentMeasurementDefinition)
    }

    // @@protoc_insertion_point(class_scope:claros.instrument.measurement.InstrumentMeasurementDefinition)
    private static final claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition();
    }

    public static claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstrumentMeasurementDefinition>
        PARSER = new com.google.protobuf.AbstractParser<InstrumentMeasurementDefinition>() {
      @java.lang.Override
      public InstrumentMeasurementDefinition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstrumentMeasurementDefinition(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstrumentMeasurementDefinition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstrumentMeasurementDefinition> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public claros.instrument.measurement.ClarosInstrumentMeasurementDefinition.InstrumentMeasurementDefinition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n.claros_instrument_measurement_definiti" +
      "on.proto\022\035claros.instrument.measurement\032" +
      "\'claros_common_core_clarosdatetime.proto" +
      "\0324claros_instrument_measurement_milliamp" +
      "_binding.proto\0324claros_instrument_measur" +
      "ement_scsensor_binding.proto\032\036claros_com" +
      "mon_core_limit.proto\"\233\004\n\037InstrumentMeasu" +
      "rementDefinition\022\037\n\027instrumentMeasuremen" +
      "tId\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010fusionId\030\003 \001(" +
      "\t\022\022\n\nlocationId\030\004 \001(\t\022\023\n\013parameterId\030\005 \001" +
      "(\r\022\025\n\rdisplayUnitId\030\006 \001(\r\022\021\n\tisVisible\030\007" +
      " \001(\010\022I\n\017scSensorBinding\030\010 \001(\0132..claros.i" +
      "nstrument.measurement.SCSensorBindingH\000\022" +
      "I\n\017milliAmpBinding\030\t \001(\0132..claros.instru" +
      "ment.measurement.MilliAmpBindingH\000\022)\n\006li" +
      "mits\030\n \003(\0132\031.claros.common.core.Limit\022\023\n" +
      "\013createdById\030\013 \001(\t\0225\n\tcreatedOn\030\014 \001(\0132\"." +
      "claros.common.core.ClarosDateTime\022\024\n\014mod" +
      "ifiedById\030\r \001(\t\0226\n\nmodifiedOn\030\016 \001(\0132\".cl" +
      "aros.common.core.ClarosDateTimeB\t\n\007bindi" +
      "ngb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          claros.common.core.ClarosCommonCoreClarosdatetime.getDescriptor(),
          claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.getDescriptor(),
          claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.getDescriptor(),
          claros.common.core.ClarosCommonCoreLimit.getDescriptor(),
        }, assigner);
    internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_claros_instrument_measurement_InstrumentMeasurementDefinition_descriptor,
        new java.lang.String[] { "InstrumentMeasurementId", "Name", "FusionId", "LocationId", "ParameterId", "DisplayUnitId", "IsVisible", "ScSensorBinding", "MilliAmpBinding", "Limits", "CreatedById", "CreatedOn", "ModifiedById", "ModifiedOn", "Binding", });
    claros.common.core.ClarosCommonCoreClarosdatetime.getDescriptor();
    claros.instrument.measurement.ClarosInstrumentMeasurementMilliampBinding.getDescriptor();
    claros.instrument.measurement.ClarosInstrumentMeasurementScsensorBinding.getDescriptor();
    claros.common.core.ClarosCommonCoreLimit.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
