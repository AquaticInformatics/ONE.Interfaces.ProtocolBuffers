// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_instrument_measurement_definition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Claros.Instrument.Measurement {

  /// <summary>Holder for reflection information generated from claros_instrument_measurement_definition.proto</summary>
  public static partial class ClarosInstrumentMeasurementDefinitionReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_instrument_measurement_definition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosInstrumentMeasurementDefinitionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5jbGFyb3NfaW5zdHJ1bWVudF9tZWFzdXJlbWVudF9kZWZpbml0aW9uLnBy",
            "b3RvEh1jbGFyb3MuaW5zdHJ1bWVudC5tZWFzdXJlbWVudBonY2xhcm9zX2Nv",
            "bW1vbl9jb3JlX2NsYXJvc2RhdGV0aW1lLnByb3RvGjRjbGFyb3NfaW5zdHJ1",
            "bWVudF9tZWFzdXJlbWVudF9taWxsaWFtcF9iaW5kaW5nLnByb3RvGjRjbGFy",
            "b3NfaW5zdHJ1bWVudF9tZWFzdXJlbWVudF9zY3NlbnNvcl9iaW5kaW5nLnBy",
            "b3RvGh5jbGFyb3NfY29tbW9uX2NvcmVfbGltaXQucHJvdG8imwQKH0luc3Ry",
            "dW1lbnRNZWFzdXJlbWVudERlZmluaXRpb24SHwoXaW5zdHJ1bWVudE1lYXN1",
            "cmVtZW50SWQYASABKAkSDAoEbmFtZRgCIAEoCRIQCghmdXNpb25JZBgDIAEo",
            "CRISCgpsb2NhdGlvbklkGAQgASgJEhMKC3BhcmFtZXRlcklkGAUgASgNEhUK",
            "DWRpc3BsYXlVbml0SWQYBiABKA0SEQoJaXNWaXNpYmxlGAcgASgIEkkKD3Nj",
            "U2Vuc29yQmluZGluZxgIIAEoCzIuLmNsYXJvcy5pbnN0cnVtZW50Lm1lYXN1",
            "cmVtZW50LlNDU2Vuc29yQmluZGluZ0gAEkkKD21pbGxpQW1wQmluZGluZxgJ",
            "IAEoCzIuLmNsYXJvcy5pbnN0cnVtZW50Lm1lYXN1cmVtZW50Lk1pbGxpQW1w",
            "QmluZGluZ0gAEikKBmxpbWl0cxgKIAMoCzIZLmNsYXJvcy5jb21tb24uY29y",
            "ZS5MaW1pdBITCgtjcmVhdGVkQnlJZBgLIAEoCRI1CgljcmVhdGVkT24YDCAB",
            "KAsyIi5jbGFyb3MuY29tbW9uLmNvcmUuQ2xhcm9zRGF0ZVRpbWUSFAoMbW9k",
            "aWZpZWRCeUlkGA0gASgJEjYKCm1vZGlmaWVkT24YDiABKAsyIi5jbGFyb3Mu",
            "Y29tbW9uLmNvcmUuQ2xhcm9zRGF0ZVRpbWVCCQoHYmluZGluZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Claros.Common.Core.ClarosCommonCoreClarosdatetimeReflection.Descriptor, global::Claros.Instrument.Measurement.ClarosInstrumentMeasurementMilliampBindingReflection.Descriptor, global::Claros.Instrument.Measurement.ClarosInstrumentMeasurementScsensorBindingReflection.Descriptor, global::Claros.Common.Core.ClarosCommonCoreLimitReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Claros.Instrument.Measurement.InstrumentMeasurementDefinition), global::Claros.Instrument.Measurement.InstrumentMeasurementDefinition.Parser, new[]{ "InstrumentMeasurementId", "Name", "FusionId", "LocationId", "ParameterId", "DisplayUnitId", "IsVisible", "ScSensorBinding", "MilliAmpBinding", "Limits", "CreatedById", "CreatedOn", "ModifiedById", "ModifiedOn" }, new[]{ "Binding" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InstrumentMeasurementDefinition : pb::IMessage<InstrumentMeasurementDefinition> {
    private static readonly pb::MessageParser<InstrumentMeasurementDefinition> _parser = new pb::MessageParser<InstrumentMeasurementDefinition>(() => new InstrumentMeasurementDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentMeasurementDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Claros.Instrument.Measurement.ClarosInstrumentMeasurementDefinitionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementDefinition(InstrumentMeasurementDefinition other) : this() {
      instrumentMeasurementId_ = other.instrumentMeasurementId_;
      name_ = other.name_;
      fusionId_ = other.fusionId_;
      locationId_ = other.locationId_;
      parameterId_ = other.parameterId_;
      displayUnitId_ = other.displayUnitId_;
      isVisible_ = other.isVisible_;
      limits_ = other.limits_.Clone();
      createdById_ = other.createdById_;
      createdOn_ = other.createdOn_ != null ? other.createdOn_.Clone() : null;
      modifiedById_ = other.modifiedById_;
      modifiedOn_ = other.modifiedOn_ != null ? other.modifiedOn_.Clone() : null;
      switch (other.BindingCase) {
        case BindingOneofCase.ScSensorBinding:
          ScSensorBinding = other.ScSensorBinding.Clone();
          break;
        case BindingOneofCase.MilliAmpBinding:
          MilliAmpBinding = other.MilliAmpBinding.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMeasurementDefinition Clone() {
      return new InstrumentMeasurementDefinition(this);
    }

    /// <summary>Field number for the "instrumentMeasurementId" field.</summary>
    public const int InstrumentMeasurementIdFieldNumber = 1;
    private string instrumentMeasurementId_ = "";
    /// <summary>
    /// This is nullable.  In the case of Instrument Data this would be null until it reaches Claros.Instrument.Measurement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentMeasurementId {
      get { return instrumentMeasurementId_; }
      set {
        instrumentMeasurementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// The name of the collection of instrument measurmenets.  There is a good chance this correlates to the parameter name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fusionId" field.</summary>
    public const int FusionIdFieldNumber = 3;
    private string fusionId_ = "";
    /// <summary>
    /// The FusionId of the instrument that the data is being collected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FusionId {
      get { return fusionId_; }
      set {
        fusionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "locationId" field.</summary>
    public const int LocationIdFieldNumber = 4;
    private string locationId_ = "";
    /// <summary>
    /// Optional: The location where the data is being collected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationId {
      get { return locationId_; }
      set {
        locationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameterId" field.</summary>
    public const int ParameterIdFieldNumber = 5;
    private uint parameterId_;
    /// <summary>
    /// Required: The parameter related to the instrument measurments being collected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ParameterId {
      get { return parameterId_; }
      set {
        parameterId_ = value;
      }
    }

    /// <summary>Field number for the "displayUnitId" field.</summary>
    public const int DisplayUnitIdFieldNumber = 6;
    private uint displayUnitId_;
    /// <summary>
    /// The default display unit that the data will be rendered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisplayUnitId {
      get { return displayUnitId_; }
      set {
        displayUnitId_ = value;
      }
    }

    /// <summary>Field number for the "isVisible" field.</summary>
    public const int IsVisibleFieldNumber = 7;
    private bool isVisible_;
    /// <summary>
    /// Soft delete of the Instrument Measurment Collection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVisible {
      get { return isVisible_; }
      set {
        isVisible_ = value;
      }
    }

    /// <summary>Field number for the "scSensorBinding" field.</summary>
    public const int ScSensorBindingFieldNumber = 8;
    /// <summary>
    /// For SC Instruments, how the SC Instrument is identified
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Instrument.Measurement.SCSensorBinding ScSensorBinding {
      get { return bindingCase_ == BindingOneofCase.ScSensorBinding ? (global::Claros.Instrument.Measurement.SCSensorBinding) binding_ : null; }
      set {
        binding_ = value;
        bindingCase_ = value == null ? BindingOneofCase.None : BindingOneofCase.ScSensorBinding;
      }
    }

    /// <summary>Field number for the "milliAmpBinding" field.</summary>
    public const int MilliAmpBindingFieldNumber = 9;
    /// <summary>
    /// For 4-20 mA input, how the inputs are mapped to instrument measurments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Instrument.Measurement.MilliAmpBinding MilliAmpBinding {
      get { return bindingCase_ == BindingOneofCase.MilliAmpBinding ? (global::Claros.Instrument.Measurement.MilliAmpBinding) binding_ : null; }
      set {
        binding_ = value;
        bindingCase_ = value == null ? BindingOneofCase.None : BindingOneofCase.MilliAmpBinding;
      }
    }

    /// <summary>Field number for the "limits" field.</summary>
    public const int LimitsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Claros.Common.Core.Limit> _repeated_limits_codec
        = pb::FieldCodec.ForMessage(82, global::Claros.Common.Core.Limit.Parser);
    private readonly pbc::RepeatedField<global::Claros.Common.Core.Limit> limits_ = new pbc::RepeatedField<global::Claros.Common.Core.Limit>();
    /// <summary>
    /// A collection of limits associated to the instrument measurements
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Claros.Common.Core.Limit> Limits {
      get { return limits_; }
    }

    /// <summary>Field number for the "createdById" field.</summary>
    public const int CreatedByIdFieldNumber = 11;
    private string createdById_ = "";
    /// <summary>
    /// Record Audit Fields
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedById {
      get { return createdById_; }
      set {
        createdById_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createdOn" field.</summary>
    public const int CreatedOnFieldNumber = 12;
    private global::Claros.Common.Core.ClarosDateTime createdOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Common.Core.ClarosDateTime CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = value;
      }
    }

    /// <summary>Field number for the "modifiedById" field.</summary>
    public const int ModifiedByIdFieldNumber = 13;
    private string modifiedById_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifiedById {
      get { return modifiedById_; }
      set {
        modifiedById_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modifiedOn" field.</summary>
    public const int ModifiedOnFieldNumber = 14;
    private global::Claros.Common.Core.ClarosDateTime modifiedOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Common.Core.ClarosDateTime ModifiedOn {
      get { return modifiedOn_; }
      set {
        modifiedOn_ = value;
      }
    }

    private object binding_;
    /// <summary>Enum of possible cases for the "binding" oneof.</summary>
    public enum BindingOneofCase {
      None = 0,
      ScSensorBinding = 8,
      MilliAmpBinding = 9,
    }
    private BindingOneofCase bindingCase_ = BindingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BindingOneofCase BindingCase {
      get { return bindingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBinding() {
      bindingCase_ = BindingOneofCase.None;
      binding_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentMeasurementDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentMeasurementDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstrumentMeasurementId != other.InstrumentMeasurementId) return false;
      if (Name != other.Name) return false;
      if (FusionId != other.FusionId) return false;
      if (LocationId != other.LocationId) return false;
      if (ParameterId != other.ParameterId) return false;
      if (DisplayUnitId != other.DisplayUnitId) return false;
      if (IsVisible != other.IsVisible) return false;
      if (!object.Equals(ScSensorBinding, other.ScSensorBinding)) return false;
      if (!object.Equals(MilliAmpBinding, other.MilliAmpBinding)) return false;
      if(!limits_.Equals(other.limits_)) return false;
      if (CreatedById != other.CreatedById) return false;
      if (!object.Equals(CreatedOn, other.CreatedOn)) return false;
      if (ModifiedById != other.ModifiedById) return false;
      if (!object.Equals(ModifiedOn, other.ModifiedOn)) return false;
      if (BindingCase != other.BindingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstrumentMeasurementId.Length != 0) hash ^= InstrumentMeasurementId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FusionId.Length != 0) hash ^= FusionId.GetHashCode();
      if (LocationId.Length != 0) hash ^= LocationId.GetHashCode();
      if (ParameterId != 0) hash ^= ParameterId.GetHashCode();
      if (DisplayUnitId != 0) hash ^= DisplayUnitId.GetHashCode();
      if (IsVisible != false) hash ^= IsVisible.GetHashCode();
      if (bindingCase_ == BindingOneofCase.ScSensorBinding) hash ^= ScSensorBinding.GetHashCode();
      if (bindingCase_ == BindingOneofCase.MilliAmpBinding) hash ^= MilliAmpBinding.GetHashCode();
      hash ^= limits_.GetHashCode();
      if (CreatedById.Length != 0) hash ^= CreatedById.GetHashCode();
      if (createdOn_ != null) hash ^= CreatedOn.GetHashCode();
      if (ModifiedById.Length != 0) hash ^= ModifiedById.GetHashCode();
      if (modifiedOn_ != null) hash ^= ModifiedOn.GetHashCode();
      hash ^= (int) bindingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstrumentMeasurementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstrumentMeasurementId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FusionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FusionId);
      }
      if (LocationId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LocationId);
      }
      if (ParameterId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ParameterId);
      }
      if (DisplayUnitId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DisplayUnitId);
      }
      if (IsVisible != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVisible);
      }
      if (bindingCase_ == BindingOneofCase.ScSensorBinding) {
        output.WriteRawTag(66);
        output.WriteMessage(ScSensorBinding);
      }
      if (bindingCase_ == BindingOneofCase.MilliAmpBinding) {
        output.WriteRawTag(74);
        output.WriteMessage(MilliAmpBinding);
      }
      limits_.WriteTo(output, _repeated_limits_codec);
      if (CreatedById.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CreatedById);
      }
      if (createdOn_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(CreatedOn);
      }
      if (ModifiedById.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ModifiedById);
      }
      if (modifiedOn_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(ModifiedOn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstrumentMeasurementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentMeasurementId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FusionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FusionId);
      }
      if (LocationId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationId);
      }
      if (ParameterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ParameterId);
      }
      if (DisplayUnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplayUnitId);
      }
      if (IsVisible != false) {
        size += 1 + 1;
      }
      if (bindingCase_ == BindingOneofCase.ScSensorBinding) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScSensorBinding);
      }
      if (bindingCase_ == BindingOneofCase.MilliAmpBinding) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MilliAmpBinding);
      }
      size += limits_.CalculateSize(_repeated_limits_codec);
      if (CreatedById.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedById);
      }
      if (createdOn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedOn);
      }
      if (ModifiedById.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedById);
      }
      if (modifiedOn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifiedOn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentMeasurementDefinition other) {
      if (other == null) {
        return;
      }
      if (other.InstrumentMeasurementId.Length != 0) {
        InstrumentMeasurementId = other.InstrumentMeasurementId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FusionId.Length != 0) {
        FusionId = other.FusionId;
      }
      if (other.LocationId.Length != 0) {
        LocationId = other.LocationId;
      }
      if (other.ParameterId != 0) {
        ParameterId = other.ParameterId;
      }
      if (other.DisplayUnitId != 0) {
        DisplayUnitId = other.DisplayUnitId;
      }
      if (other.IsVisible != false) {
        IsVisible = other.IsVisible;
      }
      limits_.Add(other.limits_);
      if (other.CreatedById.Length != 0) {
        CreatedById = other.CreatedById;
      }
      if (other.createdOn_ != null) {
        if (createdOn_ == null) {
          CreatedOn = new global::Claros.Common.Core.ClarosDateTime();
        }
        CreatedOn.MergeFrom(other.CreatedOn);
      }
      if (other.ModifiedById.Length != 0) {
        ModifiedById = other.ModifiedById;
      }
      if (other.modifiedOn_ != null) {
        if (modifiedOn_ == null) {
          ModifiedOn = new global::Claros.Common.Core.ClarosDateTime();
        }
        ModifiedOn.MergeFrom(other.ModifiedOn);
      }
      switch (other.BindingCase) {
        case BindingOneofCase.ScSensorBinding:
          if (ScSensorBinding == null) {
            ScSensorBinding = new global::Claros.Instrument.Measurement.SCSensorBinding();
          }
          ScSensorBinding.MergeFrom(other.ScSensorBinding);
          break;
        case BindingOneofCase.MilliAmpBinding:
          if (MilliAmpBinding == null) {
            MilliAmpBinding = new global::Claros.Instrument.Measurement.MilliAmpBinding();
          }
          MilliAmpBinding.MergeFrom(other.MilliAmpBinding);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstrumentMeasurementId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            FusionId = input.ReadString();
            break;
          }
          case 34: {
            LocationId = input.ReadString();
            break;
          }
          case 40: {
            ParameterId = input.ReadUInt32();
            break;
          }
          case 48: {
            DisplayUnitId = input.ReadUInt32();
            break;
          }
          case 56: {
            IsVisible = input.ReadBool();
            break;
          }
          case 66: {
            global::Claros.Instrument.Measurement.SCSensorBinding subBuilder = new global::Claros.Instrument.Measurement.SCSensorBinding();
            if (bindingCase_ == BindingOneofCase.ScSensorBinding) {
              subBuilder.MergeFrom(ScSensorBinding);
            }
            input.ReadMessage(subBuilder);
            ScSensorBinding = subBuilder;
            break;
          }
          case 74: {
            global::Claros.Instrument.Measurement.MilliAmpBinding subBuilder = new global::Claros.Instrument.Measurement.MilliAmpBinding();
            if (bindingCase_ == BindingOneofCase.MilliAmpBinding) {
              subBuilder.MergeFrom(MilliAmpBinding);
            }
            input.ReadMessage(subBuilder);
            MilliAmpBinding = subBuilder;
            break;
          }
          case 82: {
            limits_.AddEntriesFrom(input, _repeated_limits_codec);
            break;
          }
          case 90: {
            CreatedById = input.ReadString();
            break;
          }
          case 98: {
            if (createdOn_ == null) {
              CreatedOn = new global::Claros.Common.Core.ClarosDateTime();
            }
            input.ReadMessage(CreatedOn);
            break;
          }
          case 106: {
            ModifiedById = input.ReadString();
            break;
          }
          case 114: {
            if (modifiedOn_ == null) {
              ModifiedOn = new global::Claros.Common.Core.ClarosDateTime();
            }
            input.ReadMessage(ModifiedOn);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
