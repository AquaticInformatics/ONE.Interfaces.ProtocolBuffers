// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: claros_common_task_task.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Claros.Common.Task {

  /// <summary>Holder for reflection information generated from claros_common_task_task.proto</summary>
  public static partial class ClarosCommonTaskTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for claros_common_task_task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClarosCommonTaskTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1jbGFyb3NfY29tbW9uX3Rhc2tfdGFzay5wcm90bxISY2xhcm9zLmNvbW1v",
            "bi50YXNrGiNjbGFyb3NfY29tbW9uX3Rhc2tfZGVmaW5pdGlvbi5wcm90bxod",
            "Y2xhcm9zX2NvbW1vbl90YXNrX2RhdGEucHJvdG8aI2NsYXJvc19jb21tb25f",
            "Y29yZV9hdWRpdGV2ZW50LnByb3RvIqECCgRUYXNrEgoKAmlkGAEgASgJEgwK",
            "BG5hbWUYAiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSEAoIYXNzaWduZWUY",
            "BCABKAkSEAoIcmVwb3J0ZXIYBSABKAkSEAoIcHJpb3JpdHkYBiABKA0SFAoM",
            "aW5zdHJ1bWVudElkGAcgASgJEjoKDnRhc2tEZWZpbml0aW9uGAggASgLMiIu",
            "Y2xhcm9zLmNvbW1vbi50YXNrLlRhc2tEZWZpbml0aW9uEi4KCHRhc2tkYXRh",
            "GAkgASgLMhwuY2xhcm9zLmNvbW1vbi50YXNrLlRhc2tEYXRhEjIKCmF1ZGl0",
            "RXZlbnQYCiABKAsyHi5jbGFyb3MuY29tbW9uLmNvcmUuQXVkaXRFdmVudGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Claros.Common.Task.ClarosCommonTaskDefinitionReflection.Descriptor, global::Claros.Common.Task.ClarosCommonTaskDataReflection.Descriptor, global::Claros.Common.Core.ClarosCommonCoreAuditeventReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Claros.Common.Task.Task), global::Claros.Common.Task.Task.Parser, new[]{ "Id", "Name", "Description", "Assignee", "Reporter", "Priority", "InstrumentId", "TaskDefinition", "Taskdata", "AuditEvent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Task : pb::IMessage<Task> {
    private static readonly pb::MessageParser<Task> _parser = new pb::MessageParser<Task>(() => new Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Claros.Common.Task.ClarosCommonTaskTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task(Task other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      description_ = other.description_;
      assignee_ = other.assignee_;
      reporter_ = other.reporter_;
      priority_ = other.priority_;
      instrumentId_ = other.instrumentId_;
      taskDefinition_ = other.taskDefinition_ != null ? other.taskDefinition_.Clone() : null;
      taskdata_ = other.taskdata_ != null ? other.taskdata_.Clone() : null;
      auditEvent_ = other.auditEvent_ != null ? other.auditEvent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task Clone() {
      return new Task(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// header
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// User Defined Name for the Task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Desciption of the work to do in this task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assignee" field.</summary>
    public const int AssigneeFieldNumber = 4;
    private string assignee_ = "";
    /// <summary>
    /// GUID of the User that the task is assigned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Assignee {
      get { return assignee_; }
      set {
        assignee_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reporter" field.</summary>
    public const int ReporterFieldNumber = 5;
    private string reporter_ = "";
    /// <summary>
    /// GUID of the user that created the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reporter {
      get { return reporter_; }
      set {
        reporter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 6;
    private uint priority_;
    /// <summary>
    /// TaskSeverity severity = 6;                  // Enumeration of common severities
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "instrumentId" field.</summary>
    public const int InstrumentIdFieldNumber = 7;
    private string instrumentId_ = "";
    /// <summary>
    /// Source                                   // From where did the task come?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taskDefinition" field.</summary>
    public const int TaskDefinitionFieldNumber = 8;
    private global::Claros.Common.Task.TaskDefinition taskDefinition_;
    /// <summary>
    /// definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Common.Task.TaskDefinition TaskDefinition {
      get { return taskDefinition_; }
      set {
        taskDefinition_ = value;
      }
    }

    /// <summary>Field number for the "taskdata" field.</summary>
    public const int TaskdataFieldNumber = 9;
    private global::Claros.Common.Task.TaskData taskdata_;
    /// <summary>
    /// data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Common.Task.TaskData Taskdata {
      get { return taskdata_; }
      set {
        taskdata_ = value;
      }
    }

    /// <summary>Field number for the "auditEvent" field.</summary>
    public const int AuditEventFieldNumber = 10;
    private global::Claros.Common.Core.AuditEvent auditEvent_;
    /// <summary>
    /// Audit Events related to to the Task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Claros.Common.Core.AuditEvent AuditEvent {
      get { return auditEvent_; }
      set {
        auditEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Assignee != other.Assignee) return false;
      if (Reporter != other.Reporter) return false;
      if (Priority != other.Priority) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (!object.Equals(TaskDefinition, other.TaskDefinition)) return false;
      if (!object.Equals(Taskdata, other.Taskdata)) return false;
      if (!object.Equals(AuditEvent, other.AuditEvent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Assignee.Length != 0) hash ^= Assignee.GetHashCode();
      if (Reporter.Length != 0) hash ^= Reporter.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (taskDefinition_ != null) hash ^= TaskDefinition.GetHashCode();
      if (taskdata_ != null) hash ^= Taskdata.GetHashCode();
      if (auditEvent_ != null) hash ^= AuditEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (Assignee.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Assignee);
      }
      if (Reporter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Reporter);
      }
      if (Priority != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Priority);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(InstrumentId);
      }
      if (taskDefinition_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TaskDefinition);
      }
      if (taskdata_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Taskdata);
      }
      if (auditEvent_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AuditEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Assignee.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Assignee);
      }
      if (Reporter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reporter);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (taskDefinition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskDefinition);
      }
      if (taskdata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Taskdata);
      }
      if (auditEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuditEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Assignee.Length != 0) {
        Assignee = other.Assignee;
      }
      if (other.Reporter.Length != 0) {
        Reporter = other.Reporter;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.taskDefinition_ != null) {
        if (taskDefinition_ == null) {
          TaskDefinition = new global::Claros.Common.Task.TaskDefinition();
        }
        TaskDefinition.MergeFrom(other.TaskDefinition);
      }
      if (other.taskdata_ != null) {
        if (taskdata_ == null) {
          Taskdata = new global::Claros.Common.Task.TaskData();
        }
        Taskdata.MergeFrom(other.Taskdata);
      }
      if (other.auditEvent_ != null) {
        if (auditEvent_ == null) {
          AuditEvent = new global::Claros.Common.Core.AuditEvent();
        }
        AuditEvent.MergeFrom(other.AuditEvent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            Assignee = input.ReadString();
            break;
          }
          case 42: {
            Reporter = input.ReadString();
            break;
          }
          case 48: {
            Priority = input.ReadUInt32();
            break;
          }
          case 58: {
            InstrumentId = input.ReadString();
            break;
          }
          case 66: {
            if (taskDefinition_ == null) {
              TaskDefinition = new global::Claros.Common.Task.TaskDefinition();
            }
            input.ReadMessage(TaskDefinition);
            break;
          }
          case 74: {
            if (taskdata_ == null) {
              Taskdata = new global::Claros.Common.Task.TaskData();
            }
            input.ReadMessage(Taskdata);
            break;
          }
          case 82: {
            if (auditEvent_ == null) {
              AuditEvent = new global::Claros.Common.Core.AuditEvent();
            }
            input.ReadMessage(AuditEvent);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
