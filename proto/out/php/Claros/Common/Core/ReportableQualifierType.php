<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: claros_common_core_reportablequalifier_type.proto

namespace Claros\Common\Core;

use UnexpectedValueException;

/**
 * Protobuf type <code>claros.common.core.ReportableQualifierType</code>
 */
class ReportableQualifierType
{
    /**
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_UNKNOWN = 0;</code>
     */
    const REPORTABLE_QUALIFIER_UNKNOWN = 0;
    /**
     * Non-Detect. Most states now require the < detection limit and this should no longer be used
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_NONDETECT = 1;</code>
     */
    const REPORTABLE_QUALIFIER_NONDETECT = 1;
    /**
     * Estimated.
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_ESTIMATE = 2;</code>
     */
    const REPORTABLE_QUALIFIER_ESTIMATE = 2;
    /**
     * Detected, not quantifiable. Result is above the Method Detection Limit (i.e.2) but below the Report Limit (i.e 4). Used in California.
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE = 3;</code>
     */
    const REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE = 3;
    /**
     * Result is greater than xxxx. Used instead of TNTC.
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_GREATERTHAN = 4;</code>
     */
    const REPORTABLE_QUALIFIER_GREATERTHAN = 4;
    /**
     * Result was below the detection limit of YYYY.
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_LESSTHAN = 5;</code>
     */
    const REPORTABLE_QUALIFIER_LESSTHAN = 5;
    /**
     * Too many colonies were present (TNTC); the numeric value represents the filtration volume.
     *
     * Generated from protobuf enum <code>REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT = 6;</code>
     */
    const REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT = 6;

    private static $valueToName = [
        self::REPORTABLE_QUALIFIER_UNKNOWN => 'REPORTABLE_QUALIFIER_UNKNOWN',
        self::REPORTABLE_QUALIFIER_NONDETECT => 'REPORTABLE_QUALIFIER_NONDETECT',
        self::REPORTABLE_QUALIFIER_ESTIMATE => 'REPORTABLE_QUALIFIER_ESTIMATE',
        self::REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE => 'REPORTABLE_QUALIFIER_DETECTNONQUALIFIABLE',
        self::REPORTABLE_QUALIFIER_GREATERTHAN => 'REPORTABLE_QUALIFIER_GREATERTHAN',
        self::REPORTABLE_QUALIFIER_LESSTHAN => 'REPORTABLE_QUALIFIER_LESSTHAN',
        self::REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT => 'REPORTABLE_QUALIFIER_TOO_NUMEROUS_TO_COUNT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

