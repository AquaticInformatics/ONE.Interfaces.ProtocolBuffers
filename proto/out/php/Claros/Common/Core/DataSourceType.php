<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: claros_common_core_datasource_type.proto

namespace Claros\Common\Core;

use UnexpectedValueException;

/**
 * Protobuf type <code>claros.common.core.DataSourceType</code>
 */
class DataSourceType
{
    /**
     * Generated from protobuf enum <code>DS_UNKNOWN = 0;</code>
     */
    const DS_UNKNOWN = 0;
    /**
     * Generated from protobuf enum <code>DS_FORM = 1;</code>
     */
    const DS_FORM = 1;
    /**
     * Generated from protobuf enum <code>DS_COMPUTATION = 2;</code>
     */
    const DS_COMPUTATION = 2;
    /**
     * Generated from protobuf enum <code>DS_SPREADSHEET = 3;</code>
     */
    const DS_SPREADSHEET = 3;
    /**
     * Generated from protobuf enum <code>DS_INSTRUMENTMEASUREMENT = 4;</code>
     */
    const DS_INSTRUMENTMEASUREMENT = 4;
    /**
     * Generated from protobuf enum <code>DS_IMPORT = 5;</code>
     */
    const DS_IMPORT = 5;
    /**
     * Generated from protobuf enum <code>DS_SPREADSHEET_DEFINITION = 6;</code>
     */
    const DS_SPREADSHEET_DEFINITION = 6;

    private static $valueToName = [
        self::DS_UNKNOWN => 'DS_UNKNOWN',
        self::DS_FORM => 'DS_FORM',
        self::DS_COMPUTATION => 'DS_COMPUTATION',
        self::DS_SPREADSHEET => 'DS_SPREADSHEET',
        self::DS_INSTRUMENTMEASUREMENT => 'DS_INSTRUMENTMEASUREMENT',
        self::DS_IMPORT => 'DS_IMPORT',
        self::DS_SPREADSHEET_DEFINITION => 'DS_SPREADSHEET_DEFINITION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

