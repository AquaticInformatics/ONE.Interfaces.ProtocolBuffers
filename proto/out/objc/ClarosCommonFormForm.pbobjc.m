// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_form.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonFormForm.pbobjc.h"
#import "ClarosCommonCoreTimewindow.pbobjc.h"
#import "ClarosCommonCoreNote.pbobjc.h"
#import "ClarosCommonCoreAuditevent.pbobjc.h"
#import "ClarosCommonFormFormfield.pbobjc.h"
#import "ClarosCommonFormFormtemplate.pbobjc.h"
#import "ClarosCommonFormFormfieldDefinition.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonFormFormRoot

@implementation ClarosCommonFormFormRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonFormFormRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonFormFormRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Form

@implementation Form

@dynamic id_p;
@dynamic name;
@dynamic hasTimeWindow, timeWindow;
@dynamic hasFormTemplate, formTemplate;
@dynamic adHocFormFieldDefinitionsArray, adHocFormFieldDefinitionsArray_Count;
@dynamic templateFormFieldsArray, templateFormFieldsArray_Count;
@dynamic adhocFormFieldsArray, adhocFormFieldsArray_Count;
@dynamic notesArray, notesArray_Count;
@dynamic auditEventsArray, auditEventsArray_Count;

typedef struct Form__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  TimeWindow *timeWindow;
  FormTemplate *formTemplate;
  NSMutableArray *adHocFormFieldDefinitionsArray;
  NSMutableArray *templateFormFieldsArray;
  NSMutableArray *adhocFormFieldsArray;
  NSMutableArray *notesArray;
  NSMutableArray *auditEventsArray;
} Form__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Form_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Form__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Form_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Form__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeWindow",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeWindow),
        .number = Form_FieldNumber_TimeWindow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Form__storage_, timeWindow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formTemplate",
        .dataTypeSpecific.className = GPBStringifySymbol(FormTemplate),
        .number = Form_FieldNumber_FormTemplate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Form__storage_, formTemplate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adHocFormFieldDefinitionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FormFieldDefinition),
        .number = Form_FieldNumber_AdHocFormFieldDefinitionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Form__storage_, adHocFormFieldDefinitionsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "templateFormFieldsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FormField),
        .number = Form_FieldNumber_TemplateFormFieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Form__storage_, templateFormFieldsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adhocFormFieldsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FormField),
        .number = Form_FieldNumber_AdhocFormFieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Form__storage_, adhocFormFieldsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Note),
        .number = Form_FieldNumber_NotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Form__storage_, notesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auditEventsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AuditEvent),
        .number = Form_FieldNumber_AuditEventsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Form__storage_, auditEventsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Form class]
                                     rootClass:[ClarosCommonFormFormRoot class]
                                          file:ClarosCommonFormFormRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Form__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\003\n\000\004\014\000\005\000adHocFormFieldDefinitions\000\006\000tem"
        "plateFormFields\000\007\000adhocFormFields\000c\000audi"
        "tEvents\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
