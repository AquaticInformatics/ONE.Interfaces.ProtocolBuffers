// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_computation_computation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonComputationComputation.pbobjc.h"
#import "ClarosCommonComputationVariable.pbobjc.h"
#import "ClarosCommonComputationExpressionline.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonComputationComputationRoot

@implementation ClarosCommonComputationComputationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonComputationComputationRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonComputationComputationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.computation"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Computation

@implementation Computation

@dynamic bindingOneOfCase;
@dynamic i18NKey;
@dynamic name;
@dynamic description_p;
@dynamic inputVariablesArray, inputVariablesArray_Count;
@dynamic outputVariablesArray, outputVariablesArray_Count;
@dynamic expressionLinesArray, expressionLinesArray_Count;
@dynamic isActive;
@dynamic isValid;
@dynamic ledgerId;
@dynamic formId;

typedef struct Computation__storage_ {
  uint32_t _has_storage_[2];
  NSString *i18NKey;
  NSString *name;
  NSString *description_p;
  NSMutableArray *inputVariablesArray;
  NSMutableArray *outputVariablesArray;
  NSMutableArray *expressionLinesArray;
  NSString *ledgerId;
  NSString *formId;
} Computation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "i18NKey",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_I18NKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Computation__storage_, i18NKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Computation__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Computation__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputVariablesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Variable),
        .number = Computation_FieldNumber_InputVariablesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Computation__storage_, inputVariablesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputVariablesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Variable),
        .number = Computation_FieldNumber_OutputVariablesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Computation__storage_, outputVariablesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expressionLinesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExpressionLine),
        .number = Computation_FieldNumber_ExpressionLinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Computation__storage_, expressionLinesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isActive",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_IsActive,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isValid",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_IsValid,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ledgerId",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_LedgerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Computation__storage_, ledgerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formId",
        .dataTypeSpecific.className = NULL,
        .number = Computation_FieldNumber_FormId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Computation__storage_, formId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Computation class]
                                     rootClass:[ClarosCommonComputationComputationRoot class]
                                          file:ClarosCommonComputationComputationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Computation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "binding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\003$\000\004\000inputVariables\000\005\000outputVariables\000"
        "\006\000expressionLines\000\007\010\000\010\007\000\t\010\000\n\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Computation_ClearBindingOneOfCase(Computation *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
