// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_definition.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentMeasurementDefinition.pbobjc.h"
#import "ClarosCommonCoreClarosdatetime.pbobjc.h"
#import "ClarosInstrumentMeasurementMilliampBinding.pbobjc.h"
#import "ClarosInstrumentMeasurementScsensorBinding.pbobjc.h"
#import "ClarosCommonCoreLimit.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosInstrumentMeasurementDefinitionRoot

@implementation ClarosInstrumentMeasurementDefinitionRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosInstrumentMeasurementDefinitionRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentMeasurementDefinitionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument.measurement"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InstrumentMeasurementDefinition

@implementation InstrumentMeasurementDefinition

@dynamic bindingOneOfCase;
@dynamic instrumentMeasurementId;
@dynamic name;
@dynamic fusionId;
@dynamic locationId;
@dynamic parameterId;
@dynamic displayUnitId;
@dynamic isVisible;
@dynamic scSensorBinding;
@dynamic milliAmpBinding;
@dynamic limitsArray, limitsArray_Count;
@dynamic createdById;
@dynamic hasCreatedOn, createdOn;
@dynamic modifiedById;
@dynamic hasModifiedOn, modifiedOn;

typedef struct InstrumentMeasurementDefinition__storage_ {
  uint32_t _has_storage_[2];
  uint32_t parameterId;
  uint32_t displayUnitId;
  NSString *instrumentMeasurementId;
  NSString *name;
  NSString *fusionId;
  NSString *locationId;
  SCSensorBinding *scSensorBinding;
  MilliAmpBinding *milliAmpBinding;
  NSMutableArray *limitsArray;
  NSString *createdById;
  ClarosDateTime *createdOn;
  NSString *modifiedById;
  ClarosDateTime *modifiedOn;
} InstrumentMeasurementDefinition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "instrumentMeasurementId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_InstrumentMeasurementId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, instrumentMeasurementId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fusionId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_FusionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, fusionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "locationId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_LocationId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, locationId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parameterId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_ParameterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, parameterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "displayUnitId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_DisplayUnitId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, displayUnitId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isVisible",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_IsVisible,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "scSensorBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(SCSensorBinding),
        .number = InstrumentMeasurementDefinition_FieldNumber_ScSensorBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, scSensorBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "milliAmpBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(MilliAmpBinding),
        .number = InstrumentMeasurementDefinition_FieldNumber_MilliAmpBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, milliAmpBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limitsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Limit),
        .number = InstrumentMeasurementDefinition_FieldNumber_LimitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, limitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdById",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_CreatedById,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, createdById),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdOn",
        .dataTypeSpecific.className = GPBStringifySymbol(ClarosDateTime),
        .number = InstrumentMeasurementDefinition_FieldNumber_CreatedOn,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, createdOn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "modifiedById",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementDefinition_FieldNumber_ModifiedById,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, modifiedById),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "modifiedOn",
        .dataTypeSpecific.className = GPBStringifySymbol(ClarosDateTime),
        .number = InstrumentMeasurementDefinition_FieldNumber_ModifiedOn,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(InstrumentMeasurementDefinition__storage_, modifiedOn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstrumentMeasurementDefinition class]
                                     rootClass:[ClarosInstrumentMeasurementDefinitionRoot class]
                                          file:ClarosInstrumentMeasurementDefinitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstrumentMeasurementDefinition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "binding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\014\001\027\000\003\010\000\004\n\000\005\013\000\006\r\000\007\t\000\010\017\000\t\017\000\013\013\000\014\t\000\r\014\000\016\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void InstrumentMeasurementDefinition_ClearBindingOneOfCase(InstrumentMeasurementDefinition *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
