// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formfield.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonFormFormfield.pbobjc.h"
#import "ClarosCommonFormFormdataentryType.pbobjc.h"
#import "ClarosOperationsSpreadsheetWorksheetCell.pbobjc.h"
#import "ClarosInstrumentData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonFormFormfieldRoot

@implementation ClarosCommonFormFormfieldRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonFormFormfieldRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonFormFormfieldRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FormField

@implementation FormField

@dynamic formFieldDataOneOfCase;
@dynamic guid;
@dynamic formFieldDefinitionId;
@dynamic formDataEntryType;
@dynamic isDataEntryTypeLocked;
@dynamic name;
@dynamic cell;
@dynamic instrumentDataArray, instrumentDataArray_Count;

typedef struct FormField__storage_ {
  uint32_t _has_storage_[2];
  FormDataEntryType formDataEntryType;
  NSString *guid;
  NSString *formFieldDefinitionId;
  NSString *name;
  Cell *cell;
  NSMutableArray *instrumentDataArray;
} FormField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "guid",
        .dataTypeSpecific.className = NULL,
        .number = FormField_FieldNumber_Guid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormField__storage_, guid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formFieldDefinitionId",
        .dataTypeSpecific.className = NULL,
        .number = FormField_FieldNumber_FormFieldDefinitionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FormField__storage_, formFieldDefinitionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formDataEntryType",
        .dataTypeSpecific.enumDescFunc = FormDataEntryType_EnumDescriptor,
        .number = FormField_FieldNumber_FormDataEntryType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FormField__storage_, formDataEntryType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "isDataEntryTypeLocked",
        .dataTypeSpecific.className = NULL,
        .number = FormField_FieldNumber_IsDataEntryTypeLocked,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FormField_FieldNumber_Name,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FormField__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cell",
        .dataTypeSpecific.className = GPBStringifySymbol(Cell),
        .number = FormField_FieldNumber_Cell,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FormField__storage_, cell),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "instrumentDataArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentData),
        .number = FormField_FieldNumber_InstrumentDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FormField__storage_, instrumentDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormField class]
                                     rootClass:[ClarosCommonFormFormfieldRoot class]
                                          file:ClarosCommonFormFormfieldRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormField__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "formFieldData",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\025\000\003\021\000\004\025\000\007\000instrumentData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FormField_FormDataEntryType_RawValue(FormField *message) {
  GPBDescriptor *descriptor = [FormField descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormField_FieldNumber_FormDataEntryType];
  return GPBGetMessageInt32Field(message, field);
}

void SetFormField_FormDataEntryType_RawValue(FormField *message, int32_t value) {
  GPBDescriptor *descriptor = [FormField descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormField_FieldNumber_FormDataEntryType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void FormField_ClearFormFieldDataOneOfCase(FormField *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
