// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_celldata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosOperationsSpreadsheetWorksheetCelldata.pbobjc.h"
#import "ClarosCommonCoreReportablequalifier.pbobjc.h"
#import "ClarosOperationsSpreadsheetWorksheetCelldataBinding.pbobjc.h"
#import "ClarosCommonCoreAuditevent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosOperationsSpreadsheetWorksheetCelldataRoot

@implementation ClarosOperationsSpreadsheetWorksheetCelldataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosOperationsSpreadsheetWorksheetCelldataRoot_FileDescriptor

static GPBFileDescriptor *ClarosOperationsSpreadsheetWorksheetCelldataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.operations.spreadsheet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CellData

@implementation CellData

@dynamic value;
@dynamic stringValue;
@dynamic isLocked;
@dynamic unitId;
@dynamic justification;
@dynamic hasReportableQualifier, reportableQualifier;
@dynamic cellDataBindingsArray, cellDataBindingsArray_Count;
@dynamic hasAuditEvent, auditEvent;

typedef struct CellData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t unitId;
  NSString *stringValue;
  NSString *justification;
  ReportableQualifier *reportableQualifier;
  NSMutableArray *cellDataBindingsArray;
  AuditEvent *auditEvent;
  double value;
} CellData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = CellData_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CellData__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.className = NULL,
        .number = CellData_FieldNumber_StringValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CellData__storage_, stringValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isLocked",
        .dataTypeSpecific.className = NULL,
        .number = CellData_FieldNumber_IsLocked,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "unitId",
        .dataTypeSpecific.className = NULL,
        .number = CellData_FieldNumber_UnitId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CellData__storage_, unitId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "justification",
        .dataTypeSpecific.className = NULL,
        .number = CellData_FieldNumber_Justification,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CellData__storage_, justification),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reportableQualifier",
        .dataTypeSpecific.className = GPBStringifySymbol(ReportableQualifier),
        .number = CellData_FieldNumber_ReportableQualifier,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CellData__storage_, reportableQualifier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cellDataBindingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CellDataBinding),
        .number = CellData_FieldNumber_CellDataBindingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CellData__storage_, cellDataBindingsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auditEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(AuditEvent),
        .number = CellData_FieldNumber_AuditEvent,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CellData__storage_, auditEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CellData class]
                                     rootClass:[ClarosOperationsSpreadsheetWorksheetCelldataRoot class]
                                          file:ClarosOperationsSpreadsheetWorksheetCelldataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CellData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\013\000\003\010\000\004\006\000\006\023\000\007\000cellDataBindings\000c\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
