// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_task.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonTaskTask.pbobjc.h"
#import "ClarosCommonTaskDefinition.pbobjc.h"
#import "ClarosCommonTaskData.pbobjc.h"
#import "ClarosCommonCoreAuditevent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonTaskTaskRoot

@implementation ClarosCommonTaskTaskRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonTaskTaskRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonTaskTaskRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.task"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Task

@implementation Task

@dynamic id_p;
@dynamic name;
@dynamic description_p;
@dynamic assignee;
@dynamic reporter;
@dynamic priority;
@dynamic instrumentId;
@dynamic hasTaskDefinition, taskDefinition;
@dynamic hasTaskdata, taskdata;
@dynamic hasAuditEvent, auditEvent;

typedef struct Task__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priority;
  NSString *id_p;
  NSString *name;
  NSString *description_p;
  NSString *assignee;
  NSString *reporter;
  NSString *instrumentId;
  TaskDefinition *taskDefinition;
  TaskData *taskdata;
  AuditEvent *auditEvent;
} Task__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Task__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Task__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Task__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "assignee",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Assignee,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Task__storage_, assignee),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reporter",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Reporter,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Task__storage_, reporter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priority",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_Priority,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Task__storage_, priority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "instrumentId",
        .dataTypeSpecific.className = NULL,
        .number = Task_FieldNumber_InstrumentId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Task__storage_, instrumentId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "taskDefinition",
        .dataTypeSpecific.className = GPBStringifySymbol(TaskDefinition),
        .number = Task_FieldNumber_TaskDefinition,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Task__storage_, taskDefinition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "taskdata",
        .dataTypeSpecific.className = GPBStringifySymbol(TaskData),
        .number = Task_FieldNumber_Taskdata,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Task__storage_, taskdata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auditEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(AuditEvent),
        .number = Task_FieldNumber_AuditEvent,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Task__storage_, auditEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Task class]
                                     rootClass:[ClarosCommonTaskTaskRoot class]
                                          file:ClarosCommonTaskTaskRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Task__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\007\014\000\010\016\000\n\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
