// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_reportablequalifier_type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonCoreReportablequalifierType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonCoreReportablequalifierTypeRoot

@implementation ClarosCommonCoreReportablequalifierTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ReportableQualifierType

GPBEnumDescriptor *ReportableQualifierType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReportableQualifierUnknown\000ReportableQua"
        "lifierNondetect\000ReportableQualifierEstim"
        "ate\000ReportableQualifierDetectnonqualifia"
        "ble\000ReportableQualifierGreaterthan\000Repor"
        "tableQualifierLessthan\000ReportableQualifi"
        "erTooNumerousToCount\000";
    static const int32_t values[] = {
        ReportableQualifierType_ReportableQualifierUnknown,
        ReportableQualifierType_ReportableQualifierNondetect,
        ReportableQualifierType_ReportableQualifierEstimate,
        ReportableQualifierType_ReportableQualifierDetectnonqualifiable,
        ReportableQualifierType_ReportableQualifierGreaterthan,
        ReportableQualifierType_ReportableQualifierLessthan,
        ReportableQualifierType_ReportableQualifierTooNumerousToCount,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ReportableQualifierType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ReportableQualifierType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ReportableQualifierType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ReportableQualifierType_ReportableQualifierUnknown:
    case ReportableQualifierType_ReportableQualifierNondetect:
    case ReportableQualifierType_ReportableQualifierEstimate:
    case ReportableQualifierType_ReportableQualifierDetectnonqualifiable:
    case ReportableQualifierType_ReportableQualifierGreaterthan:
    case ReportableQualifierType_ReportableQualifierLessthan:
    case ReportableQualifierType_ReportableQualifierTooNumerousToCount:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
