// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_index.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosOperationsSpreadsheetWorksheetIndex.pbobjc.h"
#import "ClarosCommonCoreTimewindow.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosOperationsSpreadsheetWorksheetIndexRoot

@implementation ClarosOperationsSpreadsheetWorksheetIndexRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosOperationsSpreadsheetWorksheetIndexRoot_FileDescriptor

static GPBFileDescriptor *ClarosOperationsSpreadsheetWorksheetIndexRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - WorksheetIndex

@implementation WorksheetIndex

@dynamic id_p;
@dynamic worksheetVersion;
@dynamic hasTimeWindow, timeWindow;
@dynamic hasUtcTimeWindows, utcTimeWindows;
@dynamic isInSpeed;

typedef struct WorksheetIndex__storage_ {
  uint32_t _has_storage_[1];
  uint32_t worksheetVersion;
  NSString *id_p;
  TimeWindow *timeWindow;
  TimeWindow *utcTimeWindows;
} WorksheetIndex__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = WorksheetIndex_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WorksheetIndex__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "worksheetVersion",
        .dataTypeSpecific.className = NULL,
        .number = WorksheetIndex_FieldNumber_WorksheetVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WorksheetIndex__storage_, worksheetVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timeWindow",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeWindow),
        .number = WorksheetIndex_FieldNumber_TimeWindow,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WorksheetIndex__storage_, timeWindow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "utcTimeWindows",
        .dataTypeSpecific.className = GPBStringifySymbol(TimeWindow),
        .number = WorksheetIndex_FieldNumber_UtcTimeWindows,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WorksheetIndex__storage_, utcTimeWindows),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isInSpeed",
        .dataTypeSpecific.className = NULL,
        .number = WorksheetIndex_FieldNumber_IsInSpeed,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WorksheetIndex class]
                                     rootClass:[ClarosOperationsSpreadsheetWorksheetIndexRoot class]
                                          file:ClarosOperationsSpreadsheetWorksheetIndexRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WorksheetIndex__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\020\000\003\n\000\004\016\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
