// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formfield_data.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonFormFormfieldData.pbobjc.h"
#import "ClarosOperationsSpreadsheetWorksheetCell.pbobjc.h"
#import "ClarosInstrumentData.pbobjc.h"
#import "ClarosCommonCoreAuditevent.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonFormFormfieldDataRoot

@implementation ClarosCommonFormFormfieldDataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonFormFormfieldDataRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonFormFormfieldDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FormFieldData

@implementation FormFieldData

@dynamic fieldDataBindingOneOfCase;
@dynamic cell;
@dynamic hasInstrumentData, instrumentData;
@dynamic hasAuditEvent, auditEvent;

typedef struct FormFieldData__storage_ {
  uint32_t _has_storage_[2];
  Cell *cell;
  InstrumentData *instrumentData;
  AuditEvent *auditEvent;
} FormFieldData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cell",
        .dataTypeSpecific.className = GPBStringifySymbol(Cell),
        .number = FormFieldData_FieldNumber_Cell,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FormFieldData__storage_, cell),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "instrumentData",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentData),
        .number = FormFieldData_FieldNumber_InstrumentData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormFieldData__storage_, instrumentData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "auditEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(AuditEvent),
        .number = FormFieldData_FieldNumber_AuditEvent,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FormFieldData__storage_, auditEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormFieldData class]
                                     rootClass:[ClarosCommonFormFormfieldDataRoot class]
                                          file:ClarosCommonFormFormfieldDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormFieldData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "fieldDataBinding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\016\000c\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FormFieldData_ClearFieldDataBindingOneOfCase(FormFieldData *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
