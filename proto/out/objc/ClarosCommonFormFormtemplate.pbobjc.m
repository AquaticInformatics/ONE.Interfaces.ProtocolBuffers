// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_formtemplate.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonFormFormtemplate.pbobjc.h"
#import "ClarosCommonFormFormtemplateconfiguration.pbobjc.h"
#import "ClarosCommonConfigurationRights.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonFormFormtemplateRoot

@implementation ClarosCommonFormFormtemplateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonFormFormtemplateRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonFormFormtemplateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FormTemplate

@implementation FormTemplate

@dynamic id_p;
@dynamic ownerId;
@dynamic public_p;
@dynamic version;
@dynamic privileges, privileges_Count;
@dynamic hasFormTemplateConfiguration, formTemplateConfiguration;
@dynamic name;

typedef struct FormTemplate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  NSString *id_p;
  NSString *ownerId;
  NSMutableDictionary *privileges;
  FormTemplateConfiguration *formTemplateConfiguration;
  NSString *name;
} FormTemplate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = FormTemplate_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.className = NULL,
        .number = FormTemplate_FieldNumber_OwnerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, ownerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "public_p",
        .dataTypeSpecific.className = NULL,
        .number = FormTemplate_FieldNumber_Public_p,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = FormTemplate_FieldNumber_Version,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "privileges",
        .dataTypeSpecific.className = GPBStringifySymbol(Rights),
        .number = FormTemplate_FieldNumber_Privileges,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, privileges),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formTemplateConfiguration",
        .dataTypeSpecific.className = GPBStringifySymbol(FormTemplateConfiguration),
        .number = FormTemplate_FieldNumber_FormTemplateConfiguration,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, formTemplateConfiguration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = FormTemplate_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(FormTemplate__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormTemplate class]
                                     rootClass:[ClarosCommonFormFormtemplateRoot class]
                                          file:ClarosCommonFormFormtemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormTemplate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\006\031\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
