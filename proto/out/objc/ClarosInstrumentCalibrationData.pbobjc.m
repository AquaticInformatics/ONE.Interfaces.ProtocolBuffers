// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_calibration_data.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentCalibrationData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosInstrumentCalibrationDataRoot

@implementation ClarosInstrumentCalibrationDataRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ClarosInstrumentCalibrationDataRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentCalibrationDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CalibrationData

@implementation CalibrationData


typedef struct CalibrationData__storage_ {
  uint32_t _has_storage_[1];
} CalibrationData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalibrationData class]
                                     rootClass:[ClarosInstrumentCalibrationDataRoot class]
                                          file:ClarosInstrumentCalibrationDataRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(CalibrationData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CalibrationData_Calibration

@implementation CalibrationData_Calibration

@dynamic id_p;
@dynamic userId;
@dynamic time;
@dynamic status;
@dynamic offsetUnits;
@dynamic slopeUnits;
@dynamic slope;
@dynamic slopeAux;
@dynamic offset;
@dynamic r2;
@dynamic calibrationStandardArray, calibrationStandardArray_Count;

typedef struct CalibrationData_Calibration__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t offsetUnits;
  uint32_t slopeUnits;
  float slope;
  float slopeAux;
  float offset;
  float r2;
  NSString *id_p;
  NSString *userId;
  NSMutableArray *calibrationStandardArray;
  uint64_t time;
} CalibrationData_Calibration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "offsetUnits",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_OffsetUnits,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, offsetUnits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slopeUnits",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_SlopeUnits,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, slopeUnits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slope",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_Slope,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, slope),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "slopeAux",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_SlopeAux,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, slopeAux),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_Offset,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "r2",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Calibration_FieldNumber_R2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, r2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "calibrationStandardArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationData_CalibrationStandard),
        .number = CalibrationData_Calibration_FieldNumber_CalibrationStandardArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalibrationData_Calibration__storage_, calibrationStandardArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalibrationData_Calibration class]
                                     rootClass:[ClarosInstrumentCalibrationDataRoot class]
                                          file:ClarosInstrumentCalibrationDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalibrationData_Calibration__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\000ID\000\002\005A\000\005\013\000\006\n\000\010\010\000\013\000calibrationStandard"
        "\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(CalibrationData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CalibrationData_CalibrationStandard

@implementation CalibrationData_CalibrationStandard

@dynamic hasKnownValue, knownValue;
@dynamic hasMeasuredValue, measuredValue;
@dynamic secondaryValueArray, secondaryValueArray_Count;

typedef struct CalibrationData_CalibrationStandard__storage_ {
  uint32_t _has_storage_[1];
  CalibrationData_Value *knownValue;
  CalibrationData_Value *measuredValue;
  NSMutableArray *secondaryValueArray;
} CalibrationData_CalibrationStandard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "knownValue",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationData_Value),
        .number = CalibrationData_CalibrationStandard_FieldNumber_KnownValue,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CalibrationData_CalibrationStandard__storage_, knownValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "measuredValue",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationData_Value),
        .number = CalibrationData_CalibrationStandard_FieldNumber_MeasuredValue,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CalibrationData_CalibrationStandard__storage_, measuredValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryValueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationData_Value),
        .number = CalibrationData_CalibrationStandard_FieldNumber_SecondaryValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalibrationData_CalibrationStandard__storage_, secondaryValueArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalibrationData_CalibrationStandard class]
                                     rootClass:[ClarosInstrumentCalibrationDataRoot class]
                                          file:ClarosInstrumentCalibrationDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalibrationData_CalibrationStandard__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\r\000\004\000secondaryValue\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(CalibrationData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CalibrationData_SecondaryValue

@implementation CalibrationData_SecondaryValue

@dynamic valueArray, valueArray_Count;

typedef struct CalibrationData_SecondaryValue__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valueArray;
} CalibrationData_SecondaryValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationData_Value),
        .number = CalibrationData_SecondaryValue_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CalibrationData_SecondaryValue__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalibrationData_SecondaryValue class]
                                     rootClass:[ClarosInstrumentCalibrationDataRoot class]
                                          file:ClarosInstrumentCalibrationDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalibrationData_SecondaryValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(CalibrationData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CalibrationData_Value

@implementation CalibrationData_Value

@dynamic value;
@dynamic unit;
@dynamic chemicalForm;

typedef struct CalibrationData_Value__storage_ {
  uint32_t _has_storage_[1];
  float value;
  uint32_t unit;
  uint32_t chemicalForm;
} CalibrationData_Value__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Value_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CalibrationData_Value__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "unit",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Value_FieldNumber_Unit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CalibrationData_Value__storage_, unit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "chemicalForm",
        .dataTypeSpecific.className = NULL,
        .number = CalibrationData_Value_FieldNumber_ChemicalForm,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CalibrationData_Value__storage_, chemicalForm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CalibrationData_Value class]
                                     rootClass:[ClarosInstrumentCalibrationDataRoot class]
                                          file:ClarosInstrumentCalibrationDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CalibrationData_Value__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(CalibrationData)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
