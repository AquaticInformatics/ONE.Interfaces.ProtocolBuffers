// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_operations_spreadsheet_worksheet_celldata_binding.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosOperationsSpreadsheetWorksheetCelldataBinding.pbobjc.h"
#import "ClarosCommonFormBinding.pbobjc.h"
#import "ClarosCommonComputationBinding.pbobjc.h"
#import "ClarosInstrumentMeasurementBinding.pbobjc.h"
#import "ClarosInstrumentMeasurementFieldBinding.pbobjc.h"
#import "ClarosOperationsSpreadsheetBinding.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot

@implementation ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot_FileDescriptor

static GPBFileDescriptor *ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.operations.spreadsheet"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CellDataBinding

@implementation CellDataBinding

@dynamic bindingOneOfCase;
@dynamic instrumentMeasurementBinding;
@dynamic computationBinding;
@dynamic formBinding;
@dynamic spreadsheetBinding;
@dynamic fieldInstrumentMeasurementBinding;

typedef struct CellDataBinding__storage_ {
  uint32_t _has_storage_[2];
  InstrumentMeasurementBinding *instrumentMeasurementBinding;
  ComputationBinding *computationBinding;
  FormBinding *formBinding;
  SpreadsheetBinding *spreadsheetBinding;
  InstrumentMeasurementFieldBinding *fieldInstrumentMeasurementBinding;
} CellDataBinding__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "instrumentMeasurementBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentMeasurementBinding),
        .number = CellDataBinding_FieldNumber_InstrumentMeasurementBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CellDataBinding__storage_, instrumentMeasurementBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "computationBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(ComputationBinding),
        .number = CellDataBinding_FieldNumber_ComputationBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CellDataBinding__storage_, computationBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(FormBinding),
        .number = CellDataBinding_FieldNumber_FormBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CellDataBinding__storage_, formBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "spreadsheetBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(SpreadsheetBinding),
        .number = CellDataBinding_FieldNumber_SpreadsheetBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CellDataBinding__storage_, spreadsheetBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fieldInstrumentMeasurementBinding",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentMeasurementFieldBinding),
        .number = CellDataBinding_FieldNumber_FieldInstrumentMeasurementBinding,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CellDataBinding__storage_, fieldInstrumentMeasurementBinding),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CellDataBinding class]
                                     rootClass:[ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot class]
                                          file:ClarosOperationsSpreadsheetWorksheetCelldataBindingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CellDataBinding__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "binding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\007\034\000\010\022\000\t\013\000\n\022\000\013\037\002\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void CellDataBinding_ClearBindingOneOfCase(CellDataBinding *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
