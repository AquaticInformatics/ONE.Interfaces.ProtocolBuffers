// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_event.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentEvent.pbobjc.h"
#import "ClarosCommonDatetime.pbobjc.h"
#import "ClarosInstrumentEventMetadata.pbobjc.h"
#import "ClarosInstrumentCalibration.pbobjc.h"
#import "ClarosInstrumentPrognosys.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosInstrumentEventRoot

@implementation ClarosInstrumentEventRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosInstrumentEventRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentEventRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InstrumentEvent

@implementation InstrumentEvent

@dynamic calibrationsArray, calibrationsArray_Count;
@dynamic errorsArray, errorsArray_Count;
@dynamic infoArray, infoArray_Count;
@dynamic limitsArray, limitsArray_Count;
@dynamic remindersArray, remindersArray_Count;
@dynamic warningsArray, warningsArray_Count;
@dynamic prognosysArray, prognosysArray_Count;
@dynamic hasEventDateTime, eventDateTime;

typedef struct InstrumentEvent__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *calibrationsArray;
  NSMutableArray *errorsArray;
  NSMutableArray *infoArray;
  NSMutableArray *limitsArray;
  NSMutableArray *remindersArray;
  NSMutableArray *warningsArray;
  NSMutableArray *prognosysArray;
  DateTime *eventDateTime;
} InstrumentEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "calibrationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Calibration),
        .number = InstrumentEvent_FieldNumber_CalibrationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, calibrationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "errorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EventMetaData),
        .number = InstrumentEvent_FieldNumber_ErrorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, errorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "infoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EventMetaData),
        .number = InstrumentEvent_FieldNumber_InfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, infoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "limitsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EventMetaData),
        .number = InstrumentEvent_FieldNumber_LimitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, limitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "remindersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EventMetaData),
        .number = InstrumentEvent_FieldNumber_RemindersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, remindersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "warningsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(EventMetaData),
        .number = InstrumentEvent_FieldNumber_WarningsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, warningsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "prognosysArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PrognosysData),
        .number = InstrumentEvent_FieldNumber_PrognosysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, prognosysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eventDateTime",
        .dataTypeSpecific.className = GPBStringifySymbol(DateTime),
        .number = InstrumentEvent_FieldNumber_EventDateTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstrumentEvent__storage_, eventDateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstrumentEvent class]
                                     rootClass:[ClarosInstrumentEventRoot class]
                                          file:ClarosInstrumentEventRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstrumentEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
