// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_reportablequalifierdefinition_type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonCoreReportablequalifierdefinitionType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonCoreReportablequalifierdefinitionTypeRoot

@implementation ClarosCommonCoreReportablequalifierdefinitionTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ReportableQualifierDefinitionType

GPBEnumDescriptor *ReportableQualifierDefinitionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ReportableQualifierDefinitionUnknown\000Rep"
        "ortableQualifierDefinitionEnteredvalue\000R"
        "eportableQualifierDefinitionZero\000Reporta"
        "bleQualifierDefinitionHalfentered\000Report"
        "ableQualifierDefinitionConstant\000";
    static const int32_t values[] = {
        ReportableQualifierDefinitionType_ReportableQualifierDefinitionUnknown,
        ReportableQualifierDefinitionType_ReportableQualifierDefinitionEnteredvalue,
        ReportableQualifierDefinitionType_ReportableQualifierDefinitionZero,
        ReportableQualifierDefinitionType_ReportableQualifierDefinitionHalfentered,
        ReportableQualifierDefinitionType_ReportableQualifierDefinitionConstant,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ReportableQualifierDefinitionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ReportableQualifierDefinitionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ReportableQualifierDefinitionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ReportableQualifierDefinitionType_ReportableQualifierDefinitionUnknown:
    case ReportableQualifierDefinitionType_ReportableQualifierDefinitionEnteredvalue:
    case ReportableQualifierDefinitionType_ReportableQualifierDefinitionZero:
    case ReportableQualifierDefinitionType_ReportableQualifierDefinitionHalfentered:
    case ReportableQualifierDefinitionType_ReportableQualifierDefinitionConstant:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
