// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_clarosdatetime.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonCoreClarosdatetime.pbobjc.h"
#import "ClarosCommonCoreMobiledatetime.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonCoreClarosdatetimeRoot

@implementation ClarosCommonCoreClarosdatetimeRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonCoreClarosdatetimeRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonCoreClarosdatetimeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.core"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ClarosDateTime

@implementation ClarosDateTime

@dynamic clarosDateTimeOneOfCase;
@dynamic mobileDateTime;
@dynamic jsonDateTime;
@dynamic ticks;

typedef struct ClarosDateTime__storage_ {
  uint32_t _has_storage_[2];
  MobileDateTime *mobileDateTime;
  NSString *jsonDateTime;
  uint64_t ticks;
} ClarosDateTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mobileDateTime",
        .dataTypeSpecific.className = GPBStringifySymbol(MobileDateTime),
        .number = ClarosDateTime_FieldNumber_MobileDateTime,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ClarosDateTime__storage_, mobileDateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "jsonDateTime",
        .dataTypeSpecific.className = NULL,
        .number = ClarosDateTime_FieldNumber_JsonDateTime,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ClarosDateTime__storage_, jsonDateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ticks",
        .dataTypeSpecific.className = NULL,
        .number = ClarosDateTime_FieldNumber_Ticks,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ClarosDateTime__storage_, ticks),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ClarosDateTime class]
                                     rootClass:[ClarosCommonCoreClarosdatetimeRoot class]
                                          file:ClarosCommonCoreClarosdatetimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ClarosDateTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "clarosDateTime",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\016\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ClarosDateTime_ClearClarosDateTimeOneOfCase(ClarosDateTime *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
