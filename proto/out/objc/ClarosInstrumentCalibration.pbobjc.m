// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_calibration.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentCalibration.pbobjc.h"
#import "ClarosInstrumentCalibrationStandard.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosInstrumentCalibrationRoot

@implementation ClarosInstrumentCalibrationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosInstrumentCalibrationRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentCalibrationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Calibration

@implementation Calibration

@dynamic id_p;
@dynamic userId;
@dynamic time;
@dynamic status;
@dynamic offsetUnits;
@dynamic slopeUnits;
@dynamic slope;
@dynamic slopeAux;
@dynamic offset;
@dynamic r2;
@dynamic calibrationStandardsArray, calibrationStandardsArray_Count;

typedef struct Calibration__storage_ {
  uint32_t _has_storage_[1];
  uint32_t status;
  uint32_t offsetUnits;
  uint32_t slopeUnits;
  float slope;
  float slopeAux;
  float offset;
  float r2;
  NSString *id_p;
  NSString *userId;
  NSMutableArray *calibrationStandardsArray;
  uint64_t time;
} Calibration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Calibration__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Calibration__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "time",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_Time,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Calibration__storage_, time),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Calibration__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "offsetUnits",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_OffsetUnits,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Calibration__storage_, offsetUnits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slopeUnits",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_SlopeUnits,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Calibration__storage_, slopeUnits),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "slope",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_Slope,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Calibration__storage_, slope),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "slopeAux",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_SlopeAux,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Calibration__storage_, slopeAux),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_Offset,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Calibration__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "r2",
        .dataTypeSpecific.className = NULL,
        .number = Calibration_FieldNumber_R2,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Calibration__storage_, r2),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "calibrationStandardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(CalibrationStandard),
        .number = Calibration_FieldNumber_CalibrationStandardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Calibration__storage_, calibrationStandardsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Calibration class]
                                     rootClass:[ClarosInstrumentCalibrationRoot class]
                                          file:ClarosInstrumentCalibrationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Calibration__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\000ID\000\002\005A\000\005\013\000\006\n\000\010\010\000\013\000calibrationStandard"
        "s\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
