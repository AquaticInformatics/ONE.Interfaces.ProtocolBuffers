// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_sample.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonSample.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonSampleRoot

@implementation ClarosCommonSampleRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ClarosCommonSampleRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonSampleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - sample

@implementation sample

@dynamic oneofOneOfCase;
@dynamic sampleString;
@dynamic sampleUint32;
@dynamic sampleMap, sampleMap_Count;
@dynamic sampleRepeatedStringArray, sampleRepeatedStringArray_Count;
@dynamic sampleEnumType;
@dynamic repeatableOneOfArray, repeatableOneOfArray_Count;

typedef struct sample__storage_ {
  uint32_t _has_storage_[2];
  uint32_t sampleUint32;
  sample_enumType sampleEnumType;
  NSString *sampleString;
  NSMutableDictionary *sampleMap;
  NSMutableArray *sampleRepeatedStringArray;
  NSMutableArray *repeatableOneOfArray;
} sample__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleString",
        .dataTypeSpecific.className = NULL,
        .number = sample_FieldNumber_SampleString,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(sample__storage_, sampleString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleUint32",
        .dataTypeSpecific.className = NULL,
        .number = sample_FieldNumber_SampleUint32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(sample__storage_, sampleUint32),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sampleMap",
        .dataTypeSpecific.className = NULL,
        .number = sample_FieldNumber_SampleMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(sample__storage_, sampleMap),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleRepeatedStringArray",
        .dataTypeSpecific.className = NULL,
        .number = sample_FieldNumber_SampleRepeatedStringArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(sample__storage_, sampleRepeatedStringArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sampleEnumType",
        .dataTypeSpecific.enumDescFunc = sample_enumType_EnumDescriptor,
        .number = sample_FieldNumber_SampleEnumType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(sample__storage_, sampleEnumType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "repeatableOneOfArray",
        .dataTypeSpecific.className = GPBStringifySymbol(sample_RepeatableOneOf),
        .number = sample_FieldNumber_RepeatableOneOfArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(sample__storage_, repeatableOneOfArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[sample class]
                                     rootClass:[ClarosCommonSampleRoot class]
                                          file:ClarosCommonSampleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(sample__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "oneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\014\000\002\014\000\003\t\000\004\000sampleRepeatedString\000\005\016\000\006\000re"
        "peatableOneOf\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t sample_SampleEnumType_RawValue(sample *message) {
  GPBDescriptor *descriptor = [sample descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:sample_FieldNumber_SampleEnumType];
  return GPBGetMessageInt32Field(message, field);
}

void Setsample_SampleEnumType_RawValue(sample *message, int32_t value) {
  GPBDescriptor *descriptor = [sample descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:sample_FieldNumber_SampleEnumType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void sample_ClearOneofOneOfCase(sample *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum sample_enumType

GPBEnumDescriptor *sample_enumType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EnumUnknown\000EnumOne\000";
    static const int32_t values[] = {
        sample_enumType_EnumUnknown,
        sample_enumType_EnumOne,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(sample_enumType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:sample_enumType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL sample_enumType_IsValidValue(int32_t value__) {
  switch (value__) {
    case sample_enumType_EnumUnknown:
    case sample_enumType_EnumOne:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - sample_customMessage

@implementation sample_customMessage

@dynamic messageBody;

typedef struct sample_customMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageBody;
} sample_customMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageBody",
        .dataTypeSpecific.className = NULL,
        .number = sample_customMessage_FieldNumber_MessageBody,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(sample_customMessage__storage_, messageBody),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[sample_customMessage class]
                                     rootClass:[ClarosCommonSampleRoot class]
                                          file:ClarosCommonSampleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(sample_customMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\024\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(sample)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - sample_RepeatableOneOf

@implementation sample_RepeatableOneOf

@dynamic repeatableOneOfOneOfCase;
@dynamic repeatableOneOfString;
@dynamic repeatableOneOfUint32;
@dynamic repeatableCustomMessage;

typedef struct sample_RepeatableOneOf__storage_ {
  uint32_t _has_storage_[2];
  uint32_t repeatableOneOfUint32;
  NSString *repeatableOneOfString;
  sample_customMessage *repeatableCustomMessage;
} sample_RepeatableOneOf__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "repeatableOneOfString",
        .dataTypeSpecific.className = NULL,
        .number = sample_RepeatableOneOf_FieldNumber_RepeatableOneOfString,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(sample_RepeatableOneOf__storage_, repeatableOneOfString),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "repeatableOneOfUint32",
        .dataTypeSpecific.className = NULL,
        .number = sample_RepeatableOneOf_FieldNumber_RepeatableOneOfUint32,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(sample_RepeatableOneOf__storage_, repeatableOneOfUint32),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "repeatableCustomMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(sample_customMessage),
        .number = sample_RepeatableOneOf_FieldNumber_RepeatableCustomMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(sample_RepeatableOneOf__storage_, repeatableCustomMessage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[sample_RepeatableOneOf class]
                                     rootClass:[ClarosCommonSampleRoot class]
                                          file:ClarosCommonSampleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(sample_RepeatableOneOf__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "repeatableOneOf",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\n\025\000\013\025\000\014\027\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(sample)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void sample_RepeatableOneOf_ClearRepeatableOneOfOneOfCase(sample_RepeatableOneOf *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
