// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_dayofweek.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonCoreDayofweek.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonCoreDayofweekRoot

@implementation ClarosCommonCoreDayofweekRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum DayOfWeek

GPBEnumDescriptor *DayOfWeek_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DowUnknown\000DowSunday\000DowMonday\000DowTuesda"
        "y\000DowWednesday\000DowThursday\000DowFriday\000Dow"
        "Saturday\000";
    static const int32_t values[] = {
        DayOfWeek_DowUnknown,
        DayOfWeek_DowSunday,
        DayOfWeek_DowMonday,
        DayOfWeek_DowTuesday,
        DayOfWeek_DowWednesday,
        DayOfWeek_DowThursday,
        DayOfWeek_DowFriday,
        DayOfWeek_DowSaturday,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DayOfWeek)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DayOfWeek_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DayOfWeek_IsValidValue(int32_t value__) {
  switch (value__) {
    case DayOfWeek_DowUnknown:
    case DayOfWeek_DowSunday:
    case DayOfWeek_DowMonday:
    case DayOfWeek_DowTuesday:
    case DayOfWeek_DowWednesday:
    case DayOfWeek_DowThursday:
    case DayOfWeek_DowFriday:
    case DayOfWeek_DowSaturday:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
