// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_computation_variable.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonComputationVariable.pbobjc.h"
#import "ClarosCommonComputationCursorType.pbobjc.h"
#import "ClarosCommonComputationPropertyselectorType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonComputationVariableRoot

@implementation ClarosCommonComputationVariableRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonComputationVariableRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonComputationVariableRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.computation"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Variable

@implementation Variable

@dynamic bindingOneOfCase;
@dynamic i18NKey;
@dynamic name;
@dynamic description_p;
@dynamic quantityTypeId;
@dynamic cursorType;
@dynamic cursorAbsolute;
@dynamic propertySelector;
@dynamic suggestedParameterId;
@dynamic suggestedUnitId;
@dynamic columnId;
@dynamic formFieldId;

typedef struct Variable__storage_ {
  uint32_t _has_storage_[2];
  ComputationCursorType cursorType;
  uint32_t cursorAbsolute;
  PropertySelectorType propertySelector;
  uint32_t suggestedParameterId;
  uint32_t suggestedUnitId;
  uint32_t columnId;
  uint32_t formFieldId;
  NSString *i18NKey;
  NSString *name;
  NSString *description_p;
  NSString *quantityTypeId;
} Variable__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "i18NKey",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_I18NKey,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Variable__storage_, i18NKey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Variable__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Variable__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quantityTypeId",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_QuantityTypeId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Variable__storage_, quantityTypeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cursorType",
        .dataTypeSpecific.enumDescFunc = ComputationCursorType_EnumDescriptor,
        .number = Variable_FieldNumber_CursorType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Variable__storage_, cursorType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cursorAbsolute",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_CursorAbsolute,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Variable__storage_, cursorAbsolute),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "propertySelector",
        .dataTypeSpecific.enumDescFunc = PropertySelectorType_EnumDescriptor,
        .number = Variable_FieldNumber_PropertySelector,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Variable__storage_, propertySelector),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "suggestedParameterId",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_SuggestedParameterId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Variable__storage_, suggestedParameterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "suggestedUnitId",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_SuggestedUnitId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Variable__storage_, suggestedUnitId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "columnId",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_ColumnId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Variable__storage_, columnId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "formFieldId",
        .dataTypeSpecific.className = NULL,
        .number = Variable_FieldNumber_FormFieldId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Variable__storage_, formFieldId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Variable class]
                                     rootClass:[ClarosCommonComputationVariableRoot class]
                                          file:ClarosCommonComputationVariableRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Variable__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "binding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001\003$\000\004\016\000\005\n\000\006\016\000\007\020\000\010\024\000\t\017\000\n\010\000\013\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Variable_CursorType_RawValue(Variable *message) {
  GPBDescriptor *descriptor = [Variable descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Variable_FieldNumber_CursorType];
  return GPBGetMessageInt32Field(message, field);
}

void SetVariable_CursorType_RawValue(Variable *message, int32_t value) {
  GPBDescriptor *descriptor = [Variable descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Variable_FieldNumber_CursorType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t Variable_PropertySelector_RawValue(Variable *message) {
  GPBDescriptor *descriptor = [Variable descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Variable_FieldNumber_PropertySelector];
  return GPBGetMessageInt32Field(message, field);
}

void SetVariable_PropertySelector_RawValue(Variable *message, int32_t value) {
  GPBDescriptor *descriptor = [Variable descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Variable_FieldNumber_PropertySelector];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void Variable_ClearBindingOneOfCase(Variable *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
