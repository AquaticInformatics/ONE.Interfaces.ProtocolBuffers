// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_form_field_worksheet_column_UTC.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonFormFieldWorksheetColumnUtc.pbobjc.h"
#import "ClarosOperationsSpreadsheetWorksheetColumn.pbobjc.h"
#import "ClarosOperationsSpreadsheetWorksheetType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonFormFieldWorksheetColumnUtcRoot

@implementation ClarosCommonFormFieldWorksheetColumnUtcRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonFormFieldWorksheetColumnUtcRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonFormFieldWorksheetColumnUtcRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.form"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FormFieldWorksheetColumnUTC

@implementation FormFieldWorksheetColumnUTC

@dynamic plantId;
@dynamic worksheetType;
@dynamic hasColumn, column;

typedef struct FormFieldWorksheetColumnUTC__storage_ {
  uint32_t _has_storage_[1];
  WorksheetType worksheetType;
  NSString *plantId;
  Column *column;
} FormFieldWorksheetColumnUTC__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "plantId",
        .dataTypeSpecific.className = NULL,
        .number = FormFieldWorksheetColumnUTC_FieldNumber_PlantId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FormFieldWorksheetColumnUTC__storage_, plantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "worksheetType",
        .dataTypeSpecific.enumDescFunc = WorksheetType_EnumDescriptor,
        .number = FormFieldWorksheetColumnUTC_FieldNumber_WorksheetType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FormFieldWorksheetColumnUTC__storage_, worksheetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "column",
        .dataTypeSpecific.className = GPBStringifySymbol(Column),
        .number = FormFieldWorksheetColumnUTC_FieldNumber_Column,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FormFieldWorksheetColumnUTC__storage_, column),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FormFieldWorksheetColumnUTC class]
                                     rootClass:[ClarosCommonFormFieldWorksheetColumnUtcRoot class]
                                          file:ClarosCommonFormFieldWorksheetColumnUtcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FormFieldWorksheetColumnUTC__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FormFieldWorksheetColumnUTC_WorksheetType_RawValue(FormFieldWorksheetColumnUTC *message) {
  GPBDescriptor *descriptor = [FormFieldWorksheetColumnUTC descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormFieldWorksheetColumnUTC_FieldNumber_WorksheetType];
  return GPBGetMessageInt32Field(message, field);
}

void SetFormFieldWorksheetColumnUTC_WorksheetType_RawValue(FormFieldWorksheetColumnUTC *message, int32_t value) {
  GPBDescriptor *descriptor = [FormFieldWorksheetColumnUTC descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FormFieldWorksheetColumnUTC_FieldNumber_WorksheetType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
