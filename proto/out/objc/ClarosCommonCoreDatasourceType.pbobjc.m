// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_core_datasource_type.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonCoreDatasourceType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonCoreDatasourceTypeRoot

@implementation ClarosCommonCoreDatasourceTypeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum DataSourceType

GPBEnumDescriptor *DataSourceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DatasourceUnknown\000DatasourceForm\000Datasou"
        "rceComputation\000DatasourceSpreadsheet\000Dat"
        "asourceInstrumentmeasurement\000DatasourceI"
        "mport\000DatasourceSpreadsheetDefinition\000";
    static const int32_t values[] = {
        DataSourceType_DatasourceUnknown,
        DataSourceType_DatasourceForm,
        DataSourceType_DatasourceComputation,
        DataSourceType_DatasourceSpreadsheet,
        DataSourceType_DatasourceInstrumentmeasurement,
        DataSourceType_DatasourceImport,
        DataSourceType_DatasourceSpreadsheetDefinition,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DataSourceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DataSourceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DataSourceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DataSourceType_DatasourceUnknown:
    case DataSourceType_DatasourceForm:
    case DataSourceType_DatasourceComputation:
    case DataSourceType_DatasourceSpreadsheet:
    case DataSourceType_DatasourceInstrumentmeasurement:
    case DataSourceType_DatasourceImport:
    case DataSourceType_DatasourceSpreadsheetDefinition:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
