// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_definition.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ClarosCommonTaskDefinition.pbobjc.h"
#import "ClarosCommonTaskDefinitionBindingInstrumentMaintenance.pbobjc.h"
#import "ClarosCommonTaskDefinitionSource.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ClarosCommonTaskDefinitionRoot

@implementation ClarosCommonTaskDefinitionRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosCommonTaskDefinitionRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonTaskDefinitionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common.task"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TaskDefinition

@implementation TaskDefinition

@dynamic bindingOneOfCase;
@dynamic taskSourceArray, taskSourceArray_Count;
@dynamic triggerType;
@dynamic bindingInstrumentMaintenance;

typedef struct TaskDefinition__storage_ {
  uint32_t _has_storage_[2];
  TaskDefinition_MaintenanceTriggerType triggerType;
  NSMutableArray *taskSourceArray;
  BindingInstrumentMaintenance *bindingInstrumentMaintenance;
} TaskDefinition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "taskSourceArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TaskDefinitionSource),
        .number = TaskDefinition_FieldNumber_TaskSourceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TaskDefinition__storage_, taskSourceArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "triggerType",
        .dataTypeSpecific.enumDescFunc = TaskDefinition_MaintenanceTriggerType_EnumDescriptor,
        .number = TaskDefinition_FieldNumber_TriggerType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TaskDefinition__storage_, triggerType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bindingInstrumentMaintenance",
        .dataTypeSpecific.className = GPBStringifySymbol(BindingInstrumentMaintenance),
        .number = TaskDefinition_FieldNumber_BindingInstrumentMaintenance,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TaskDefinition__storage_, bindingInstrumentMaintenance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TaskDefinition class]
                                     rootClass:[ClarosCommonTaskDefinitionRoot class]
                                          file:ClarosCommonTaskDefinitionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TaskDefinition__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "binding",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\000taskSource\000\002\013\000\003\034\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TaskDefinition_TriggerType_RawValue(TaskDefinition *message) {
  GPBDescriptor *descriptor = [TaskDefinition descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TaskDefinition_FieldNumber_TriggerType];
  return GPBGetMessageInt32Field(message, field);
}

void SetTaskDefinition_TriggerType_RawValue(TaskDefinition *message, int32_t value) {
  GPBDescriptor *descriptor = [TaskDefinition descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TaskDefinition_FieldNumber_TriggerType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void TaskDefinition_ClearBindingOneOfCase(TaskDefinition *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum TaskDefinition_MaintenanceTriggerType

GPBEnumDescriptor *TaskDefinition_MaintenanceTriggerType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MaintenanceTriggerUnknown\000MaintenanceTri"
        "ggerScheduled\000MaintenanceTriggerPrognosy"
        "s\000MaintenanceTriggerManual\000";
    static const int32_t values[] = {
        TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerUnknown,
        TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerScheduled,
        TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerPrognosys,
        TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerManual,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TaskDefinition_MaintenanceTriggerType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TaskDefinition_MaintenanceTriggerType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TaskDefinition_MaintenanceTriggerType_IsValidValue(int32_t value__) {
  switch (value__) {
    case TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerUnknown:
    case TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerScheduled:
    case TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerPrognosys:
    case TaskDefinition_MaintenanceTriggerType_MaintenanceTriggerManual:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
