// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_data.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentData.pbobjc.h"
#import "ClarosInstrumentEvent.pbobjc.h"
#import "ClarosInstrumentMeasurement.pbobjc.h"
#import "ClarosCommonCoreClarosdatetime.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosInstrumentDataRoot

@implementation ClarosInstrumentDataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosInstrumentDataRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InstrumentData

@implementation InstrumentData

@dynamic tenantId;
@dynamic fusionId;
@dynamic hasEvents, events;
@dynamic measurementsArray, measurementsArray_Count;
@dynamic settings, settings_Count;
@dynamic states, states_Count;
@dynamic hasInstrumentDataDateTime, instrumentDataDateTime;

typedef struct InstrumentData__storage_ {
  uint32_t _has_storage_[1];
  NSString *tenantId;
  NSString *fusionId;
  InstrumentEvent *events;
  NSMutableArray *measurementsArray;
  NSMutableDictionary *settings;
  NSMutableDictionary *states;
  ClarosDateTime *instrumentDataDateTime;
} InstrumentData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tenantId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentData_FieldNumber_TenantId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, tenantId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fusionId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentData_FieldNumber_FusionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, fusionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "events",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentEvent),
        .number = InstrumentData_FieldNumber_Events,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, events),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "measurementsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentMeasurement),
        .number = InstrumentData_FieldNumber_MeasurementsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, measurementsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "settings",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentData_FieldNumber_Settings,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, settings),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "states",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentData_FieldNumber_States,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, states),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "instrumentDataDateTime",
        .dataTypeSpecific.className = GPBStringifySymbol(ClarosDateTime),
        .number = InstrumentData_FieldNumber_InstrumentDataDateTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstrumentData__storage_, instrumentDataDateTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstrumentData class]
                                     rootClass:[ClarosInstrumentDataRoot class]
                                          file:ClarosInstrumentDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstrumentData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\010\000\007\026\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
