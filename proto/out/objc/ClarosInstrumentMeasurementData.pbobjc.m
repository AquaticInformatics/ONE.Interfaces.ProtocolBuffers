// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_instrument_measurement_data.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosInstrumentMeasurementData.pbobjc.h"
#import "ClarosCommonCoreMeasurement.pbobjc.h"
#import "ClarosInstrumentEventData.pbobjc.h"
#import "ClarosCommonGisGis.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosInstrumentMeasurementDataRoot

@implementation ClarosInstrumentMeasurementDataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ClarosInstrumentMeasurementDataRoot_FileDescriptor

static GPBFileDescriptor *ClarosInstrumentMeasurementDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.instrument.measurement"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InstrumentMeasurementData

@implementation InstrumentMeasurementData

@dynamic instrumentMeasurementId;
@dynamic channel;
@dynamic fusionId;
@dynamic hasMeasurement, measurement;
@dynamic hasSupportingMeasurements, supportingMeasurements;
@dynamic hasGis, gis;
@dynamic measurementDataExtended;
@dynamic hasMeasurementEvent, measurementEvent;

typedef struct InstrumentMeasurementData__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  NSString *instrumentMeasurementId;
  NSString *fusionId;
  Measurement *measurement;
  InstrumentMeasurementData *supportingMeasurements;
  GIS *gis;
  NSString *measurementDataExtended;
  InstrumentEventData *measurementEvent;
} InstrumentMeasurementData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "instrumentMeasurementId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementData_FieldNumber_InstrumentMeasurementId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, instrumentMeasurementId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementData_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fusionId",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementData_FieldNumber_FusionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, fusionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "measurement",
        .dataTypeSpecific.className = GPBStringifySymbol(Measurement),
        .number = InstrumentMeasurementData_FieldNumber_Measurement,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, measurement),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "supportingMeasurements",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentMeasurementData),
        .number = InstrumentMeasurementData_FieldNumber_SupportingMeasurements,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, supportingMeasurements),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gis",
        .dataTypeSpecific.className = GPBStringifySymbol(GIS),
        .number = InstrumentMeasurementData_FieldNumber_Gis,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, gis),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "measurementDataExtended",
        .dataTypeSpecific.className = NULL,
        .number = InstrumentMeasurementData_FieldNumber_MeasurementDataExtended,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, measurementDataExtended),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "measurementEvent",
        .dataTypeSpecific.className = GPBStringifySymbol(InstrumentEventData),
        .number = InstrumentMeasurementData_FieldNumber_MeasurementEvent,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InstrumentMeasurementData__storage_, measurementEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InstrumentMeasurementData class]
                                     rootClass:[ClarosInstrumentMeasurementDataRoot class]
                                          file:ClarosInstrumentMeasurementDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InstrumentMeasurementData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\027\000\003\010\000\005\026\000\007\027\000\010\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
