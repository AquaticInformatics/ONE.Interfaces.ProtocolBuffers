// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_task_task.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AuditEvent;
@class TaskData;
@class TaskDefinition;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - ClarosCommonTaskTaskRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ClarosCommonTaskTaskRoot : GPBRootObject
@end

#pragma mark - Task

typedef GPB_ENUM(Task_FieldNumber) {
  Task_FieldNumber_Id_p = 1,
  Task_FieldNumber_Name = 2,
  Task_FieldNumber_Description_p = 3,
  Task_FieldNumber_Assignee = 4,
  Task_FieldNumber_Reporter = 5,
  Task_FieldNumber_Priority = 6,
  Task_FieldNumber_InstrumentId = 7,
  Task_FieldNumber_TaskDefinition = 8,
  Task_FieldNumber_Taskdata = 9,
  Task_FieldNumber_AuditEvent = 10,
};

@interface Task : GPBMessage

/** header */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** User Defined Name for the Task */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Desciption of the work to do in this task */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** GUID of the User that the task is assigned */
@property(nonatomic, readwrite, copy, null_resettable) NSString *assignee;

/** GUID of the user that created the task */
@property(nonatomic, readwrite, copy, null_resettable) NSString *reporter;

/** TaskSeverity severity = 6;                  // Enumeration of common severities */
@property(nonatomic, readwrite) uint32_t priority;

/** Source                                   // From where did the task come? */
@property(nonatomic, readwrite, copy, null_resettable) NSString *instrumentId;

/** definition */
@property(nonatomic, readwrite, strong, null_resettable) TaskDefinition *taskDefinition;
/** Test to see if @c taskDefinition has been set. */
@property(nonatomic, readwrite) BOOL hasTaskDefinition;

/** data */
@property(nonatomic, readwrite, strong, null_resettable) TaskData *taskdata;
/** Test to see if @c taskdata has been set. */
@property(nonatomic, readwrite) BOOL hasTaskdata;

/** Audit Events related to to the Task */
@property(nonatomic, readwrite, strong, null_resettable) AuditEvent *auditEvent;
/** Test to see if @c auditEvent has been set. */
@property(nonatomic, readwrite) BOOL hasAuditEvent;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
