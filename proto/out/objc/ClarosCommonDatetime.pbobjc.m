// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: claros_common_datetime.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "ClarosCommonDatetime.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClarosCommonDatetimeRoot

@implementation ClarosCommonDatetimeRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ClarosCommonDatetimeRoot_FileDescriptor

static GPBFileDescriptor *ClarosCommonDatetimeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"claros.common"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DateTime

@implementation DateTime

@dynamic hasDateField, dateField;
@dynamic hasTimeField, timeField;
@dynamic timeZone;

typedef struct DateTime__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeZone;
  DateTime_Date *dateField;
  DateTime_Time *timeField;
} DateTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dateField",
        .dataTypeSpecific.className = GPBStringifySymbol(DateTime_Date),
        .number = DateTime_FieldNumber_DateField,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DateTime__storage_, dateField),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeField",
        .dataTypeSpecific.className = GPBStringifySymbol(DateTime_Time),
        .number = DateTime_FieldNumber_TimeField,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DateTime__storage_, timeField),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timeZone",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_FieldNumber_TimeZone,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DateTime__storage_, timeZone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DateTime class]
                                     rootClass:[ClarosCommonDatetimeRoot class]
                                          file:ClarosCommonDatetimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DateTime__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\t\000\002\t\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DateTime_Time

@implementation DateTime_Time

@dynamic hours;
@dynamic minutes;
@dynamic seconds;

typedef struct DateTime_Time__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hours;
  uint32_t minutes;
  uint32_t seconds;
} DateTime_Time__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hours",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Time_FieldNumber_Hours,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DateTime_Time__storage_, hours),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "minutes",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Time_FieldNumber_Minutes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DateTime_Time__storage_, minutes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "seconds",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Time_FieldNumber_Seconds,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DateTime_Time__storage_, seconds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DateTime_Time class]
                                     rootClass:[ClarosCommonDatetimeRoot class]
                                          file:ClarosCommonDatetimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DateTime_Time__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DateTime)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DateTime_Date

@implementation DateTime_Date

@dynamic year;
@dynamic month;
@dynamic day;

typedef struct DateTime_Date__storage_ {
  uint32_t _has_storage_[1];
  uint32_t year;
  uint32_t month;
  uint32_t day;
} DateTime_Date__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "year",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Date_FieldNumber_Year,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DateTime_Date__storage_, year),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "month",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Date_FieldNumber_Month,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DateTime_Date__storage_, month),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "day",
        .dataTypeSpecific.className = NULL,
        .number = DateTime_Date_FieldNumber_Day,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DateTime_Date__storage_, day),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DateTime_Date class]
                                     rootClass:[ClarosCommonDatetimeRoot class]
                                          file:ClarosCommonDatetimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DateTime_Date__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(DateTime)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
