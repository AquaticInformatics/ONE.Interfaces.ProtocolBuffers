syntax = "proto3";
 
import "google/protobuf/wrappers.proto";
import "instrument_reference.proto";
import "instrument_event_data.proto";
import "instrument_measurement_data.proto";
import "instrument_status.proto";
import "instrument_settings.proto";
import "instrument_performance.proto";
import "instrument_diagnostic.proto";

option csharp_namespace ="ONE.Models.CSharp.Instrument";

message InstrumentData {
    // unique identifier of the instrument
    google.protobuf.StringValue id = 1 [json_name = "id"];
    
    // Header Information. Unique id of an instrument
    string fusionId = 2 [json_name = "fid"];

	// Measurements related to an instrument
    // Classical definition of a measurement (Time Series)
    InstrumentMeasurementDatas instrumentMeasurementDatas = 3 [json_name = "imd"];
    
    // Metadata related to a Timestamp that represents an action that has occurred within an instrument.
    InstrumentEventDatas instrumentEventDatas = 4 [json_name = "ied"];                    
 
    // The current / predictive condition of the instrument. 
    // This is commonly thought of the "Twin" data related to an instrument. 
    // This includes Errors, Warnings, Processing Status and Prognosys data
    InstrumentStatuses instrumentStatuses = 5 [json_name = "is"];
     
    // TODO: this class has not yet been given short json_names
    // Describes the configuration of an instrument.  This is commonly stored in the Instrument Twin.
    InstrumentSettings instrumentSettings = 6 [json_name = "ist"];

    // Specifies the instrument reference, which contains no-change identifier properties for an instrument once its life-time begins.
    InstrumentReference instrumentReference = 7 [json_name = "ir"];

    // TODO: this class has not yet been given short json_names
    // Performance data of an instrument.
    InstrumentPerformance instrumentPerformance = 8 [json_name = "ip"];

    // Diagnostic log data for an instrument.
    InstrumentDiagnostics instrumentDiagnostics = 9 [json_name = "idg"];

    // This property is not populated from ingestion side. It will be populated by downstream services.
    google.protobuf.StringValue tenantId = 10 [json_name = "t"];
}

message InstrumentDatas {
    repeated InstrumentData items = 1 [json_name = "i"];
}